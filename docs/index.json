[
{
	"uri": "https://gitpitch.com/docs/markdown-features/basics/",
	"title": "Markdown Basics",
	"tags": [],
	"description": "",
	"content": " GitHub Flavored Markdown is the principal creation tool for slide content within PITCHME.md. This is the same tool you use as a developer to create project READMEs or Wikis for your Git repos.\nThe Mastering Markdown Guide is a good resource to learn or refresh the basic usage of Markdown and the GitHub Flavored Markdown (GFM) extensions.\n Use slide delimiters in your PITCHME.md file to split your markdown content across different slides.\n GitPitch presentation slides can display a wide range of different content types, including Markdown formatted text, headers, quotes, links, lists, tables, images, plus code, videos, math formulas and more.\nBeyond standard markdown syntax support, GitPitch supports and rich visual Markdown Widgets and Markdown Pro Widgets that let you deliver stunning slide designs and content.\nThe guides that follow detail the capabilities and syntax for working with GitPitch markdown.\n"
},
{
	"uri": "https://gitpitch.com/docs/settings/pitchme/",
	"title": "PITCHME.yaml",
	"tags": [],
	"description": "",
	"content": " GitPitch offers a wide range of slideshow settings that can be used to customize the overall look-and-feel and behavior of any presentation.\nTo activate custom settings for your slideshow presentation, add a PITCHME.yaml properties file alongside the PITCHME.md file in your repo. Custom settings are optional.\n Note, if you are creating slide decks within private Git repos see the Publishing Guide for important details about access control policies within your PITCHME.yaml files.\n Sample PITCHME.yaml Here is a sample of the custom settings found in the PITCHME.yaml used by the GitPitch Hello World slideshow presentation:\n# Layout layout : top-left # Look-and-Feel theme : night theme-override : assets/css/PITCHME.css logo : assets/images/logo.png highlight : ir-black # Behavior transition : none published : true # Plugins charts : true mathjax : TeX-AMS_HTML-full Click here to open a live view of the sample presentation in your browser:\n"
},
{
	"uri": "https://gitpitch.com/docs/layout-features/automatic-layout/",
	"title": "Automatic Layout",
	"tags": [],
	"description": "",
	"content": " When you develop slide content using GitPitch markdown you benefit from automatic layout of that content. The default layout policy centers content on your slides. However, if you ever want to change that default layout policy for your slide deck you can activate a custom layout policy in your PITCHME.yaml .\nThe following screenshot demonstrates the set of available automatic layout policies:\nWhile these automatic layout policies are a great way to get started, GitPitch is unique among markdown presentation solutions in offering support for custom slide layouts. Think drag-and-drop made possible directly within your presentation markdown. For all the details, see the Snap Layouts Guide .\n"
},
{
	"uri": "https://gitpitch.com/docs/citations/bibliography/",
	"title": "Citations + Bibliography",
	"tags": [],
	"description": "",
	"content": "  Activate a GitPitch Paid Plan to unlock Citations + Bibliography support.\n The Cite Markdown Widget can be used to add citations to any GitPitch slide deck. When citations are added a bibliography is automatically generated for the slide deck. Bibliographies are generated using existing BibTEX, EndNote, or RIS databases.\nThis guide describes how you can add citations to your slide decks:\n Register BibTEX, EndNote, or RIS database in your PITCHME.yaml  Use Cite Markdown Widget to add citations to your PITCHME.md  Optionally Customize Bibliography Page Title \u0026#43; Page Size  Optionally Customize Bibliography Font Family, Size, Padding  Recommendation for working with Citations within GitPitch Desktop   1. Register BibTEX, EndNote, or RIS database in your PITCHME.yaml Download your BibTEX, EndNote, or RIS database file and add it as an asset depedency for your slide deck. For example, the following directory structure shows a sample slide deck using a sample books.bib BibTEX database:\n. ├── assets │ ├── css │ │ └── PITCHME.css │ │ │ ├── citations │ │ └── books.bib │ │ │ └── img │ └── logo.png │ ├── PITCHME.md └── PITCHME.yaml The following PITCHME.yaml snippet shows how the citations-db setting can be used to register your custom database:\ncitations-db : assets/citations/books.bib The following database file name and file size conventions are enforced:\n BibTEX database files must use the .bib extension EndNote database files must use the .enl extension RIS database files must use the .ris extension Registered database files must not exceed 1Mb in size  2. Use Cite Markdown Widget to add citations to your PITCHME.md You can add a citation alongside text on any slide using @cite[cid] markdown widget syntax. The cid value is a citation identifier matching a record in your BibTEX, EndNote, or RIS Database .\nThe following markdown snippet shows citations added alongside sample markdown list items:\n- The Tex Book @cite[texbook] - The LaTeX Companion @cite[latex:companion] - Literate Programming @cite[knuth:1984] - Computer Typesetting @cite[lesk:1977] - LaTex: a Document Preparation System @cite[latex2e] This sample markdown snippet renders as follows:\nEach citation becomes a hyperlink to a bibliography slide that is automatically generated and appended to the end of your slide deck.\n3. Optionally Customize Bibliography Page Title + Page Size By default the generated bibliography slide renders using the following conventions:\n The default title text appearing on the slide is Bibliography The default number of bibliographic entries per slide is 10  You can override these default conventions using the citations-page-title and citations-page-size settings respectively. For example:\ncitations-db : assets/citations/books.bib citations-page-title : \u0026#34;Further Reading\u0026#34; citations-page-size : 14 4. Optionally Customize Bibliography Font Family, Size, Padding By default the generated bibliography renders using the following CSS styles:\n/* Bibliography Page Title Style */ h4.csl-references { font-size: 30px; font-weight: bold; font-family: \u0026#34;Ubuntu\u0026#34;; } /* Bibliography Entry Style */ div.csl-entry { display: flex !important; font-size: 20px; font-family: \u0026#34;Ubuntu\u0026#34;; padding-bottom: 20px; } /* Bibliography Entry Index Style */ div.csl-left-margin { padding-right: 6px; } You can override these default style rules to customize the appearance of the bibliography in your slide decks. To overide these default styles simply add your own custom style rules per the Custom CSS Guide .\n5. Recommendation for working with Citations within GitPitch Desktop Processing citations within your PITCHME.md and auto-generating a bibliography slide is a compute intensive task. The time spent on this task can impact the auto-refresh responsiveness of GitPitch Desktop when developing slide content.\nIf the auto-refresh feature of the Desktop app is heavily impacted for a slide deck using citations then it is recommended that during slide content development you temporarily disable the citations-db setting in your PITCHME.yaml .\nThe best way to tempoarily disable this setting is to comment it out as follows:\n# citations-db : assets/citations/book.bib If you do temporarily disable this setting do remember to activate it again to verify your citations and bibliography are working as expected before publishing the slide deck.\n"
},
{
	"uri": "https://gitpitch.com/docs/rich-media-features/color-backgrounds/",
	"title": "Color Backgrounds",
	"tags": [],
	"description": "",
	"content": "  Learn By Example  Learn By Example - Color Gradients  Slide Background Design Templates   Basic slide delimiter syntax allows markdown content to be split into a series of slides. Special color delimiter syntax allows overriding the basic delimiter semantics in order to activate a custom background color for specific slides.\nA well chosen background color can dramatically enhance the visual appearance and effectiveness of any slide within a presentation:\nThe color delimiter can take any value that is valid on the background-color css property .\nLearn By Example This PITCHME.md markdown snippet:\n---?color=#e49436 # OK Results in the rendering of the following slide:\nLearn By Example - Color Gradients This PITCHME.md markdown snippet:\n---?color=linear-gradient(to left, #56ccf2, #2f80ed) ## Your Slide Content Goes Here Results in the rendering of the following slide:\n For some stunning background color gradient examples and inspirations check out UI Gradients .\n "
},
{
	"uri": "https://gitpitch.com/docs/enterprise/license/",
	"title": "Enterprise Licensing",
	"tags": [],
	"description": "",
	"content": " GitPitch Enterprise License An Enterprise license unlocks both the GitPitch Server and GitPitch Desktop .\nThe Enterprise license is made available on a recurring subscription basis. Yearly and quarterly subscription plans are available. Pricing details are available on the GitPitch website, see here .\n"
},
{
	"uri": "https://gitpitch.com/docs/code-features/fenced-blocks/",
	"title": "Fenced Code Blocks",
	"tags": [],
	"description": "",
	"content": "  Introducing Fenced Code Blocks (FCB)  Simple FCB Slide Example  Snap Layouts FCB Example  Pro Code Zoom FCB Example  The Importance of Code Language Hints  Code Language Hints Quick Reference Table   Introducing Fenced Code Blocks A block of source code can be added directly to any slide within your PITCHME.md using triple back-ticks markdown syntax. For a detailed description of this triple back-ticks syntax, see the GitHub Fenced Code Blocks guide. To learn by example, keep reading this guide for demo usage.\nSimple FCB Slide Example This PITCHME.md sample markdown snippet uses an elixir code language hint :\n--- @snap[north span-100] #### Fenced Code Block @snapend ```elixir defmodule GenMetrics.GenStage.Monitor do use GenServer alias GenMetrics.GenStage.Manager alias GenMetrics.GenStage.Monitor alias GenMetrics.GenStage.Pipeline alias GenMetrics.GenStage.Window alias GenMetrics.Reporter alias GenMetrics.Utils.Runtime @moduledoc false @handle_demand :handle_demand @handle_events :handle_events @handle_call :handle_call @handle_cast :handle_cast defstruct pipeline: %Pipeline{}, metrics: nil, start: 0, duration: 0 ``` Results in the rendering of the following slide:\n See the Code Highlighting Guide to learn how you can control the highlighting style and background color of your code slides.\n Snap Layouts FCB Example This PITCHME.md sample markdown snippet uses elixir code language hints and snap-layouts syntax:\n--- @snap[east span-50] ### Fenced Code within\u0026lt;br\u0026gt;Snap Layouts @snapend @snap[north-west span-55] #### Module Aliases ```elixir alias GenMetrics.GenStage.Manager alias GenMetrics.GenStage.Monitor alias GenMetrics.GenStage.Pipeline alias GenMetrics.Reporter alias GenMetrics.GenStage.Window alias GenMetrics.Utils.Runtime ``` @snapend @snap[south-west span-55] #### Module Attributes ```elixir @moduledoc false @handle_demand :handle_demand @handle_events :handle_events @handle_call :handle_call @handle_cast :handle_cast ``` @snapend Results in the rendering of the following slide:\n See the Code Highlighting Guide to learn how you can control the highlighting style and background color of your code slides.\n Pro Code Zoom FCB Example This PITCHME.md sample markdown snippet uses an sql code language hint :\n--- @snap[north span-100] #### Fenced Code Block with Pro Code Zoom @snapend ```sql zoom-20 CREATE TABLE \u0026#34;topic\u0026#34; ( \u0026#34;id\u0026#34; serial NOT NULL PRIMARY KEY, \u0026#34;forum_id\u0026#34; integer NOT NULL, \u0026#34;subject\u0026#34; varchar(255) NOT NULL ); ALTER TABLE \u0026#34;topic\u0026#34; ADD CONSTRAINT forum_id FOREIGN KEY (\u0026#34;forum_id\u0026#34;) REFERENCES \u0026#34;forum\u0026#34; (\u0026#34;id\u0026#34;); ``` Results in the rendering of the following slide:\n This sample slide provides a quick introduction to Code ZOOM. To learn about the full set of Code ZOOM features see the Pro Code Zoom Guide .\n The Importance of Code Language Hints Source code can be added to any slide using a number of different techniques. And once code has been added to a slide, it enjoys automatic syntax highlighting. But automatic syntax highlighting is best-effort only.\nThe use of an explicit code language hint is strongly recommended for the following reasons:\n Language hints ensure the code is rendered using the most appropriate highlighting style. Language hints also ensures that any markup in your code is properly escaped before being rendered as slide content in the browser.  Language hints are especially important when presenting code snippets containing markup syntax, for example: HTML, XML, PHP, React snippets etc.\nSee the Code Language Hints Quick Reference Table to find an alias that can be used as a language hint when displaying code on your slides.\nCode Language Hints Quick Reference Table The following table lists the supported languages and their corresponding aliases. You should use these aliases as the language hint anytime you are injecting code on your slides.\n   Language Aliases     1C 1c   ABNF abnf   Access logs accesslog   Ada ada   ARM assembler armasm, arm   AVR assembler avrasm   ActionScript actionscript, as   Alan alan, i   AngelScript angelscript, asc   Apache apache, apacheconf   AppleScript applescript, osascript   Arcade arcade   AsciiDoc asciidoc, adoc   AspectJ aspectj   AutoHotkey autohotkey   AutoIt autoit   Awk awk, mawk, nawk, gawk   Axapta axapta   Bash bash, sh, zsh   Basic basic   BNF bnf   Brainfuck brainfuck, bf   C# cs, csharp   C++ cpp, c, cc, h, c++, h++, hpp   C/AL cal   Cache Object Script cos, cls   CMake cmake, cmake.in   Coq coq   CSP csp   CSS css   Cap’n Proto capnproto, capnp   Clojure clojure, clj   CoffeeScript coffeescript, coffee, cson, iced   Crmsh crmsh, crm, pcmk   Crystal crystal, cr   Cypher (Neo4j) cypher   D d   DNS Zone file dns, zone, bind   DOS dos, bat, cmd   Dart dart   Delphi delphi, dpr, dfm, pas, pascal, freepascal, lazarus, lpr, lfm   Diff diff, patch   Django django, jinja   Dockerfile dockerfile, docker   dsconfig dsconfig   DTS (Device Tree) dts   Dust dust, dst   Dylan dylan   EBNF ebnf   Elixir elixir   Elm elm   Erlang erlang, erl   Excel excel, xls, xlsx   Extempore extempore, xtlang, xtm   F# fsharp, fs   FIX fix   Fortran fortran, f90, f95   G-Code gcode, nc   Gams gams, gms   GAUSS gauss, gss   GDScript godot, gdscript   Gherkin gherkin   GN for Ninja gn, gni   Go go, golang   Golo golo, gololang   Gradle gradle   Groovy groovy   HTML, XML xml, html, xhtml, rss, atom, xjb, xsd, xsl, plist   HTTP http, https   Haml haml   Handlebars handlebars, hbs, html.hbs, html.handlebars   Haskell haskell, hs   Haxe haxe, hx   Hy hy, hylang   Ini, TOML ini, toml   Inform7 inform7, i7   IRPF90 irpf90   JSON json   Java java, jsp   JavaScript javascript, js, jsx   Kotlin kotlin, kt   Leaf leaf   Lasso lasso, ls, lassoscript   Less less   LDIF ldif   Lisp lisp   LiveCode Server livecodeserver   LiveScript livescript, ls   Lua lua   Makefile makefile, mk, mak   Markdown markdown, md, mkdown, mkd   Mathematica mathematica, mma, wl   Matlab matlab   Maxima maxima   Maya Embedded Language mel   Mercury mercury   mIRC Scripting Language mirc, mrc   Mizar mizar   Mojolicious mojolicious   Monkey monkey   Moonscript moonscript, moon   N1QL n1ql   NSIS nsis   Nginx nginx, nginxconf   Nimrod nimrod, nim   Nix nix   OCaml ocaml, ml   Objective C objectivec, mm, objc, obj-c   OpenGL Shading Language glsl   OpenSCAD openscad, scad   Oracle Rules Language ruleslanguage   Oxygene oxygene   PF pf, pf.conf   PHP php, php3, php4, php5, php6   Parser3 parser3   Perl perl, pl, pm   Plaintext: no highlight plaintext   Pony pony   PostgreSQL \u0026amp; PL/pgSQL pgsql, postgres, postgresql   PowerShell powershell, ps   Processing processing   Prolog prolog   Properties properties   Protocol Buffers protobuf   Puppet puppet, pp   Python python, py, gyp   Python profiler results profile   Q k, kdb   QML qml   R r   Razor CSHTML cshtml, razor, razor-cshtml   ReasonML reasonml, re   RenderMan RIB rib   RenderMan RSL rsl   Roboconf graph, instances   Robot Framework robot, rf   RPM spec files rpm-specfile, rpm, spec, rpm-spec, specfile   Ruby ruby, rb, gemspec, podspec, thor, irb   Rust rust, rs   SAS SAS, sas   SCSS scss   SQL sql   STEP Part 21 p21, step, stp   Scala scala   Scheme scheme   Scilab scilab, sci   Shape Expressions shexc   Shell shell, console   Smali smali   Smalltalk smalltalk, st   Solidity solidity, sol   Stan stan   Stata stata   Structured Text iecst, scl, stl, structured-text   Stylus stylus, styl   SubUnit subunit   Supercollider supercollider, sc   Swift swift   Tcl tcl, tk   Terraform (HCL) terraform, tf, hcl   Test Anything Protocol tap   TeX tex   Thrift thrift   TP tp   Twig twig, craftcms   TypeScript typescript, ts   VB.Net vbnet, vb   VBScript vbscript, vbs   VHDL vhdl   Vala vala   Verilog verilog, v   Vim Script vim   x86 Assembly x86asm   XL xl, tao   XQuery xquery, xpath, xq   YAML yml, yaml   Zephir zephir, zep     This language alias table was last updated in late August, 2019.\n "
},
{
	"uri": "https://gitpitch.com/docs/getting-started/",
	"title": "Getting Started",
	"tags": [],
	"description": "",
	"content": "Chapter 1 Getting Started Slide Decks for Tech Conferences, Meetups, and Training\n"
},
{
	"uri": "https://gitpitch.com/docs/pro-features/desktop/",
	"title": "GitPitch Desktop",
	"tags": [],
	"description": "",
	"content": "  Interested in taking GitPitch Desktop for a test drive? To start your 7 day free trial and see one-time purchase and subscription pricing options visit the GitPitch website here .\n GitPitch Desktop Pro Editon is a markdown presentation tool available on MacOS, Linux, and Windows 10 (Pro + Enterprise). The Desktop supports the following features:\n Develop \u0026#43; Preview Decks Offline  Present Decks Offline  Customize Decks with Theme Builder  Size-Optimize Images with Image Manager  Publish Public \u0026#43; Private Decks Online  Export Slide Decks to PDF  Export Slide Decks to PowerPoint PPTX  Export Slide Deck Workflow Constraints  Export Slide Deck Content Constraints   Develop and Preview Decks Offline The Desktop lets you develop and preview slide content offline using the full set of GitPitch features. All changes to your local presentation files are instantly reflected in a live preview in your browser:\nPresent Decks Offline The Desktop supports a wide range of features tailored specifically to conference speakers and training instructors. Including support for speaker notes, a dedicated speaker window, and support for remote control devices:\nFor further details, see the GitPitch Speaker Guide .\nCustomize Decks with Theme Builder Press the T key on your keyboard when viewing any slide deck to launch the Theme Builder. The builder is an interactive tool for creating custom visual themes for GitPitch slide decks:\nFor further details, see the GitPitch Theme Builder Guide .\nSize-Optimize Images with Image Manager The built-in Desktop image compression tool helps to reduce file size, bandwidth usage, and rendering times for GitPitch slide decks:\nFor further details, see the GitPitch Image Tools Guide .\nPublish Public + Private Decks Online Slide decks developed in GitPitch Desktop can be published to gitpitch.com with a simple git-push. Using public or private repositories on GitHub, GitLab, or Bitbucket.\nFor further details, see the GitPitch Working Online Guide .\nExport Slide Decks to PDF Press the D key on your keyboard when viewing any slide deck inside the Desktop to open the Desktop Document Generator. With one click you can then export your slide deck as a PDF document:\nYour PDF document is a highly portable document that can be shared absolutely anywhere. It can also be published online to LinkedIn SlideShare .\nExport Slide Decks to PowerPoint PPTX Press the D key on your keyboard when viewing any slide deck inside the Desktop to open the Desktop Document Generator. With one click you can then export your slide deck as a PPTX document:\nYour PPTX document is a highly portable document that can be opened directly within Microsoft PowerPoint and Apple Keynote on your desktop.\nThe above screenshot shows a sample GitPitch slide deck open in PowerPoint on the desktop. Your PPTX document can also be published online to Microsoft Office 365 , Apple Keynote iCloud , and Google Slides .\nExport Slide Deck Workflow Constraints In order to deliver pixel-perfect rendering across PowerPoint, Keynote, and Google Slides, all changes to slide content must be made within GitPitch Desktop.\nOnce exported and opened in PowerPoint, Keynote, or Google Slides, slide content generated by GitPitch can not be edited, or otherwise modified. Although new content can be added to slides within these tools. And individual slides can also be deleted within these tools.\nExport Slide Deck Content Constraints While exporting GitPitch slide decks to PDF and PPTX delivers pixel-perfect rendering inside PowerPoint, Keynote, and Google Slides there are a number of limitations on the types of content that can be exported.\nPDF export constraints:\n Video and Asciinema playback is disabled on export. Animated GIFs are exported as a single static image. Speaker notes are disabled on export.  PPTX export constraints:\n Video and Asciinema playback is disabled on export. Animated GIFs are exported as a single static image. Hypertext links are disabled on export. Speaker notes are disabled on export.  While these content types are disabled on export, you can open and edit generated PPTX files within PowerPoint, Keynote, and Google Slides to update your slide deck content if needed. For example, you could add a dedicated slide at the end of your PowerPoint deck that includes active links to related content.\n"
},
{
	"uri": "https://gitpitch.com/docs/work-offline/desktop/",
	"title": "GitPitch Desktop",
	"tags": [],
	"description": "",
	"content": "  Interested in taking GitPitch Desktop for a test drive? To start your 7 day free trial and see one-time purchase and subscription pricing options visit the GitPitch website here .\n GitPitch Desktop Pro Editon is a markdown presentation tool available on MacOS, Linux, and Windows 10 (Pro + Enterprise). The Desktop supports the following features:\n Develop \u0026#43; Preview Decks Offline  Present Decks Offline  Customize Decks with Theme Builder  Size-Optimize Images with Image Manager  Publish Public \u0026#43; Private Decks Online  Export Slide Decks to PDF  Export Slide Decks to PowerPoint PPTX  Export Slide Deck Workflow Constraints  Export Slide Deck Content Constraints   Develop and Preview Decks Offline The Desktop lets you develop and preview slide content offline using the full set of GitPitch features. All changes to your local presentation files are instantly reflected in a live preview in your browser:\nPresent Decks Offline The Desktop supports a wide range of features tailored specifically to conference speakers and training instructors. Including support for speaker notes, a dedicated speaker window, and support for remote control devices:\nFor further details, see the GitPitch Speaker Guide .\nCustomize Decks with Theme Builder Press the T key on your keyboard when viewing any slide deck to launch the Theme Builder. The builder is an interactive tool for creating custom visual themes for GitPitch slide decks:\nFor further details, see the GitPitch Theme Builder Guide .\nSize-Optimize Images with Image Manager The built-in Desktop image compression tool helps to reduce file size, bandwidth usage, and rendering times for GitPitch slide decks:\nFor further details, see the GitPitch Image Tools Guide .\nPublish Public + Private Decks Online Slide decks developed in GitPitch Desktop can be published to gitpitch.com with a simple git-push. Using public or private repositories on GitHub, GitLab, or Bitbucket.\nFor further details, see the GitPitch Working Online Guide .\nExport Slide Decks to PDF Press the D key on your keyboard when viewing any slide deck inside the Desktop to open the Desktop Document Generator. With one click you can then export your slide deck as a PDF document:\nYour PDF document is a highly portable document that can be shared absolutely anywhere. It can also be published online to LinkedIn SlideShare .\nExport Slide Decks to PowerPoint PPTX Press the D key on your keyboard when viewing any slide deck inside the Desktop to open the Desktop Document Generator. With one click you can then export your slide deck as a PPTX document:\nYour PPTX document is a highly portable document that can be opened directly within Microsoft PowerPoint and Apple Keynote on your desktop.\nThe above screenshot shows a sample GitPitch slide deck open in PowerPoint on the desktop. Your PPTX document can also be published online to Microsoft Office 365 , Apple Keynote iCloud , and Google Slides .\nExport Slide Deck Workflow Constraints In order to deliver pixel-perfect rendering across PowerPoint, Keynote, and Google Slides, all changes to slide content must be made within GitPitch Desktop.\nOnce exported and opened in PowerPoint, Keynote, or Google Slides, slide content generated by GitPitch can not be edited, or otherwise modified. Although new content can be added to slides within these tools. And individual slides can also be deleted within these tools.\nExport Slide Deck Content Constraints While exporting GitPitch slide decks to PDF and PPTX delivers pixel-perfect rendering inside PowerPoint, Keynote, and Google Slides there are a number of limitations on the types of content that can be exported.\nPDF export constraints:\n Video and Asciinema playback is disabled on export. Animated GIFs are exported as a single static image. Speaker notes are disabled on export.  PPTX export constraints:\n Video and Asciinema playback is disabled on export. Animated GIFs are exported as a single static image. Hypertext links are disabled on export. Speaker notes are disabled on export.  While these content types are disabled on export, you can open and edit generated PPTX files within PowerPoint, Keynote, and Google Slides to update your slide deck content if needed. For example, you could add a dedicated slide at the end of your PowerPoint deck that includes active links to related content.\n"
},
{
	"uri": "https://gitpitch.com/docs/auxiliary-features/google-analytics/",
	"title": "Google Analytics",
	"tags": [],
	"description": "",
	"content": " As a presentation author you can activate Google Analytics tracking for your slideshow presentations.\nSee the Google Analytics Setting documentation for further details.\n"
},
{
	"uri": "https://gitpitch.com/docs/getting-started/tutorial/",
	"title": "In 60 Seconds",
	"tags": [],
	"description": "",
	"content": " A Very Short Tutorial By far the best way to create, preview, and present a GitPitch markdown presentation is to use GitPitch Desktop . But for a quick introduction to GitPitch without needing to download anything you can work directly with a simple markdown file within any respository on Git.\nSo if you have an account on GitHub, GitLab, or Bitbucket follow along with this very short, hands-on tutorial:\n GitPitch In-60-Seconds for GitHub Users  GitPitch In-60-Seconds for GitLab Users  GitPitch In-60-Seconds for Bitbucket Users   These tutorials demonstrate the basic GitPitch concepts by taking you through the simple process of creating your first GitPitch slide deck. Don\u0026rsquo;t forget to come back here and keep reading once you have completed the tutorial.\nWhen you have completed this short tutorial you will be ready to start creating your own slide decks. And the best way to do that is to use GitPitch Desktop .\n"
},
{
	"uri": "https://gitpitch.com/docs/image-features/inline/",
	"title": "Inline Images",
	"tags": [],
	"description": "",
	"content": " Important! Remember to size-optimize your presentation images for the Web.\n Learn By Example  Inline Local Image Files  Inline External Image Files   Any JPEG, PNG, or GIF image can be displayed inline on any slide using standard Markdown image syntax. For a quick reference on standard Markdown image syntax see the Mastering Markdown Guide .\n SVG support for pixel perfect rendering at any resolution is a Pro image feature .\n Learn By Example This PITCHME.md markdown snippet:\n--- @title[Deployment Architecture] #### SAMBA Deployment Architecture ![SAMBA Deployment](https://onetapbeyond.github.io/resource/img/samba/new-samba-deploy.jpg) Results in the rendering of the following slide:\n Click here to view this slide within a live GitPitch presentation.\n Inline Local Image Files Using PITCHME.md you can display any image file found within your repository. For example, the following markdown syntax demonstrates how to display a local image within a slide:\n![Logo](assets/img/logo.jpg)  Important: Relative paths used for local image files must be relative to the root directory of your Git repository, regardless of where your PITCHME.md file lives within the repository.\n Inline External Image Files Using PITCHME.md you can also display any image file found at an external, absolute URL. For example, the following markdown syntax demonstrates how to display a remote image within a slide:\n## Apache Spark Logo ![Logo](http://spark.apache.org/images/spark-logo-trademark.png)  Important! External images will not be available to your slide deck when you are working or presenting offline.\n Important! Remember to size-optimize your presentation images for the Web.\n"
},
{
	"uri": "https://gitpitch.com/docs/the-template/introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": " The Slide Design Templates guide is a collection of markdown snippets that can be used to quickly create high-utility slide designs within your GitPitch slide decks. Using these templates is simple:\n First activate the Theme Template in the PITCHME.yaml for your slide deck. Then start to copy-and-paste markdowns snippet from this guide into your PITCHME.md . And immediately see the chosen templates come to life within your GitPitch slide deck.  The Slide Design Templates are suggested slide designs only. But when you want to introduce any of these designs into your deck, these templates provide building-blocks to quickly bootstrap that process. Every aspect of these slide markdown snippets including placeholder content and styling that can be customized by you in your PITCHME.md as needed.\nTemplate v Custom Slide Designs Continue reading this guide to explore the full set of supported Slide Design Templates . And when you are ready to move beyond these quickstart templates, and start creating your own custom slide designs, then it\u0026rsquo;s time to see the Snap Layouts Guide .\n"
},
{
	"uri": "https://gitpitch.com/docs/markdown-features/text-manipulation/",
	"title": "Markdown Text",
	"tags": [],
	"description": "",
	"content": " To create a custom theme for your slide deck including custom fonts, colors, sizing, etc. we recommend using the Theme Builder . This guide demonstrates a text-manipulation techniques that target specific blocks of plain-text on any slide.\n Plain Text Basic Example  Plain Text Auto-Color Example  Plain Text Custom-Space Example  Plain Text Custom-Size Example  Plain Text Custom-Space-and-Size Example  Plain Text Custom Color Example  Plain Text Custom Color CSS Example  Plain Text Custom Font Example  Plain Text Custom Transforms Example  List Item Text Customization Example   Plain Text Basic Example The following markdown snippet:\n--- Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Donec odio. Quisque volutpat mattis eros. Nullam malesuada erat ut turpis. Suspendisse urna nibh, viverra non, semper suscipit, posuere a, pede. Renders as follows:\nA single line of plain-text is rendered as a paragraph. If your slide needs to render multiple paragraphs, add an empty line between each paragraph in your PITCHME.md.\nPlain Text Auto-Color Example The following markdown snippet:\n---?color=#0F2862 Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Donec odio. Quisque volutpat mattis eros. Nullam malesuada erat ut turpis. Suspendisse urna nibh, viverra non, semper suscipit, posuere a, pede. Renders as follows:\nIn this example a solid dark background color was set on the slide using a color delimiter . The color of text on the slide was auto-adjusted to ensure the text content remains legible against the custom background.\n Note: Auto-adjusting the color of your text works for solid background colors only. If you are using an image background or a gradient background on a slide then you may need to set an explicit color for your text to ensure that content is legible.\n Plain Text Custom-Space Example The following markdown snippet:\n---?color=#FEA49F @snap[midpoint span-50] Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Donec odio. Quisque volutpat mattis eros. Nullam malesuada erat ut turpis. Suspendisse urna nibh, viverra non, semper suscipit, posuere a, pede. @snapend Renders as follows:\nThis example demonstrates the use of Span Utility Styles to constrain the slide area used to render our sample text. It is worth noting, this same technique can be used to constrain space for content of all types, not just text.\nPlain Text Custom Size Example The following markdown snippet:\n ---?color=#1561AD @snap[midpoint span-50 text-07] Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Donec odio. Quisque volutpat mattis eros. Nullam malesuada erat ut turpis. Suspendisse urna nibh, viverra non, semper suscipit, posuere a, pede. @snapend Renders as follows:\nThis example demonstrates the use of built-in Font-Size Utility Styles to activate a custom font-size for our sample text.\nPlain Text Custom Space and Size Example The following markdown snippet:\n---?color=#09868B @snap[west span-40 text-08] Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Donec odio. Quisque volutpat mattis eros. Nullam malesuada erat ut turpis. Suspendisse urna nibh, viverra non, semper suscipit, posuere a, pede. @snapend Renders as follows:\nThis example demonstrates a combination of built-in Span Utility Styles and Font-Size Utility Styles to constrain the slide area for our text while also activating a custom font-size for that text.\nPlain Text Custom-Color Example The following markdown snippet:\n---?color=#1D1E22 @snap[midpoint span-50 text-pink] Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Donec odio. Quisque volutpat mattis eros. Nullam malesuada erat ut turpis. Suspendisse urna nibh, viverra non, semper suscipit, posuere a, pede. @snapend Renders as follows:\nThis example demonstrates the use of built-in Font-Color Utility Styles to activate a custom font-color for our sample text.\nPlain Text Custom-Color CSS Example The following markdown snippet:\n---?color=#393f4d @snap[midpoint span-50 silver-fox] Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Donec odio. Quisque volutpat mattis eros. Nullam malesuada erat ut turpis. Suspendisse urna nibh, viverra non, semper suscipit, posuere a, pede. @snapend Renders as follows:\nThis example demonstrates the use of Custom CSS Styles to activate a custom font-color for our sample text. In this case, the silver-fox custom CSS style was defined as follows:\n.silver-fox { color: #D4D4DC !important; } Plain Text Custom-Font Example The following markdown snippet:\n---?color=linear-gradient(180deg, white 50%, #005f6b 50%) @snap[north span-100 font-righteous] Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Donec odio. Quisque volutpat mattis eros. Nullam malesuada erat ut turpis. Suspendisse urna nibh, viverra non, semper suscipit, posuere a, pede. @snapend @snap[south span-100 font-montserrat text-white] Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Donec odio. Quisque volutpat mattis eros. Nullam malesuada erat ut turpis. Suspendisse urna nibh, viverra non, semper suscipit, posuere a, pede. @snapend Renders as follows:\nThis example demonstrates the use of built-in Font-Family Utility Styles to activate a custom fonts for our sample text.\n Note: As this example uses a gradient background an explicit text-white property was activated in the south grid-position to ensure the text content is legible.\n Plain Text Custom-Transforms Example The following markdown snippet:\n---?color=#FF3A22 @snap[north span-100 text-smallcaps] Lorem ipsum dolor sit amet @snapend @snap[midpoint span-100 text-italics] Lorem ipsum dolor sit amet @snapend @snap[south span-100 text-uppercase] Lorem ipsum dolor sit amet @snapend Renders as follows:\nThis example demonstrates the use of built-in Text-Transform Utility Styles to activate a custom transforms for our sample text.\nList Item Text Customizations Example List items are another example of plain-text on slides. For example, the following markdown snippet:\n---?color=#1561AD - Lorem ipsum dolor sit amet. - Aliquam tincidunt mauris eu risus. - Vestibulum auctor dapibus neque. - Nunc dignissim risus id metus. - Cras ornare tristique elit. Renders as follows:\nWe can manipulate list item text by activating custom properties using List Widget syntax:\n---?color=#1D1E22 @ul[list-square-bullets list-spaced-bullets font-righteous text-pink](false) - Lorem ipsum dolor sit amet. - Aliquam tincidunt mauris eu risus. - Vestibulum auctor dapibus neque. - Nunc dignissim risus id metus. - Cras ornare tristique elit. @ulend Renders as follows:\nThis example demonstrates the use of built-in List-Style , Font-Family , and Text-Color utility styles to activate a custom styling for our sample list items.\n"
},
{
	"uri": "https://gitpitch.com/docs/promotions/microsoft-mvp/",
	"title": "Microsoft MVP",
	"tags": [],
	"description": "",
	"content": " About This Promotion  GitPitch Pro 1 Year Free Subscription for Microsoft MVPs from July 8, 2018 - July 8, 2019\n The hugely popular GitPitch / Microsoft MVP promotion closed to new applicants on December 31, 2018.\nWhile this promotion has ended for new applicants, GitPitch Pro subscriptions remain available directly on the GitPitch website. For details, click here . Each subscription includes a 7 day free trial. The perfect, risk free way to get hands-on experience with GitPitch.\n"
},
{
	"uri": "https://gitpitch.com/docs/work-online/basics/",
	"title": "Online Basics",
	"tags": [],
	"description": "",
	"content": " The GitPitch service hosted on gitpitch.com seamlessly embraces and extends the traditional distributed version control capabilities offered by the following Git services in the cloud:\n GitHub.com  GitLab.com  Bitbucket.org   GitPitch turns every repository within these cloud services into:\n A version-controlled content management system for presentation content and assets A branch-aware content management system for presentation content and assets A collaborative content management system for presentation content and assets A publishing system for public, private and password-protected presentations  To learn how modular content managed within your Git repositories can be instantly published and shared as a slideshow presentation online, see the next section that describes the magic of GitPitch Slideshow URLS .\n"
},
{
	"uri": "https://gitpitch.com/docs/diagram-features/sketch-whiteboard/",
	"title": "Sketch Whiteboard",
	"tags": [],
	"description": "",
	"content": " The Excalidraw whiteboard lets you quickly sketch any diagram with a hand-drawn feel. Ideal for sharing mockups, wireframes, system diagrams, UI workflows, casual brainstorming, concepts, and more. You can save your sketches as pixel-perfect SVG or PNG for rendering on any slide.\nThe whiteboard is powered by the amazing Excalidraw Sketch Tool and integrated seamlessly for working offline within GitPitch Desktop. For details see the Desktop Whiteboard Guide .\n"
},
{
	"uri": "https://gitpitch.com/docs/speaker-features/notes/",
	"title": "Speaker Notes",
	"tags": [],
	"description": "",
	"content": " GitPitch slideshow presentations support a number of great features tailored specifically for conference speakers and training instructors.\n Speaker Notes  Speaker Notes Fragments  Speaker Notes Preview  Speaker Window  Speaker Remote Control   Speaker Notes Speaker notes give you a way to add private annotations to slides. This feature lets you leave hints, tips, and reminders on specific slides that can help you stay on-track and on-point during a live presentation.\nTo add speaker notes to any slide, simply declare special Note: markers in your PITCHME.md. Directly following these marker you can add the content of the note itself.\nFor example, here is the contents of a sample slide with custom speaker notes:\n--- # GitPitch Pro #### The Markdown Presentation Service on Git  Note: - Offers a wide-range of enhanced presentation **tools** and **features** - Both on the desktop and in the cloud - Learn more on the GitPitch website at https://gitpitch.com  The content of your speaker notes can be a mix of plain text and rich markdown.\n By default, your audience will not see your speaker notes when viewing your presentation. However, when using the speaker notes preview mode the sample slide above would be rendered as follows:\n Speaker notes support is available for all online and offline GitPitch slideshow presentations.\n Speaker Notes Fragments See the List Widget Speaker Mode Fragment Notes documentation to learn how you can add fragment-specific speaker notes.\nSpeaker Notes Preview When developing your own slideshow presentation - or reviewing a presentation created by someone else - you can quickly preview the speaker notes for that presentation by appending an n=true query parameter to the GitPitch URL in your browser.\nFor example, here is a sample slideshow presentation URL where speaker notes preview mode is activated:\nhttps://gitpitch.com/onetapbeyond/gen_metrics?n=true When this n=true query parameter is enabled, any speaker notes associated with specific slides are shown alongside the slide content. As speaker notes are optional, some slides may not display any notes.\n Click here to preview speaker notes in a live GitPitch presentation.\n "
},
{
	"uri": "https://gitpitch.com/docs/themes/default/",
	"title": "The Theme Builder",
	"tags": [],
	"description": "",
	"content": " The Theme Builder is an interactive tool for creating custom visual themes for GitPitch slide decks. The theme builder is accessed directly within GitPitch Desktop . To launch the theme builder, open any slide deck and press the \u0026ldquo;T\u0026rdquo; key or click on the theme-paletteicon.\n  The theme builder provides simple, fast, custom styling for the following deck components:\n Deck Color Scheme  Slide Background  Headline Text ( H1, H2 )  Byline Text ( H3, H4 )  Plain Text  Source Code  General Settings  Export \u0026#43; Share Theme Settings   All theme builder customizations apply to content across every slide in your deck. See the theme-builder setting for additional Theme Builder controls.\nDeck Color Scheme By default, GitPitch slide decks inherit a simple color scheme out-of-the-box. Using the theme builder Quickstart feature you can activate a brand new color scheme for your deck with just one click.\nGitPitch includes 16 attractive themes that are designed to work for any audience, whether it\u0026rsquo;s a tech conference, meetup, or training course. You can further customize any aspect of these quickstart themes using the theme customization features that follow.\nSlide Background The theme builder offers the following customizations for the slide background in your deck:\n Custom slide background color An optional custom slide background image Slide background image opacity, positioning, and sizing controls  Note, the theme builder automatically detects all images in your working directory and presents those image files for selection under the Image drop-down on this panel.\nHeadline Text ( H1, H2 ) The theme builder offers the following customizations for headline text appearing on slides within your deck:\n Custom font family for headline text Custom color for headline text Custom emphasis color for headline bold and italics Custom scale, line height, and padding for headline text  Note, padding refers to the vertical space injected below headline text on the slide. This property can be used to control spacing between headline text and any content that immediately follows on your slide.\nByline Text ( H3, H4 ) The theme builder offers the following customizations for byline text appearing on slides within your deck:\n Custom font family for byline text Custom color for byline text Custom emphasis color for byline bold and italics Custom scale, line height, and padding for byline text  Note, padding refers to the vertical space injected below byline text on the slide. This property can be used to control spacing between byline text and any content that immediately follows on your slide.\nPlain Text The theme builder offers the following customizations for plain text text appearing on slides within your deck:\n Custom font family for plain text Custom color for plain text Custom emphasis color for plain text bold and italics Custom scale, line height, and padding for plain text  Note, padding refers to the vertical space injected below plain text on the slide. This property can be used to control spacing between plain text and any content that immediately follows on your slide.\nSource Code The theme builder offers the following customizations for source code blocks appearing on slides within your deck:\n Custom syntax highlighting style for source code blocks Custom monospaced font family for source code blocks Custom scale and line height for source code blocks  Note, the source code scale and line height settings can be overridden using the built-in Code ZOOM properties on individual code blocks on any slide.\nGeneral Settings The theme builder offers the following general customizations for your slide deck:\n Custom auto-layout policy for slide content Custom logo image and logo positioning Custom color for hyperlinks on your slides Custom color for deck navigation and menu icons  Important, the auto-layout policy has no effect on markdown content under the layout control of Snap Layouts .\nNote, the theme builder automatically detects all images in your working directory and presents those image files for selection under the Logo Image drop-down on this panel.\nExport + Share Theme Settings The theme builder manipulates properites associated with the theme template directly within the PITCHME.yaml for your slide deck.\nThe settings generated by the builder are always appended to your PITCHME.yaml file. Clearly delimited within a pair of builder-specific start and end tags. By appending to the file, builder settings override any previously declared setting values in the file.\nTo make builder settings permanent within your PITCHME.yaml file simply delete the builder-specific start and end tags surrounding these settings.\nTo export the full set of settings for your current custom theme, click the Export link in the builder. Exported theme settings can be shared across projects or an entire organization. Sharing theme settings in this way can be used to guarantee a consistent style and brand for slide decks across projects and teams.\n"
},
{
	"uri": "https://gitpitch.com/docs/settings/theme/",
	"title": "Theme Setting",
	"tags": [],
	"description": "",
	"content": " Purpose The theme setting lets you select a fixed theme for your presentation.\nSample Syntax theme : template Details  Slideshow settings are activated using a PITCHME.yaml properties file.\n The default GitPitch theme is the template theme.\nThe old themes originally inherited from the Reveal.js project have been deprecated. A full deprecation notice can be found here . While deprecated, these themes remain to provide backward compatibility for presentations created before June, 2019.\n If you do not explicitly set a value for the theme setting your slideshow will automatically be rendered using the default theme - the template theme.\n See custom theme setting for details on how you can override any style associated with your chosen theme.\n"
},
{
	"uri": "https://gitpitch.com/docs/image-features/image-manipulation/",
	"title": "Inline Image Manipulation",
	"tags": [],
	"description": "",
	"content": "  Activate a GitPitch Paid Plan to unlock Inline Image Manipulation support.\n This guide introduces powerful image-manipulation techniques that can be applied to inline images on any slide.\n Image Sizing  Image Opacity  Image Filters  Image 2D Transformations  Image 3D Transformations  Image Fragment Behaviour  Image Custom Styles  Image Alt Text  Image Title Text      For even more image manipulation features see the Background Images Guide .\n Image Sizing You can control the width and height of any inline image using the width and height directives. These directives accept pixel values only. Specifying the px unit identifier on the value is optional.\nThe following markdown snippet demonstrates valid uses of these directives:\n![width=800](assets/img/yoda.jpg) --- ![height=250px](assets/img/chewbacca.png) --- ![width=500, height=400](assets/img/hansolo.gif)  Note, use comma-separated values to set multiple directives on an image.\n If only width or only height is specified the other dimension is automatically scaled to preserve the original aspect ratio of the image.\nImage Opacity You can control the opacity of any inline image using the opacity directive. This directive accepts any value greater than 0.0 and less than or equal to 1.0. The lower the value the more transparent your image.\nThe following markdown snippet demonstrates valid uses of this directive:\n![opacity=0.3](assets/img/yoda.jpg) --- ![width=400, opacity=0.75](assets/img/chewbacca.png) --- ![opacity=0.5](assets/img/hansolo.gif)  Note, use comma-separated values to set multiple directives on an image.\n Image Filters You can activate visual-effect filters on any inline image using the filter directive. This directive currently supports the following filter values:\n Blur Bright Contrast Grayscale Hue Invert Saturate Sepia  The following markdown snippet demonstrates valid uses of the image filter directive:\n![filter=blur](assets/img/yoda.jpg) --- ![width=250, filter=grayscale](assets/img/chewbacca.png) --- ![height=400, filter=sepia](assets/img/hansolo.gif)  Note, use comma-separated values to set multiple directives on an image.\n Image 2D Transformations You can control the 2D rotation of any inline image using the rotate directive. This directive accepts any positive or negative angle value between 0 and 360 degrees. Specifying the deg unit identifier on the value is optional.\nThe following markdown snippet demonstrates valid uses of the image rotate directive:\n![rotate=45](assets/img/yoda.jpg) --- ![width=400, filter=sepia, rotate=-60deg](assets/img/chewbacca.png) --- ![opacity=0.6, rotate=230](assets/img/hansolo.gif)  Note, use comma-separated values to set multiple directives on an image.\n Image 3D Transformations You can control the 3D rotation of any inline image on the x-axis and y-axis using the skewx and skewy directives. These directives accept any positive or negative angle value between 0 and 360 degrees. Specifying the deg unit identifier on the value is optional.\nThe following markdown snippet demonstrates valid uses of the image skew directives:\n![skewx=-15](assets/img/yoda.jpg) --- ![width=300, height=300, skewy=40deg](assets/img/chewbacca.png) --- ![filter=saturate, skewx=20, skewy=-35](assets/img/hansolo.gif)  Note, use comma-separated values to set multiple directives on an image.\n Image Fragment Behavior You can activate markdown fragment behavior on any inline image using the fragment property. The following markdown snippet demonstrates valid uses of the image fragment property:\n![fragment](assets/img/yoda.jpg) --- ![skewy=40deg, fragment](assets/img/chewbacca.png) --- ![width=500, filter=grayscale, fragment](assets/img/hansolo.gif)  Note, use comma-separated values to set multiple directives on an image.\n Image Custom Styles You can activate one or more Custom CSS Styles on any inline image by specifying your custom style names as properties. For example, assuming you have defined custom-shadow and custom-border styles the following markdown snippet demonstrates valid uses of those styles:\n![custom-shadow](assets/img/yoda.jpg) --- ![skewy=40deg, custom-border fragment](assets/img/chewbacca.png) --- ![filter=grayscale, custom-shadow custom-border](assets/img/hansolo.gif)  Note, use comma-separated values to set multiple directives and use space-separated values to set multiple properties on an image.\n Image Alt Text By default, descriptive text used within standard markdown image syntax ![text](path) is set as alt text for the image. The benefits of using alt text on your images are as follows:\n Alt text is first and foremost a principle of web accessibility. Visually impaired users using screen readers can read alt text to better understand an on-slide image. Alt text is displayed in place of an image if an image file cannot be loaded. Alt text provides better image context to search engines helping them with indexing.  Alt text can also be set alongside image directives or properties using the alt directive. The following markdown snippets demonstrate different ways to set alt text on images:\n![A cute image of Yoda](assets/img/yoda.jpg) --- ![rotate=35, alt=Image of Baby Yoda Smiling](assets/img/baby-yoda.jpg) --- ![filter=contrast, alt=Image of Death Star Implosion, fragment](assets/img/death-star.gif) Image Title Text To set image title text alongside image directives or properties you can use the title directive. The following markdown snippets demonstrate different way to set title text on images:\n![title=YODA](assets/img/yoda.jpg) --- ![rotate=35, title=Baby Yoda!](assets/img/baby-yoda.jpg) --- ![filter=contrast, title=Star Wars, fragment](assets/img/death-star.gif)  Note, use comma-separated values to set multiple directives on an image.\n "
},
{
	"uri": "https://gitpitch.com/docs/auxiliary-features/table-of-contents/",
	"title": "Auto-Generated TOC",
	"tags": [],
	"description": "",
	"content": " GitPitch automatically generates a table-of-contents for every slideshow presentation. You can access the table-of-contents within the slideshow menu found in the bottom-left corner of any slideshow.\nThe table-of-contents can be used to browse slideshow content. It can also be used as a means of fast navigation to any slide within a presentation.\nAs a presentation author, if you update your presentation content in PITCHME.md, GitPitch will automatically update the table-of-contents for you.\nCustomizing Table-of-Contents The default label generated for each entry in your table-of-contents is automatically derived based on the content found on each slide. Sometimes that auto-generated label may not be exactly what you want.\nAs a presentation author you can override the label with custom labels on any slide. To inject a custom label for any slide add the following @title shortcut syntax within your PITCHME.md:\n--- @title[Some custom label] ## Your slide contents goes here. You can add custom labels for none, some, or all slides in your presentation. If no custom label is found, GitPitch will attempt to auto-generate a suitable label. If no such suitable label can be generated, the entry in the table-of-contents will simply identify the slide number.\n"
},
{
	"uri": "https://gitpitch.com/docs/image-features/background/",
	"title": "Background Images",
	"tags": [],
	"description": "",
	"content": " Important! Remember to size-optimize your presentation images for the Web.\n Learn By Example  Image Delimiter Syntax - Local Image Files  Image Delimiter Syntax - External Image Files  Image Delimiter Syntax - Power Features   Basic slide delimiter syntax allows markdown content to be split into a series of slides. Special image delimiter syntax allows overriding the basic delimiter semantics in order to display any JPEG, PNG, or GIF image as a background image on specific slides.\nA well chosen background image can dramatically enhance the visual appearance and effectiveness of any slide within a presentation:\nSVG background image support - for pixel perfect rendering at any resolution - is available as a Pro image feature .\nLearn By Example This PITCHME.md markdown snippet:\n---?image=assets/img/stormtroopers.jpg ### No apologies needed. ### Just Markdown Image Magic. Results in the rendering of the following slide:\nImage Delimiter Syntax - Local Image Files Your PITCHME.md file can display any background image found within your repository. For example, the following syntax demonstrates how to display a local background image for a slide:\n---?image=assets/img/bg.jpg  Important: Relative paths used for local image files must be relative to the root directory of your Git repository, regardless of where your PITCHME.md file lives within the repository.\n Image Delimiter Syntax - External Image Files Your PITCHME.md file can also display any background image found at an external, absolute URL. For example, the following markdown syntax demonstrates how to display a remote background image within a slide:\n---?image=http://spark.apache.org/docs/latest/img/cluster-overview.png  Important! External images will not be available to your slide deck when you are working or presenting offline.\n Image Delimiter Syntax - Power Features Image delimiter syntax supports optional parameters than can be used to customize the rendering of background images on slides.\nThese optional parameters give you fine-grained control over how background images are rendered within your presentations. Here are some quick links to the relevant sections in the documentation:\n Image Delimiter Background Scaling  Image Delimiter Background Positioning  Image Delimiter Background Colors  Image Delimiter Background Repeat  Image Delimiter Background Opacity  Image Delimiter Background Animations   Important! Remember to size-optimize your presentation images for the Web.\n"
},
{
	"uri": "https://gitpitch.com/docs/diagram-features/cloud-diagrams/",
	"title": "Cloud Diagram Widget",
	"tags": [],
	"description": "",
	"content": "  Activate a GitPitch Paid Plan to unlock Cloud Diagram Widget support.\n This guide describes the @cloud widget. This widget is a simple markdown syntax that can be used to create and render sophisticated cloud system architecture diagrams powered by Diagrams-As-Code on any slide.\n Cloud Widget Usage Conventions  Cloud Diagrams Image Manipulations  Learn By Example - AWS Event Processing  More Examples in the Diagrams-As-Code Docs    Click here to experience Cloud Diagrams live in a sample GitPitch slide deck.\n Cloud Widget Usage Conventions Each cloud system archtecture diagram is defined using simple Python syntax within a dedicated source code file. The exact syntax is defined by the Diagrams As Code project.\nThe following GitPitch conventions are required to use the @cloud widget:\n Diagram descriptions must be defined in a file within your local repository. Diagram description files must have a .py extension. Diagram descriptions must adhere to valid Diagrams As Code syntax.  If you follow these conventions you can then use the following @cloud widget markdown syntax to render a cloud system architecture diagram on any slide:\n@cloud[props, style...](path/to/code.py) The props value accepts a comma-separated list of valid image manipulation properties . The CSS style\u0026hellip; list can be used to activate custom styles or build-in styles on the rendered image.\nCloud Diagrams Image Manipulations The full set of GitPitch supported inline image manipulation properties can be activated on your Cloud diagrams. For example, the following markdown snippet:\n@snap[west span-50 text-center] @cloud[width=500](src/cloud/demo.py) @snapend @snap[east span-50 text-center] @cloud[width=300, skewx=-30, skewy=15, filter=invert](src/cloud/demo.py) @snapend Results in the rendering of the following slide:\nThese manipulations include image sizing, opacity controls, filters, transformations, behaviors, and more. For details see the Inline Image Manipulations Guide .\nLearn By Example - AWS Event Processing This Python code defines a sample AWS Event Processing architecture:\nfrom diagrams import Cluster, Diagram from diagrams.aws.compute import ECS, EKS, Lambda from diagrams.aws.database import Redshift from diagrams.aws.integration import SQS from diagrams.aws.storage import S3 with Diagram(\u0026#34;Event Processing\u0026#34;, show=False): source = EKS(\u0026#34;k8s source\u0026#34;) with Cluster(\u0026#34;Event Flows\u0026#34;): with Cluster(\u0026#34;Event Workers\u0026#34;): workers = [ECS(\u0026#34;worker1\u0026#34;), ECS(\u0026#34;worker2\u0026#34;), ECS(\u0026#34;worker3\u0026#34;)] queue = SQS(\u0026#34;event queue\u0026#34;) with Cluster(\u0026#34;Processing\u0026#34;): handlers = [Lambda(\u0026#34;proc1\u0026#34;), Lambda(\u0026#34;proc2\u0026#34;), Lambda(\u0026#34;proc3\u0026#34;)] store = S3(\u0026#34;events store\u0026#34;) dw = Redshift(\u0026#34;analytics\u0026#34;) source \u0026gt;\u0026gt; workers \u0026gt;\u0026gt; queue \u0026gt;\u0026gt; handlers handlers \u0026gt;\u0026gt; store handlers \u0026gt;\u0026gt; dw Assuming this sample Python code block is defined within src/aws-event-processing.py it can be used by the @cloud widget within your PITCHME.md markdown as follows:\n--- @snap[west span-70] @cloud[shadow](src/aws-event-processing.py) @snapend @snap[east span-25 text-center] #### **AWS** Event Processing @snapend Results in the rendering of the following slide:\n Click here to view this slide with a live GitPitch presentation.\n More Examples in the Diagrams-As-Code Docs The @cloud widget renders cloud system architecture diagrams as pixel-perfect SVG images. The rendering engine has built-in support for a wide range of cloud components. You can learn further details and see numerous examples of each diagram type in the official Diagrams-As-Code guides:\n Diagrams Intro Guide  OnPrem Guide  AWS Guide  Azure Guide  GCP Guide  K8S Guide  AlibabaCloud Guide  OCI Guide  Programming Guide  Firebase Guide  Saas Guide  Elastic Guide   "
},
{
	"uri": "https://gitpitch.com/docs/settings/custom-theme/",
	"title": "Custom Theme Setting",
	"tags": [],
	"description": "",
	"content": " Purpose The theme-override setting lets you override the CSS styles associated with the fixed theme for your presentation.\nSample Syntax theme-override : assets/css/PITCHME.css Details  Slideshow settings are activated using a PITCHME.yaml properties file.\n This feature allows you to customize the look-and-feel of any slideshow. This is especially useful if you want to customize your presentation to reflect your product, service, conference, or company brand.\nUse the theme-override setting as follows:\n Create a new custom CSS stylesheet in your repository. Add custom CSS rules that override the fixed slideshow theme. Set the theme-override property to point at your stylesheet.   Tip! Learn how to customize styles on your slides faster using a Web Inspector .\n Activating a Global Custom Theme for your Organization The theme-override property also supports absolute URL paths. This feature can be useful for any organization wanting to share a standardized look-and-feel for sets of related presentations.\nSample Custom Theme By default, most themes render inline images with a border and box-shadow. You could use the following custom CSS stylesheet to override the default style in order to remove image borders and box-shadow for your slideshow:\n.reveal section img { border: 0; box-shadow: none; } Assuming that CSS stylesheet lived in the assets/css/PITCHME.css directory within your repository, you could active this custom theme override for your presentation as follows:\ntheme-override : assets/css/PITCHME.css "
},
{
	"uri": "https://gitpitch.com/docs/enterprise/features/",
	"title": "Enterprise Features",
	"tags": [],
	"description": "",
	"content": " Features GitPitch Enterprise delivers a modified version of the production software used on gitpitch.com . Please note the following feature differences exist between the gitpitch.com server and the GitPitch Enterprise server:\nPublishing via Private Repos The GitPitch Enterprise server can be used to publish slideshow presentations from both public and private repositories managed by your self-hosted Git servers. However, the stealth and confidential mode publishing features on gitpitch.com are not supported by the GitPitch Enterprise server.\n"
},
{
	"uri": "https://gitpitch.com/docs/rich-media-features/font-awesome/",
	"title": "Font Awesome 5 Icons",
	"tags": [],
	"description": "",
	"content": " GitPitch provides a PITCHME.md markdown shortcut syntax that can be used to render Font Awesome 5 Solid, Regular \u0026#43; Brand Icons . This features gives GitPitch presentation authors the use of up to 2000 beautifully rendered icons for use within any slideshow.\n Due to license restrictions, Font Awesome 5 Pro Icons are not available for use on GitPitch slides.\n  FA5 Solid Icons Basic Syntax  FA5 Solid Icons Basic Syntax With Label  FA5 Brand Icons Basic Syntax  FA5 Brand Icons Basic Syntax With Label  FA5 Regular Icons Basic Syntax  FA5 Regular Icons Basic Syntax With Label  Font Awesome Icon Sizing  Font Awesome Icon Rotations  Font Awesome Icon Animations  Font Awesome Custom Styles  Font Awesome 4 Backwards Compatibility    Click here to experience Font Awesome icons in a live GitPitch presentation.\n FA5 Solid Icons Basic Syntax The solid icon markdown shortcut syntax is as follows:\n@fa[solid-icon-name] Where solid-icon-name identifies any of the over 1500 solid icons listed in the FA5 Solid Icons Gallery .\nFor example, to render the fa-code-branch icon on a slide use the following syntax:\n@fa[code-branch] FA5 Solid Icons Basic Syntax with Label You can also associate a text label alongside any solid icon using the following syntax:\n@fa[thumbs-up](Sounds good to me!) FA5 Brand Icons Basic Syntax The brand icon markdown shortcut syntax is as follows:\n@fab[brand-icon-name] Where brand-icon-name identifies any of the over 400 brand icons listed in the FA5 Brand Icons Gallery .\nFor example, to render the fa-docker icon on a slide use the following syntax:\n@fab[docker] FA5 Brand Icons Basic Syntax with Label You can also associate a text label alongside any icon using the following syntax:\n@fab[digital-ocean text-bold](Digital Ocean) Note the use of text-bold in this example. It\u0026rsquo;s a built-in CSS utility style . You can learn more about activating custom CSS styles on Font Awesome icons here .\nFA5 Regular Icons Basic Syntax The regular icon markdown shortcut syntax is as follows:\n@far[regular-icon-name] Where regular-icon-name identifies any of the over 100 regular icons listed in the FA5 Regular Icons Gallery .\nFor example, to render the fa-building icon on a slide use the following syntax:\n@far[building] FA5 Regular Icons Basic Syntax with Label You can also associate a text label alongside any icon using the following syntax:\n@far[address-book text-pink](Contact Info) Note the use of text-text in this example. It\u0026rsquo;s a built-in CSS utility style . You can learn more about activating custom CSS styles on Font Awesome icons here .\nFont Awesome Icon Sizing You can easily control the size of any icon on your GitPitch slides:\n@fa[umbrella fa-xxx] Here fa-xxx can take any of the following values for progressively larger icons:\n fa-xs fa-sm fa-lg fa-2x fa-3x fa-4x fa-5x fa-7x fa-10x   Font Awesome icon sizing can be used with solid and brand icons.\n Font Awesome Icon Rotations You can rotate, flip, or mirror an icon on your GitPitch slides:\n@fa[snowman fa-xxx] Here fa-xxx can take any of the following rotation values:\n fa-rotate-90 fa-rotate-180 fa-rotate-270 fa-flip-horizontal fa-flip-vertical fa-flip-both   Font Awesome icon rotations can be used with solid and brand icons.\n Font Awesome Icon Animations You can spin or pulse (rotate-in-8-steps) any icon on your GitPitch slides:\n@fa[spinner fa-xxx] Here fa-xxx can take any of the following animation values:\n fa-spin fa-pulse   Font Awesome icon animations are best used with the set of Font Awesome 5 Spinner Icons .\n Font Awesome Custom Styles Beyond the use of icon labels, sizing, and animations you can also create your own custom CSS styling rules and activate those styles for any icon.\nFor example, to activate a custom color for an icon on your slide use the following CSS snippet:\n.shocking-pink { color : #fc0fc0; } Then apply this color to the Font Awesome icon on your slide by using your your custom CSS class as follows:\n@fa[puzzle-piece fa-spin shocking-pink] The resultant icon will be rendered using the color identified by your .shocking-pink class. In this example, the icon will also automatically rotate thanks to the use of the fa-spin animation class.\n Font Awesome custom styles can be used with solid and brand icons.\n Font Awesome 4 Backwards Compatibility Older GitPitch presentations may reference Font Awesome 4 icon names. Every effort has been made to provide seamless backward compatibility for these presentations. In most cases, no changes are required.\nHowever, if you find older icons are no longer rendering on your slides, please update your PITCHME.md to use the latest shortcut syntax and Font Awesome 5 icon names as detailed in this guide.\n"
},
{
	"uri": "https://gitpitch.com/docs/ci/intro/",
	"title": "GitPitch CI Intro",
	"tags": [],
	"description": "",
	"content": " Introduction GitPitch CI is delivered as a Docker image. This image can be used as an executor within your CI/CD pipeline to generate PDF, PPTX, and/or JPG screenshots for slide decks found in any Git repository.\nLike any CI/CD pipeline job, GitPitch CI can be launched in response to typical events such as a commit, tag, or release on target branches and repositories.\nThe steps to activate GitPitch CI within your pipeline are dependent on your CI/CD provider. The following providers are currently supported:\n CircleCI  GitHub Actions   Follow a link above to find provider specific lauch instructions.\n"
},
{
	"uri": "https://gitpitch.com/docs/pro-features/desktop-launch/",
	"title": "GitPitch Desktop Launch",
	"tags": [],
	"description": "",
	"content": "  Interested in taking GitPitch Desktop for a test drive? To start your 7 day free trial and see one-time purchase and subscription pricing options visit the GitPitch website here .\n The Desktop launch instructions in this guide assume you have completed the following:\n You have activated a GitPitch Free Trial or Paid Plan . You have Docker Desktop installed. You have downloaded \u0026#43; installed GitPitch Desktop .  Having these prerequisites in place you have two launch options:\n Launch using Docker Run  Quick Launch using a Bash Alias  Launch using Docker Compose   Launch using Docker Run When you launch the Desktop using the docker run command you need to indicate a local working directory where your presentation files (markdown, images, etc) can be found. The Desktop then monitors this directory on your local file system for changes. When file changes are detected the desktop will automatically update the live preview of your slide deck in the browser.\nThe default launch command for the Desktop is as follows:\ndocker run -it -v {LOCALWORKINGDIR}:/repo -p 9000:9000 gitpitch/desktop:pro Note, {LOCALWORKINGDIR} is a placeholder. You must replace it with an absolute path to a working directory on your local file system where your presentation files are found.\n The {LOCALWORKINGDIR} is often the root directory of a local Git repository. But the directory does not have to be a Git repository. A regular directory on your local file system can be used.\n For example, here is a sample launch command on MacOS:\ndocker run -it -v /Users/david/test:/repo -p 9000:9000 gitpitch/desktop:pro And here is a sample launch command on Windows:\ndocker run -it -v c:/david/test:/repo -p 9000:9000 gitpitch/desktop:pro Upon successful launch you should be able to access the Desktop in your browser at the following URL:\nhttp://localhost:9000 To open your browser at the default Desktop URL right now, click http://localhost:9000 .\nQuick Launch using a Bash Alias By far the simplest way to launch the Desktop is to use a simple bash alias . Here is the bash alias that I have defined in my own ~/.bashrc file:\nalias gpd=\u0026#39;docker run -it -v $PWD:/repo -p 9000:9000 gitpitch/desktop:pro\u0026#39; In this example the gpd alias name stands for GitPitchDesktop. But you can name your alias anything you find easy to remember and simple to type. Once this alias is activated in your shell environment (source ~/.bashrc) you can launch the Desktop in two simple steps:\n Move into the local working directory where your presentation files are found. Execute your custom bash alias to launch the Desktop  For example:\n$ cd {LOCALWORKINGDIR} $ gpd [info] c.g.s.DesktopService - GitPitch Desktop Pro Edition started. [info] c.g.s.RefreshService - SWEEP directory watcher detected 10 files in 11 ms. [info] c.g.s.RefreshService - SWEEP directory watcher using default interval 250 ms. [info] c.g.s.DesktopService - EXPORT ( PDF / PPTX ) service is enabled. [info] play.api.Play - Application started (Prod) [info] p.c.s.NettyServer - Listening for HTTP on /0.0.0.0:9000 Note, {LOCALWORKINGDIR} is a placeholder. You must replace it with an absolute path to a working directory on your local file system where your presentation files are found.\n The {LOCALWORKINGDIR} is often the root directory of a local Git repository. But the directory does not have to be a Git repository. A regular directory on your local file system can be used.\n Upon successful launch you should be able to access the Desktop in your browser at the following URL:\nhttp://localhost:9000 To open your browser at the default Desktop URL right now, click http://localhost:9000 .\nLaunch using Docker Compose You can use the docker-compose command as a convenient alternative to docker run . To use Compose you first need to copy and save the following service description into a file on your local disk:\nversion: '3' services: gitpitch: image: gitpitch/desktop:pro volumes: - .:/repo ports: - \u0026quot;9000:9000\u0026quot; environment: - PORT=9000 Following Docker conventions, we recommend saving this service description into a file called docker-compose.yaml.\nNow to launch the Desktop copy this file into the local working directory where your presentation files (markdown, images, etc) can be found. Then within that directory, use the following launch command:\ndocker-compose up Upon successful launch you should be able to access the Desktop in your browser at the following URL:\nhttp://localhost:9000 To open your browser at the default Desktop URL right now, click http://localhost:9000 .\nTip! Using Docker Compose Custom YAML Naming As noted above the Docker Compose convention looks for a file named docker-compose.yaml to start a container service. If you prefer to use a custom file name when launching the Desktop you can do so.\nFor example, if you copied and saved the Desktop service description into a file called gitpitch-launch.yaml you would use it as follows:\ndocker-compose -f gitpitch-launch.yaml up "
},
{
	"uri": "https://gitpitch.com/docs/work-offline/desktop-launch/",
	"title": "GitPitch Desktop Launch",
	"tags": [],
	"description": "",
	"content": "  Interested in taking GitPitch Desktop for a test drive? To start your 7 day free trial and see one-time purchase and subscription pricing options visit the GitPitch website here .\n The Desktop launch instructions in this guide assume you have completed the following:\n You have activated a GitPitch Free Trial or Paid Plan . You have Docker Desktop installed. You have downloaded \u0026#43; installed GitPitch Desktop .  Having these prerequisites in place you have two launch options:\n Launch using Docker Run  Quick Launch using a Bash Alias  Launch using Docker Compose   Launch using Docker Run When you launch the Desktop using the docker run command you need to indicate a local working directory where your presentation files (markdown, images, etc) can be found. The Desktop then monitors this directory on your local file system for changes. When file changes are detected the desktop will automatically update the live preview of your slide deck in the browser.\nThe default launch command for the Desktop is as follows:\ndocker run -it -v {LOCALWORKINGDIR}:/repo -p 9000:9000 gitpitch/desktop:pro Note, {LOCALWORKINGDIR} is a placeholder. You must replace it with an absolute path to a working directory on your local file system where your presentation files are found.\n The {LOCALWORKINGDIR} is often the root directory of a local Git repository. But the directory does not have to be a Git repository. A regular directory on your local file system can be used.\n For example, here is a sample launch command on MacOS:\ndocker run -it -v /Users/david/test:/repo -p 9000:9000 gitpitch/desktop:pro And here is a sample launch command on Windows:\ndocker run -it -v c:/david/test:/repo -p 9000:9000 gitpitch/desktop:pro Upon successful launch you should be able to access the Desktop in your browser at the following URL:\nhttp://localhost:9000 To open your browser at the default Desktop URL right now, click http://localhost:9000 .\nQuick Launch using a Bash Alias By far the simplest way to launch the Desktop is to use a simple bash alias . Here is the bash alias that I have defined in my own ~/.bashrc file:\nalias gpd=\u0026#39;docker run -it -v $PWD:/repo -p 9000:9000 gitpitch/desktop:pro\u0026#39; In this example the gpd alias name stands for GitPitchDesktop. But you can name your alias anything you find easy to remember and simple to type. Once this alias is activated in your shell environment (source ~/.bashrc) you can launch the Desktop in two simple steps:\n Move into the local working directory where your presentation files are found. Execute your custom bash alias to launch the Desktop  For example:\n$ cd {LOCALWORKINGDIR} $ gpd [info] c.g.s.DesktopService - GitPitch Desktop Pro Edition started. [info] c.g.s.RefreshService - SWEEP directory watcher detected 10 files in 11 ms. [info] c.g.s.RefreshService - SWEEP directory watcher using default interval 250 ms. [info] c.g.s.DesktopService - EXPORT ( PDF / PPTX ) service is enabled. [info] play.api.Play - Application started (Prod) [info] p.c.s.NettyServer - Listening for HTTP on /0.0.0.0:9000 Note, {LOCALWORKINGDIR} is a placeholder. You must replace it with an absolute path to a working directory on your local file system where your presentation files are found.\n The {LOCALWORKINGDIR} is often the root directory of a local Git repository. But the directory does not have to be a Git repository. A regular directory on your local file system can be used.\n Upon successful launch you should be able to access the Desktop in your browser at the following URL:\nhttp://localhost:9000 To open your browser at the default Desktop URL right now, click http://localhost:9000 .\nLaunch using Docker Compose You can use the docker-compose command as a convenient alternative to docker run . To use Compose you first need to copy and save the following service description into a file on your local disk:\nversion: '3' services: gitpitch: image: gitpitch/desktop:pro volumes: - .:/repo ports: - \u0026quot;9000:9000\u0026quot; environment: - PORT=9000 Following Docker conventions, we recommend saving this service description into a file called docker-compose.yaml.\nNow to launch the Desktop copy this file into the local working directory where your presentation files (markdown, images, etc) can be found. Then within that directory, use the following launch command:\ndocker-compose up Upon successful launch you should be able to access the Desktop in your browser at the following URL:\nhttp://localhost:9000 To open your browser at the default Desktop URL right now, click http://localhost:9000 .\nTip! Using Docker Compose Custom YAML Naming As noted above the Docker Compose convention looks for a file named docker-compose.yaml to start a container service. If you prefer to use a custom file name when launching the Desktop you can do so.\nFor example, if you copied and saved the Desktop service description into a file called gitpitch-launch.yaml you would use it as follows:\ndocker-compose -f gitpitch-launch.yaml up "
},
{
	"uri": "https://gitpitch.com/docs/getting-started/pitchme/",
	"title": "PITCHME.md",
	"tags": [],
	"description": "",
	"content": " The README.md Convention If you have ever worked with Git - on GitHub, GitLab, or Bitbucket - you are probably already familiar with the README.md convention. This convention automatically turns any README.md file found within a Git repository into nicely rendered documentation.\nThis convention gives developers a simple and convenient way to document any project.\nThe PITCHME.md Convention GitPitch introduces a brand new convention for all Git users, the PITCHME.md convention. This convention automatically turns any PITCHME.md file found within a Git repository (or local working directory) into a modern slideshow presentation.\nThis convention gives developers a simple and powerful way to promote, pitch or present absolutely anything.\n"
},
{
	"uri": "https://gitpitch.com/docs/the-template/slide-designs/",
	"title": "Slide Design Categories",
	"tags": [],
	"description": "",
	"content": " The Slide Design Templates have been grouped into related categories. This approach can help you more easily discover the perfect slide design templates for your next slide deck.\n Solid Background Slide Designs  Gradient Background Slide Designs  Horizontal Background Slide Designs  Vertical Background Slide Designs  Angled Background Slide Designs  Unordered List Slide Designs  Ordered List Slide Designs   Tip! Background Slide Design Templates If you find a background slide design that you would like to set as the base design for every slide in your deck, you can activate the design globally using the Theme Template Background Property .\n"
},
{
	"uri": "https://gitpitch.com/docs/work-online/urls/",
	"title": "Slideshow URLs",
	"tags": [],
	"description": "",
	"content": " Thanks to the PITCHME.md Convention , anyone with an account on GitHub, GitLab, or Bitbucket can publish and share slideshow presentations directly from within public and private Git repositories. This guide describes how you can create a GitPitch URL for your slideshow presentations maintained under the following services:\n GitHub Slideshow URLs  GitLab Slideshow URLs  Bitbucket Slideshow URLs  Advanced Slideshow URLs    By default, GitPitch treats GitHub as the default git repository service a.k.a. GRS. If you want to view or share a slideshow URL for a presentation published from a GitLab or Bitbucket repository you need to indicate the GRS on the slideshow URL as explained in the following sections.\n GitHub Slideshow URLs (Default) A slideshow URL for a presentation published on GitHub is defined as follows:\n Substitute your Git account name, repository, and branch for $user, $repo, and $branch respectively. Note, Git account names are case-sensitive.\n GitLab Slideshow URLs A slideshow URL for a presentation published on GitLab is defined as follows:\n Substitute your Git account name, repository, and branch for $user, $repo, and $branch respectively. Note, Git account names are case-sensitive.\n Bitbucket Slideshow URLs A slideshow URL for a presentation published on Bitbucket is defined as follows:\n Substitute your Git account name, repository, and branch for $user, $repo, and $branch respectively. Note, Git account names are case-sensitive.\n Advanced Slideshow URLs Each of the slideshow URLs indicated above can be used to address the default slideshow presentation within a named branch and repository. But GitPitch also supports the publication of unlimited slideshow presentations from within a single branch. This requires further customization of the slideshow URL.\nSee the next chapter that describes advanced slideshow URLs and how you can Do More With Git .\n"
},
{
	"uri": "https://gitpitch.com/docs/layout-features/snap-layouts/",
	"title": "Snap Layouts",
	"tags": [],
	"description": "",
	"content": " GitPitch provides a PITCHME.md markdown snap-layout syntax that can be used to deliver flexible slide designs by controlling the placement of content on any slide.\nThis feature can be used to override the automatic slideshow layout for individual content on individual slides. Giving you the power to create unique layouts for your content on any slide.\n Click here to open the GitPitch Snap Layouts video tutorial.\n The best way to truly understand the power and flexibility of snap-layouts is to learn by example. So the chapters that follow in this guide demonstrate snap-layouts in practice by examining the markdown snippets used to deliver a number of sample slides. These samples are intended to inspire your own custom slide designs.\n Note: The Snap Layouts feature is supported by gitpitch.com , GitPitch Desktop , and GitPitch Enterprise . This feature is not part of the GitPitch open source project .\n Snap Layouts Backstory Presentation tools like Powerpoint and Keynote support drag-and-drop interfaces. When working with these tools, presentation authors have two responsibilities - slide content creation and slide content placement.\nCreating presentations using GitPitch involves writing markdown to develop slide content. This approach lets presentation authors focus squarely on content creation. By default, slide content placement is handled by the automatic slideshow layout setting. But for some use-cases, the drag-and-drop approach has the clear benefit of flexibility in support of richer slide designs.\nGitPitch snap-layouts give you the best of both worlds. Automatic layout by default. And when needed, you can enjoy fine-grained control over slide content placement from directly within your PITCHME.md markdown.\n"
},
{
	"uri": "https://gitpitch.com/docs/code-features/source-files/",
	"title": "Source Code Files",
	"tags": [],
	"description": "",
	"content": "  Introducing the Source Code Delimiter (SCD)  Simple SCD Slide Example  Pro Code Zoom SCD Example  The Importance of Code Language Hints   Introducing the Source Code Delimiter Basic slide delimiter syntax allows markdown content to be split into a series of slides. Special source code delimiter syntax allows the loading of source code from any file onto your slide using the following delimiter options:\n The code delimiter takes a relative path to any source file within your repo and A lang option - providing a langugage hint for your source code A color option - providing an optional slide background color override   Important! Source file paths are relative to the root directory of your repository.\n Simple SCD Slide Example This PITCHME.md sample markdown snippet uses a python code language hint :\n---?code=src/python/sample.py\u0026amp;lang=python @snap[north span-100] #### Source Code Delimiter @snapend Results in the rendering of the following slide:\n See the Code Highlighting Guide to learn how you can control the highlighting style and background color of your code slides.\n Pro Code Zoom SCD Example This PITCHME.md sample markdown snippet uses a ruby code language hint :\n---?code=src/ruby/sample.rb\u0026amp;lang=ruby zoom-21 @snap[north span-100] #### Source Code Delimiter with Pro Code Zoom @snapend Results in the rendering of the following slide:\n This sample slide provides a quick introduction to Code ZOOM. To learn about the full set of Code ZOOM features see the Pro Code Zoom Guide .\n "
},
{
	"uri": "https://gitpitch.com/docs/speaker-features/window/",
	"title": "Speaker Window",
	"tags": [],
	"description": "",
	"content": "  Speaker Window  Disable Speaker Window   Speaker Window The speaker window provides a unique view of any slideshow presentation - tailored for use during live presentations. The following features are available:\n Displays the current slide in the deck Displays speaker notes for the current slide Displays a preview for the next slide in the deck Displays a timer and clock to help keep track of time Forwards all navigations to the main slideshow presentation window  The speaker window can be launched for all online and offline presentations by pressing the S key within any GitPitch slideshow presentation.\nDisable Speaker Window There are times when you may want to disable the speaker window functionality. For example, to disable speaker-features and hide your speaker-notes when publishing and sharing a slide deck online following a tech conference or meetup.\nTo disable speaker window funtionality for any slide deck, disable the speaker-mode property in your PITCHME.yaml settings file:\nspeaker-mode : false By deafult, the speaker-mode setting is enabled for all slide decks.\n"
},
{
	"uri": "https://gitpitch.com/docs/themes/template/",
	"title": "The Theme Template",
	"tags": [],
	"description": "",
	"content": " The Theme Template is a customizable theme for GitPitch slide decks. The best way to manipulate the template is to use the GitPitch Theme Builder . The theme template has been crafted to deliver the following benefits:\n Attractive default styling for GitPitch slide decks out-of-the-box. Simple, fast customization of slide background, text fonts, colors, and more. Consistent rendering everywhere - online, offline, PDF, and PowerPoint. Plus automatic rendering optimizations for any slide displaying code.    From June 2019, the theme template is activated by default for all slide decks that have not explicitly activated one of the old deprecated themes . The theme template embodies best practices based on what has been learned over the past few years of real-world use by the GitPitch community.\nThe following sections detail steps to activate and customize the theme template settings for any slide deck:\n Theme Template Activation  Theme Template Defaults  Theme Background Property  Theme Headline Property  Theme Byline Property  Theme Text Property  Theme Links Property  Theme Code Property  Theme Controls Property  Theme Margins Property  Theme Template Font Families  Theme Template Text Colors  Theme Template Text Transforms  Theme Template Property Debug Tips  Consistent Rendering Everywhere  Code Slide Rendering Optimizations  Deprecated Themes Notice   Theme Template Activation By default, the theme template is activated for all GitPitch slide decks. However, to ensure consistent rendering for your slide deck now and into the future, it is recommended to explicitly activate the theme template in your PITCHME.yaml as follows:\ntheme : template While GitPitch presentation authors are strongly encouraged to adopt the theme template for all new slide decks, the full set of old deprecated themes remain available for the sole purpose of providing backwards compatibility for slide decks created before June, 2019.\nTheme Template Defaults By default, the theme template is configured by the following set of PITCHME.yaml property values:\ntheme : template theme-background : [ \u0026#34;#FFF\u0026#34; ] theme-headline : [ \u0026#34;Raleway\u0026#34;, \u0026#34;#5289F7\u0026#34;, \u0026#34;none\u0026#34;, \u0026#34;#5289F7\u0026#34;, \u0026#34;100\u0026#34;, \u0026#34;120\u0026#34;, \u0026#34;15\u0026#34; ] theme-byline : [ \u0026#34;Raleway\u0026#34;, \u0026#34;#111111\u0026#34;, \u0026#34;none\u0026#34;, \u0026#34;#111111\u0026#34;, \u0026#34;100\u0026#34;, \u0026#34;110\u0026#34;, \u0026#34;15\u0026#34; ] theme-text : [ \u0026#34;Ubuntu\u0026#34;, \u0026#34;#1C1C1C\u0026#34;, \u0026#34;none\u0026#34;, \u0026#34;#1C1C1C\u0026#34;, \u0026#34;100\u0026#34;, \u0026#34;100\u0026#34;, \u0026#34;15\u0026#34; ] theme-links : [ \u0026#34;#5289F7\u0026#34;, \u0026#34;#5254F7\u0026#34; ] theme-code : [ \u0026#34;Source Code Pro\u0026#34;, \u0026#34;100\u0026#34;, \u0026#34;120\u0026#34; ] theme-controls : [ \u0026#34;#484848\u0026#34; ] theme-margins : [ \u0026#34;0\u0026#34;, \u0026#34;15px\u0026#34; ] These default theme template property values are implicitly activated within your PITCHME.yaml. In order to override these defaults and create a custom look-n-feel for your slide deck, you must:\n Use the GitPitch Theme Builder OR Copy and paste these default property values into your PITCHME.yaml. Then update some or all of these properties with your own custom values.  The following sections introduce each of the theme-* properties shown above. Each section includes a discussion of the set of valid values that can be activated on the corresponding property.\nTheme Background Property The theme-background property lets you set a custom slide background color for your deck.\ntheme-background : [ \u0026#34;#FFF\u0026#34; ] The theme-background property takes a single string value within square-brackets array syntax. The following formats are supported by this property value:\n CSS Background Named Color  CSS Background Hex Code Color  CSS Background RGB Code Color  CSS Background HSLA Code Color  CSS Background Linear Gradient   The following snippet demonstrates a series of sample values for the theme-background property:\ntheme-background : [ \u0026#34;green\u0026#34; ] theme-background : [ \u0026#34;#5289F7\u0026#34; ] theme-background : [ \u0026#34;rgb(255, 255, 128)\u0026#34; ] theme-background : [ \u0026#34;hsla(50, 33%, 25%, .75)\u0026#34; ] theme-background : [ \u0026#34;linear-gradient(#e66465, #9198e5)\u0026#34; ] theme-background : [ \u0026#34;linear-gradient(180deg, white 50%, black 50%)\u0026#34; ]  Note, your own PITCHME.yaml should define this property once and only once.\n For live demonstrations of the theme-background property see the Theme Template Demos Guide .\nTheme Headline Property The theme-headline property lets you set custom styling for markdown h1 and h2 heading content.\ntheme-headline : [ \u0026#34;Raleway\u0026#34;, \u0026#34;#5289F7\u0026#34;, \u0026#34;none\u0026#34;, \u0026#34;white\u0026#34;, \u0026#34;100\u0026#34;, \u0026#34;115\u0026#34;, \u0026#34;15\u0026#34; ] The theme-headline property takes a series of comma-separated string values within square-brackets array syntax. These values can be generalized as follows:\ntheme-headline : [ \u0026#34;family\u0026#34;, \u0026#34;color\u0026#34;, \u0026#34;transform\u0026#34;, \u0026#34;emphasis\u0026#34;, \u0026#34;scale\u0026#34;, \u0026#34;line-height\u0026#34;, \u0026#34;padding\u0026#34; ] These values support the following custom stylings:\n family - set a custom font family for headline content color - set a custom text color for headline content transform - set a custom text transform for headline content emphasis - set a custom text color for headline bold and italic content scale - set a custom font scale (% value) for headline content line-height - set a custom font line-height (% value) for headline content padding - set a custom vertical padding (px value) for headline content  For live demonstrations of the theme-headline property see the Theme Template Demos Guide .\nTheme Byline Property The theme-byline property lets you set custom styling for markdown h3, h4, and h5 heading content.\ntheme-byline : [ \u0026#34;Raleway\u0026#34;, \u0026#34;#111111\u0026#34;, \u0026#34;none\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;100\u0026#34;, \u0026#34;110\u0026#34;, \u0026#34;15\u0026#34; ] The theme-byline property takes a series of comma-separated string values within square-brackets array syntax. These values can be generalized as follows:\ntheme-byline : [ \u0026#34;family\u0026#34;, \u0026#34;color\u0026#34;, \u0026#34;transform\u0026#34;, \u0026#34;emphasis\u0026#34;, \u0026#34;scale\u0026#34;, \u0026#34;line-height\u0026#34;, \u0026#34;padding\u0026#34; ] These values support the following custom stylings:\n family - set a custom font family for byline content color - set a custom text color for byline content transform - set a custom text transform for byline content emphasis - set a custom text color for byline bold and italic content scale - set a custom font scale (% value) for byline content line-height - set a custom font line-height (% value) for byline content padding - set a custom vertical padding (px value) for byline content  For live demonstrations of the theme-byline property see the Theme Template Demos Guide .\nTheme Text Property The theme-text property lets you set custom styling for markdown regular text content.\ntheme-text : [ \u0026#34;Ubuntu\u0026#34;, \u0026#34;#1C1C1C\u0026#34;, \u0026#34;none\u0026#34;, \u0026#34;yellow\u0026#34;, \u0026#34;100\u0026#34;, \u0026#34;100\u0026#34;, \u0026#34;15\u0026#34; ] The theme-text property takes a series of comma-separated string values within square-brackets array syntax. These values can be generalized as follows:\ntheme-text : [ \u0026#34;family\u0026#34;, \u0026#34;color\u0026#34;, \u0026#34;transform\u0026#34;, \u0026#34;emphasis\u0026#34;, \u0026#34;scale\u0026#34;, \u0026#34;line-height\u0026#34;, \u0026#34;padding\u0026#34; ] These values support the following custom stylings:\n family - set a custom font family for text content color - set a custom text color for text content transform - set a custom text transform for text content emphasis - set a custom text color for text bold and italic content scale - set a custom font scale (% value) for text content line-height - set a custom font line-height (% value) for text content padding - set a custom vertical padding (px value) for text content  For live demonstrations of the theme-text property see the Theme Template Demos Guide .\nTheme Links Property The theme-links property lets you set custom styling for markdown hyperlinks.\ntheme-links : [ \u0026#34;#5289F7\u0026#34;, \u0026#34;#5254F7\u0026#34; ] The theme-links property takes two comma-separated string values within square-brackets array syntax. These values can be generalized as follows:\ntheme-links : [ \u0026#34;color\u0026#34;, \u0026#34;hover\u0026#34; ] These values support the following custom stylings:\n color - set a custom text color for hyperlink content hover - set a custom text color for hyperlink content in hover state  For live demonstrations of the theme-links property see the Theme Template Demos Guide .\nTheme Code Property The theme-code property lets you set a custom styling for code blocks.\ntheme-code : [ \u0026#34;Source Code Pro\u0026#34;, \u0026#34;100\u0026#34;, \u0026#34;120\u0026#34; ] The theme-code property takes three comma-separated string values within square-brackets array syntax. These values can be generalized as follows:\ntheme-links : [ \u0026#34;family\u0026#34;, \u0026#34;scale\u0026#34;, \u0026#34;line-height\u0026#34; ] These values support the following custom stylings:\n family - set a custom monospaced font family for code blocks scale - set a custom monospaced font scale (% value) for code blocks line-height - set a custom font line-height (% value) for code blocks  The following monospaced font families for code are supported:\n Source Code Pro Inconsolata Iosevka Fira Code  Victor Mono  Victor Mono Italic  Note, both the Fira Code and Victor Mono fonts support symbol ligatures that are custom designed for rendering code with a little flair. The following snippet demonstrates sample usage of this property:\ntheme-code : [ \u0026#34;Source Code Pro\u0026#34; ] theme-code : [ \u0026#34;Inconsolata\u0026#34; ] theme-code : [ \u0026#34;Fira Code\u0026#34; ]  Note, your own PITCHME.yaml should define this property once and only once.\n For live demonstrations of the theme-code property see the Theme Template Demos Guide .\nTheme Controls Property The theme-controls property lets you set a custom color for the navigation controls, menu icon, and progress bar for your slide deck.\ntheme-controls : [ \u0026#34;#484848\u0026#34; ] Values specified on this property should take into account the theme background color used by the deck. For live demonstrations of the theme-controls property see the Theme Template Demos Guide .\nTheme Margins Property The theme-margins property lets you set a custom margin used to control the vertical spacing between content blocks excluding headline, byline, and plain-text which have their own padding controls.\ntheme-margins : [ \u0026#34;0\u0026#34;, \u0026#34;15px\u0026#34; ] The theme-margins property takes two comma-separated string values within square-brackets array syntax. These values can be generalized as follows:\ntheme-margins : [ \u0026#34;margin-top\u0026#34;, \u0026#34;margin-bottom\u0026#34; ] The default values for this property are recommended for vast majority of use cases. However, this property is provided to deliver flexibility when needed.\nTheme Template Font Families The theme template has built-in support for a wide range of Google Fonts These fonts can be used to customize and enhance the appearance of any slide deck.\nThe following font families are available for headline , byline , and text content:\n Lato Montserrat Nunito Sans Open Sans Oswald Poppins Prompt Quicksand Raleway Roboto Source Sans Pro Ubuntu Work Sans  Beyond these general purpose fonts there are also a number of banner fonts. These banner fonts are a little more dramatic and stylized so are best suited to headline and byline content. While not prohibited, banner fonts are typically not recommended for regular text content.\n Bubblegum Concert One Righteous   Note, all font family names are case-sensitive and must be used exactly as shown above.\n If you are not a professional designer or you are simply looking for help choosing a professional looking font pairing for your slide deck then check out the Popular Pairings section for each font on the Google Fonts website. For example, see the popular pairing section for the Montserrat Font .\nTheme Template Text Colors Theme template colors for headline , byline , and text content are powered by standard CSS Colors . Including support for:\n Color Keywords Color RGB Hex Values  If you are not a professional designer or you are simply looking for help choosing a professional looking color palette for your slide deck you might want to check out some of these free online tools:\n Color Space  [Color Drop]https://colordrop.io) Material Design    Note, GitPitch has no affiliation with these services, links are simply provided as helpful tips.\n Theme Template Text Transforms Theme template text transforms for headline , byline , and text content are powered by standard CSS Text Transforms . The set of supported text transforms are shown here:\n capitalize uppercase lowercase none   Note, all text transform names are case-sensitive and must be used exactly as shown above.\n These transforms are best suited to headline and byline content.\nTheme Template Property Debug Tips Being aware of the following tips should help quickly resolve most problems related to activating custom values on theme template properties.\nTip #1 If you set custom values on theme-* properties but still see default styles when viewing your slide deck this typically indicates a syntax error in your PITCHME.yaml file.\nTip #2 The single most common syntax error when setting custom values on theme-* properties is forgetting to specify property values as quoted strings.\nConsistent Rendering Everywhere The theme template has been designed to deliver the following important guarantee:\nConsistent GitPitch slide deck rendering online, offline, as PDF , and PowerPoint .\nA common complaint leveled against Web based presentation tools in general is the lack of rendering consistency when viewed online and offline in different browsers across different systems. Typically these issues stem from external network asset dependencies, such as Web hosted fonts. GitPitch slide decks developed using the theme template address this issue conclusively by ensuring zero external rendering asset dependencies.\nCode Slide Rendering Optimizations GitPitch offers a wide range of powerful code rendering features. Including automatic syntax highlighting for any code block on a GitPitch slide. But when using the old deprecated themes , code blocks sat apart visually from the encompassing slide. For example, here are some sample code slides rendered using two of the old deprecated themes:\nAs you can see the color scheme activated by code syntax highlighting block was in no way matched or blended with the color scheme of the slide itself. This often resulted in visual dissonance within the slide.\nThe theme template introduces a brand new convention that is automatically activated for all slides displaying code. When a slide displays code the slide background color automatically adopts the same background color used by the code block. For example, here are those same sample code slides rendered using the new theme template:\nAs you can see, the new theme template convention leads to code blocks being seamlessly blended with the slide background to deliver more attractive code slides. A big visual win, automatically delivered by the theme template.\n To disabled this convention for individual code slides, see the \u0026lt;strong\u0026gt;code-noblend\u0026lt;/strong\u0026gt; power property.\n In addition to seamless blending of code blocks with the slide background, the theme template also automatically makes optimal use of space on the slide to display code blocks. If you look again at the same code slides above, you will see that the theme template optimized slides make greater use of the slide area to display the sample source code. Another win, automatically delivered by the theme template.\nDeprecated Themes Notice The following slideshow themes, originally inherited from the Reveal.js project have been deprecated:\n white black sky beige moon night simple  These deprecated themes have been superseded by the new theme template . These themes will not be developed further and should no longer be used when creating new GitPitch slide decks. They remain available for now to provide backwards compatibility for slide decks created before June, 2019.\n"
},
{
	"uri": "https://gitpitch.com/docs/git/branch-many-slideshows/",
	"title": "Unlimited Slideshows",
	"tags": [],
	"description": "",
	"content": " The PITCHME.md convention guarantees that any PITCHME.md markdown file found within any directory on any branch within your repository can be turned into a GitPitch slideshow presentation.\nThis guide explains how you can create, manage, and share an unlimited number of slideshow presentations within a single Git repository branch.\n Working with the default Slideshow Presentation within a Branch  Working with additional Slideshow Presentations within a Branch  Example - Conference Slideshow Presentation URL  Example - New York Meetup Slideshow Presentation URL   Working with the default Slideshow Presentation within a Branch The PITCHME.md found in the root directory of any branch is known as the default slideshow presentation. The corresponding directory structure and files within a branch for the default slideshow presentation are as follows:\n. ├── PITCHME.md ├── PITCHME.yaml The PITCHME.yaml properties file is optional. When present, it can be used to activate custom settings for your slideshow presentation.\nThe default slideshow presentation is made available at the following URL:\nWhere you must substitute the corresponding Git account name, repository, and branch for $user, $repo, and $branch respectively.\nWorking with additional Slideshow Presentations within a Branch There are no limits to the number of slideshow presentations you can create within a single branch in a Git repository.\nAll slideshow presentations found within a sub-directory below root within the branch are made available at the following URL:\nThe value of $directory must identify a directory path within the branch that contains a PITCHME.md markdown file.\nExample: Conference Slideshow Presentation URL Assuming a branch has the following directory structure and files:\n. ├── PITCHME.md ├── PITCHME.yaml │ ├── conference │ └── PITCHME.md The Conference slideshow presentation URL is created as follows:\nExample: New York Meetup Slideshow Presentation URL Assuming a branch has the following directory structure and files:\n. ├── PITCHME.md ├── PITCHME.yaml │ ├── conference │ └── PITCHME.md │ ├── meetups | | │ ├── newyork │ │ ├── PITCHME.md | | │ ├── berlin │ │ ├── PITCHME.md │ │ ├── PITCHME.yaml | | │ ├── tokyo │ │ ├── PITCHME.md │ │ ├── PITCHME.yaml The New York Meetup slideshow presentation URL is created as follows:\n"
},
{
	"uri": "https://gitpitch.com/docs/work-offline/",
	"title": "Work Offline",
	"tags": [],
	"description": "",
	"content": "Chapter 2 Work Offline Develop, preview, and present on MacOS, Linux, and Windows 10.\n"
},
{
	"uri": "https://gitpitch.com/docs/pro-features/desktop-shortcuts/",
	"title": "GitPitch Desktop Shortcuts",
	"tags": [],
	"description": "",
	"content": "  Interested in taking GitPitch Desktop for a test drive? To start your 7 day free trial and see one-time purchase and subscription pricing options visit the GitPitch website here .\n The following keyboard shortcuts are available when viewing a slide deck within the Desktop:\n Press Q to go back to the Desktop Home Screen Press F to launch Fullscreen Mode Press O to launch Overview Mode Press M to open the Table of Contents Press B to launch Blackout [Pause] Mode Press S to launch the Speaker Window  Press T to launch the Theme Builder  Press D to launch the PDF \u0026#43; PPTX Document Generators  Press C to preview the Confidential Mode Challenge Form  Press ] to switch between Development Mode and Presenter Mode   Development Mode v Presenter Mode GitPitch Desktop operates in two distinct modes: development mode and presenter mode.\nDevelopment mode is the default mode of operation for the Desktop. This mode is designed to support slide content creation. In this mode all Desktop tools are operational and the tools menu found in the bottom left of a slide deck provides quick links to the main development tools.\nPresenter mode provides as a distraction-free mode and is intended to be used when presenting live. In presenter mode all development mode tools are hidden. And the auto-refresh feature that detects changes to slide content and related assets is disabled.\n"
},
{
	"uri": "https://gitpitch.com/docs/work-offline/desktop-shortcuts/",
	"title": "GitPitch Desktop Shortcuts",
	"tags": [],
	"description": "",
	"content": "  Interested in taking GitPitch Desktop for a test drive? To start your 7 day free trial and see one-time purchase and subscription pricing options visit the GitPitch website here .\n The following keyboard shortcuts are available when viewing a slide deck within the Desktop:\n Press Q to go back to the Desktop Home Screen Press F to launch Fullscreen Mode Press O to launch Overview Mode Press M to open the Table of Contents Press B to launch Blackout [Pause] Mode Press S to launch the Speaker Window  Press T to launch the Theme Builder  Press D to launch the PDF \u0026#43; PPTX Document Generators  Press C to preview the Confidential Mode Challenge Form  Press ] to switch between Development Mode and Presenter Mode   Development Mode v Presenter Mode GitPitch Desktop operates in two distinct modes: development mode and presenter mode.\nDevelopment mode is the default mode of operation for the Desktop. This mode is designed to support slide content creation. In this mode all Desktop tools are operational and the tools menu found in the bottom left of a slide deck provides quick links to the main development tools.\nPresenter mode provides as a distraction-free mode and is intended to be used when presenting live. In presenter mode all development mode tools are hidden. And the auto-refresh feature that detects changes to slide content and related assets is disabled.\n"
},
{
	"uri": "https://gitpitch.com/docs/settings/theme-builder/",
	"title": "Theme Builder Setting",
	"tags": [],
	"description": "",
	"content": " Purpose The theme-builder setting is used to enable or disable the Theme Builder within GitPitch Desktop .\nSample Syntax theme-builder : false Details  Slideshow settings are activated using a PITCHME.yaml properties file.\n When disabled, the theme-builder setting deactivates the Theme Builder within GitPitch Desktop . Deactivation has the following effects:\n It hides the theme builder launch icon And prevents the tool from being launched  When disabled, this setting helps to prevent the accidental modification of custom theme settings. This is particularly useful when two or more users are collaborating on the content of a slide deck.\nBy default, the theme-builder setting is enabled.\n"
},
{
	"uri": "https://gitpitch.com/docs/image-features/scaling/",
	"title": "Background Scaling",
	"tags": [],
	"description": "",
	"content": " Important! Remember to size-optimize your presentation images for the Web.\n Learn By Example  Image Delimiter Scaling Syntax - Contain Image  Image Delimiter Scaling Syntax - Cover Image  Image Delimiter Scaling Syntax - Fit Tall Image  Image Delimiter Scaling Syntax - Squeeze Image   Image delimiter syntax supports a size parameter that gives you complete control over background image sizing and scaling.\nThe size paramter can take any value that is valid on the background-size css property . These values include auto, contain, cover, w% h%, auto h%, etc. If the size parameter is not specified, the default scaling value for background images is 100% 100%.\nBackground image sizing and scaling can be extremely useful for working with image assets that do not share a common aspect-ratio with each other, or do not share a common aspect-ratio with the presentation itself.\nLearn By Example This PITCHME.md markdown snippet:\n---?image=assets/img/monkey.jpg\u0026amp;size=50% 100%\u0026amp;color=lightgray ### Handle image aspect ratios that differ from your slideshow Results in the rendering of the following slide:\nImage Delimiter Scaling Syntax - Contain Image The following syntax demonstrates how to contain a local background image within a slide:\n---?image=assets/bg.jpg\u0026amp;size=contain Containing the background image causes it to be resized to make sure the entire image is fully visible within the slide.\nImage Delimiter Scaling Syntax - Cover Image The following syntax demonstrates how to cover a local background image within a slide:\n---?image=assets/bg.jpg\u0026amp;size=cover Covering the background image causes it to be resized to cover the entire slide, even if it has to stretch the image or cut a little bit off one of the edges.\nImage Delimiter Scaling Syntax - Fit Tall Image By default, the aspect-ratio for a slide within a presentation is 16:9. But sometimes we need to work with images that are taller than they are wide. The aspect-ratio of such images is at odds with the aspect-ratio of the slide on which they will be displayed.\nSuch background images must be scaled to fit within a slide. While simulataneously maintaining the original aspect-ratio of the background image to prevent image skew or distortion.\nThe following syntax demonstrates how to scale and fit a tall local background image within a slide:\n---?image=assets/bg.jpg\u0026amp;size=auto 90% Fitting the tall image causes it to be scaled and constrained to 90% of the height of the slide. The width of the background image is automatically calculated to preserve the original aspect-ratio of the image.\nImage Delimiter Scaling Syntax - Squeeze Image By default, an image specified on an image delimiter will fill the entire background of the associated slide. To add padding between the edge of the slide and the edge of the background image - effectively squeezing the image - we must scale the image to fit within a reduced area of the slide.\nThe following syntax demonstrates how to squeeze a local background image within a slide:\n---?image=assets/bg.jpg\u0026amp;size=80% auto Squeezing the background image causes it to be scaled and constrained to occupy just 80% of the width of the slide. The height of the background image is automatically calculated to preserve the original aspect-ratio of the image. The result is an image centered on the slide with a 10% border on either side of the image.\nImportant! Remember to size-optimize your presentation images for the Web.\n"
},
{
	"uri": "https://gitpitch.com/docs/settings/highlight/",
	"title": "Code Highlight Setting",
	"tags": [],
	"description": "",
	"content": " Purpose The highlight setting lets you customize the syntax highlighting style for code rendered on slides within your presentation.\nSample Syntax highlight : monokai Details  Slideshow settings are activated using a PITCHME.yaml properties file.\n As the following sample slides demonstrates, selecting a custom highlighting style for your decks can results in radically different rendering for code slides:\nFor more example code slides, see the Code Highlighting Guide . You can also find a complete list of the currently available themes on the Highlight.js website.\nNote, double-barrel highlight.js style names, such as Mono Blue, must be hyphenated. For example:\nhighlight : mono-blue All highlight.js style names specified on the highlight setting must be in lower-case only.\n"
},
{
	"uri": "https://gitpitch.com/docs/enterprise/prerequisites/",
	"title": "Deployment Prerequisites",
	"tags": [],
	"description": "",
	"content": " Deployment Prerequisites GitPitch Enterprise must be deployed as a Docker container running in a Linux server environment. The GitPitch Enterprise container depends on a Docker volume at runtime. This volume is used:\n To pass custom GitPitch server configuration to the live container. To cache GitPitch server log data outside of the live container. To cache GitPitch server runtime data outside of the live container.  For on-premises deployment, the Docker volume is typically a dedicated directory on your host Linux server. The volume could be a drive on an external disk, such as a storage area network (SAN) disk. In all cases, we recommend a high-performance SSD.\nBased on your expected usage, we recommend the following hardware configurations:\n   Users CPUs Heap Memory Docker Memory Docker Volume     10-500 2 2GB 4GB 20GB   500-2000 4 4GB 8GB 50GB   2000-10000+ 4+ 4GB 8GB 100GB+    These recommendations are estimates. Your specific patterns of usage and peak load will determine optimal configuration.\nNote 1. Heap Memory refers to the size of the Java Virtual Machine (JVM) heap. The default is 2GB. This setting is configurable on launch using the following syntax on the docker run command:\n-e JXMX=4g Note 2. Docker Memory refers to the memory resource limits for the Docker container.\nNote 3. Docker Volume refers to the storage drive shared between the host Linux server and the Docker container.\n"
},
{
	"uri": "https://gitpitch.com/docs/work-online/do-more-with-git/",
	"title": "Do More With Git",
	"tags": [],
	"description": "",
	"content": " GitPitch lets you manage slideshow presentations as code. In a fully modular fashion. Modular markdown. Modular assets. Modular styling. Etc. And it does so while offering seamless integration with any existing Git Flow.\nIn fact GitPitch unlocks a wide range of unique features powered by Git. Including the publication of GitPitch slide decks from within any branch on any Git repository. At a high level these features can be summarized as follows:\n Publish unlimited slideshow presentations on a single branch Share slides, image assets, and custom styles across slideshows Develop and maintain modular content for any slideshow Publish modular mini-decks from a single master slideshow  For full details including real-world examples, see the Do More With Git Guide .\n"
},
{
	"uri": "https://gitpitch.com/docs/code-features/gists/",
	"title": "GitHub GIST Snippets",
	"tags": [],
	"description": "",
	"content": "  Introducing the GitHub GIST Delimiter (GGD)  Simple GGD Slide Example  Pro Code Zoom GGD Example  The Importance of Code Language Hints   Introducing the GitHub GIST Delimiter Basic slide delimiter syntax allows markdown content to be split into a series of slides. Special GIST delimiter syntax allows the loading of source code from any GitHub GIST onto your slide using the following delimiter options:\n The gist delimiter takes a valid GitHub GIST identifier and A lang option - providing a langugage hint for the source code A file option - providing an optional named file within a multi-file GIST A color option - providing an optional slide background color override  Simple GGD Slide Example This PITCHME.md sample markdown snippet uses a groovy code language hint :\n---?gist=onetapbeyond/8da53731fd54bab9d5c6\u0026amp;lang=groovy @snap[north span-100] #### GitHub GIST Delimiter @snapend Results in the rendering of the following slide:\n See the Monospaced Code Fonts Guide to learn how you can activate custom mono-spaced fonts optimized for rendering code on any slide.\n Pro Code Zoom GGD Example This PITCHME.md sample markdown snippet uses a docker code language hint and a named file within a multi-file GIST:\n---?gist=StefanScherer/ef596640cee1c37519bb9a5a437b44a0\u0026amp;filename=Dockerfile\u0026amp;lang=docker zoom-17 @snap[north span-100] #### GitHub GIST Delimiter with Pro Code Zoom @snapend Results in the rendering of the following slide:\n This sample slide provides a quick introduction to Code ZOOM. To learn about the full set of Code ZOOM features see the Pro Code Zoom Guide .\n "
},
{
	"uri": "https://gitpitch.com/docs/pro-features/desktop-whiteboard/",
	"title": "GitPitch Desktop Whiteboard",
	"tags": [],
	"description": "",
	"content": "  Interested in taking GitPitch Desktop for a test drive? To start your 7 day free trial and see one-time purchase and subscription pricing options visit the GitPitch website here .\n The Desktop Whiteboard lets you quickly sketch any diagram with a hand-drawn feel. Ideal for sharing mockups, wireframes, system diagrams, UI workflows, casual brainstorming, concepts, and more. You can save your sketches as pixel-perfect SVG or PNG for rendering on any slide.\nThe whiteboard is powered by the amazing Excalidraw Sketch Tool and integrated seamlessly for working offline within GitPitch Desktop. This guide provides a simple How-To for working with the whiteboard:\n Launching the Whiteboard within GitPitch Desktop  Saving Whiteboard Sketches as SVG or PNG  Using Whiteboard Sketches within your Slide Decks   Launching the Whiteboard within GitPitch Desktop When viewing a slide deck within GitPitch Desktop you can launch the whiteboard in two different ways:\n By pressing the W key on your keyboard or By clicking on the pencil icon in the bottom-left corner of any slide:  When you press W or click on the pencil icon the whiteboard will automatcially open in a new tab in your browser as shown here:\nThe button controls in the top-left corner of the whiteboard support the following features:\n Load an existing sketch (sketch files have an .excalidraw file extension) Save the current sketch as an .excalidraw file Export the current sketch as an SVG or PNG image file Clear the whiteboard by wiping the currenty displayed sketch  When drawing on the whiteboard the following shape and text tools are available:\nSimply click on a tool and then use it to draw on the whiteboard. We recommend learning by experimentation. Excalidraw is a highly intuitive sketching tool where the basic shapes (when in focus) expose rendering properties that can be quickly customized to suit your needs.\nSaving Whiteboard Sketches as SVG or PNG Using the export button in the top-left of the whiteboard you will be presented with a panel to save your sketch to SVG or PNG. A number of export options are presented on this panel as shown in the following screenshot:\nClicking on the PNG or SVG button will cause your sketch to be downloaded as an image file in your browser. Before downloading you can name the image file. And by disabling the With Background checkbox you can generate an image with a transparent background.\nUsing Whiteboard Sketches within your Slide Decks Once you have saved your sketch as an SVG or PNG file you can immediately render that image on any slide using standard GitPitch image support:\n Inline Images  Background Images  Inline Image Manipulation   Simply copy the sketch image file into your local working directory alongside your presentation assets and see your slides come to life with a delightful human touch.\n"
},
{
	"uri": "https://gitpitch.com/docs/work-offline/desktop-whiteboard/",
	"title": "GitPitch Desktop Whiteboard",
	"tags": [],
	"description": "",
	"content": "  Interested in taking GitPitch Desktop for a test drive? To start your 7 day free trial and see one-time purchase and subscription pricing options visit the GitPitch website here .\n The Desktop Whiteboard lets you quickly sketch any diagram with a hand-drawn feel. Ideal for sharing mockups, wireframes, system diagrams, UI workflows, casual brainstorming, concepts, and more. You can save your sketches as pixel-perfect SVG or PNG for rendering on any slide.\nThe whiteboard is powered by the amazing Excalidraw Sketch Tool and integrated seamlessly for working offline within GitPitch Desktop. This guide provides a simple How-To for working with the whiteboard:\n Launching the Whiteboard within GitPitch Desktop  Saving Whiteboard Sketches as SVG or PNG  Using Whiteboard Sketches within your Slide Decks   Launching the Whiteboard within GitPitch Desktop When viewing a slide deck within GitPitch Desktop you can launch the whiteboard in two different ways:\n By pressing the W key on your keyboard or By clicking on the pencil icon in the bottom-left corner of any slide:  When you press W or click on the pencil icon the whiteboard will automatcially open in a new tab in your browser as shown here:\nThe button controls in the top-left corner of the whiteboard support the following features:\n Load an existing sketch (sketch files have an .excalidraw file extension) Save the current sketch as an .excalidraw file Export the current sketch as an SVG or PNG image file Clear the whiteboard by wiping the currenty displayed sketch  When drawing on the whiteboard the following shape and text tools are available:\nSimply click on a tool and then use it to draw on the whiteboard. We recommend learning by experimentation. Excalidraw is a highly intuitive sketching tool where the basic shapes (when in focus) expose rendering properties that can be quickly customized to suit your needs.\nSaving Whiteboard Sketches as SVG or PNG Using the export button in the top-left of the whiteboard you will be presented with a panel to save your sketch to SVG or PNG. A number of export options are presented on this panel as shown in the following screenshot:\nClicking on the PNG or SVG button will cause your sketch to be downloaded as an image file in your browser. Before downloading you can name the image file. And by disabling the With Background checkbox you can generate an image with a transparent background.\nUsing Whiteboard Sketches within your Slide Decks Once you have saved your sketch as an SVG or PNG file you can immediately render that image on any slide using standard GitPitch image support:\n Inline Images  Background Images  Inline Image Manipulation   Simply copy the sketch image file into your local working directory alongside your presentation assets and see your slides come to life with a delightful human touch.\n"
},
{
	"uri": "https://gitpitch.com/docs/auxiliary-features/keyboard-controls/",
	"title": "Keyboard Controls",
	"tags": [],
	"description": "",
	"content": " GitPitch slideshow presentations offer numerous keyboard controls and shortcuts to help presentation authors and their audiences to navigate and interact with slideshow content.\nLive presentation speakers should take special note of the following slideshow modes:\n Press F for Fullscreen Mode Press O for Overview Mode Press B for Blackout Mode  Press the ? key when viewing any slideshow presentation to view the following keyboard shortcuts table:\nBeyond keyboard navigations, GitPitch also supports mouse-wheel navigation and remote-control navigation .\n"
},
{
	"uri": "https://gitpitch.com/docs/ci/circleci/",
	"title": "Launch on CircleCI",
	"tags": [],
	"description": "",
	"content": " GitPitch CI on CircleCI  GitPitch CI Environment Variables  GitPitch CI Sample Generated Artifacts  GitPitch CI Persist To CircleCI Workspace  GitPitch CI Persist As CircleCI Artifacts   GitPitch CI Environment Variables The behavior of GitPitch CI at runtime depends on the values set for the following required environment variables:\n $GITPITCHCI_TARGET - identifies the target slide deck or decks within the target reposistory for processing $GITPITCHCI_TYPE - identifies the type of file artifacts to be generated by GitPitch CI for the target slide deck or decks $DOCKERHUB_USER - identifies the name of the Docker Hub account that has beeen granted access to GitPitch CI $DOCKERHUB_PASS - identifies the password of the Docker Hub account that has beeen granted access to GitPitch CI  The $GITPITCHCI_TARGET environment variable takes the following values:\n ALL DEFAULT (slide deck in root directory) deck/specific/path (eg. training/intro)  The $GITPITCHCI_TYPE environment variable takes the following values:\n ALL PDF PPTX JPG Comma-separated types (eg. PDF,JPG)  When GitPitch CI executes it will generate file artifacts for the target deck or decks matching the artifact types indicated on the environment variables passed to your job.\nFor example, the following snippet show sample values for these required GitPitch CI environment variables:\n$GITPITCHCI_TARGET=DEFAULT $GITPITCHCI_TYPE=PDF,PPTX In this example PDF and PPTX artifacts would be generated for the DEFAULT slide deck found in the target repository.\nGitPitch CI Sample Generated Artifacts The following screenshot demostrates the nature of GitPitch CI artifacts generated within a CircleCI pipeline:\nThis screenshot is provided simply to help you visualize the types of artifacts generated by GitPitch CI. In this case you can see PDF, PowerPoint PPTX, and JPG screenshots for a single slide deck.\nGitPitch CI Persist to CircleCI Workspace The PDF, PPTX, and/or JPG artifacts generated by GitPitch CI can be persisted to a CircleCI workspace. CircleCI workspaces are a convenient mechanism for sharing data across different jobs within your pipeline.\nThe following config.yml demonstrates how to define a GitPitch CI job that persists artifacts to a workspace:\nversion: 2.0 jobs: build: docker: - image: gitpitch/ci:latest auth: username: $DOCKERHUB_USER password: $DOCKERHUB_PASS working_directory: /repo no_output_timeout: 1h steps: - checkout - run: /gitpitchci/start.sh - persist_to_workspace: root: /gitpitch paths: artifacts Note, the no_output_timeout setting is activated for this job to ensure CircleCI does not cancel your job while GitPitch CI is busy generating file artifacts for your deck or decks. By default, CircleCI cancels jobs that do not generate output within 10 minutes. For details about this setting, see the CircleCI Configuration Guide .\nGitPitch CI Persist as CircleCI Artifacts version: 2.0 jobs: build: docker: - image: gitpitch/ci:latest auth: username: $DOCKERHUB_USER password: $DOCKERHUB_PASS working_directory: /repo no_output_timeout: 1h steps: - checkout - run: /gitpitchci/start.sh - store_artifacts: path: /gitpitch/artifacts Note, the no_output_timeout setting is activated for this job to ensure CircleCI does not cancel your job while GitPitch CI is busy generating file artifacts for your deck or decks. By default, CircleCI cancels jobs that do not generate output within 10 minutes. For details about this setting, see the CircleCI Configuration Guide .\n"
},
{
	"uri": "https://gitpitch.com/docs/markdown-features/fragments/",
	"title": "Markdown Fragments",
	"tags": [],
	"description": "",
	"content": "  Markdown fragments are a great way to introduce key concepts to your audience - one idea at a time.\n Markdown fragment support is a simple yet powerful feature that can be used to reveal individual elements on a slide one-by-one. As distinct to revealing all elements on the slide at once.\nThis feature has great utility for presentation authors as it allows you to focus your audience\u0026rsquo;s attention on key concepts, revealing additional content on the slide only when the time is right.\nBecause slide fragments are so widely used to present lists-content GitPitch supports special list-content syntax, see the Markdown List Widgets Guide for details.\nBeyond lists, almost any element on a slide can be turned into a slide fragment. This guide details the use of markdown fragments with different types of slide content.\nYou can create an unlimited number of fragments on an individual slide. The order in which the fragments are revealed on your slide matches the order in which the fragments are declared in your PITCHME.md.\n Text Fragments  Boxed-Text Fragments  Image Fragments  Font Awesome Icon Fragments  Snap Layouts Fragments  Table Row Fragments  HTML Snippet Fragments   1. Text Fragments You can use @css shortcut syntax to turn any piece of text on a slide into a fragment. For example:\n--- @css[text-blue fragment](Hello, World!) 2. Boxed-Text Fragments You can use @box shortcut syntax to turn any piece of boxed-text on a slide into a fragment. For example:\n--- @box[text-orange span-80 fragment](Mars Attacks # Greetings earthlings. We come in peace!) 3. Image Fragments You can use @img shortcut syntax to turn any inline image on a slide into a fragment. For example:\n--- @img[fragment](assets/img/pic.png) 4. Font Awesome Icon Fragments You can use @fa shortcut syntax to turn any Font Awesome icon on a slide into a fragment. For example:\n--- @fa[smile-o fa-4x fa-spin fragment] 5. Snap Layouts Fragments You can use @snap layouts syntax to make any snap-region on a slide into a fragment. For example:\n--- @snap[west] # Hello @snapend @snap[east fragment] # World! @snapend 6. Table Row Fragments See the Pro Table Data Widget for powerful table data support, including automatic fragment activation for data rows on your tables.\nIf you are not a GitPitch Subscriber you can still reveal table data one row at a time you by activating the fragment class on each row using standard HTML markup syntax. For example:\n--- \u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;Name\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Age\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Jill\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;25\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr class=\u0026quot;fragment\u0026quot;\u0026gt; \u0026lt;td\u0026gt;Eve\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;94\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr class=\u0026quot;fragment\u0026quot;\u0026gt; \u0026lt;td\u0026gt;John\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;43\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; 7. HTML Snippet Fragments HTML snippets are valid markdown. And given fragment is a regular CSS class it can be activated on any element that accepts a class property, including all HTML snippets. For example:\n--- \u0026lt;h2 class=\u0026quot;fragment\u0026quot;\u0026gt;Hello, World!\u0026lt;/h2\u0026gt; "
},
{
	"uri": "https://gitpitch.com/docs/math-features/math-formulas/",
	"title": "MathJax Formulas",
	"tags": [],
	"description": "",
	"content": " Add beautifully rendered math formulas to any slideshow presentation using the following:\n MathJax Support or LaTeX \u0026#43; AsciiMath Widget   This guide documents MathJax Support via the MathJax plugin. MathJax is a JavaScript display engine for mathematics with support for LaTeX, MathML and other equation markup.\nBy default, this plugin is disabled. To enable this plugin for your presentation, see MathJax plugin activation .\n Learn By Example  Learn By Example within Snap Layouts  MathJax Plugin Activation  MathJax Backticks Syntax  LaTeX \u0026#43; AsciiMath Widget   Learn By Example This PITCHME.md markdown snippet:\n--- ##### The Cauchy-Schwarz Inequality  `\\[ \\left( \\sum_{k=1}^n a_k b_k \\right)^{\\!\\!2} \\leq \\left( \\sum_{k=1}^n a_k^2 \\right) \\left( \\sum_{k=1}^n b_k^2 \\right) \\]` Results in the rendering of the following slide:\nLearn By Example within Snap Layouts This PITCHME.md markdown snippet:\n--- @snap[north span-100] ##### The Cauchy-Schwarz Inequality @math `\\[ \\left( \\sum_{k=1}^n a_k b_k \\right)^{\\!\\!2} \\leq \\left( \\sum_{k=1}^n a_k^2 \\right) \\left( \\sum_{k=1}^n b_k^2 \\right) \\]` @mathend @snapend Note the addition of the @math and @mathend tags that wrap the standard MathJax syntax. These tags are required when rendering MathJax formulas within Snap Layouts .\nMathJax Plugin Activation To enable the MathJax plugin for your presentation add the following property to your PITCHME.yaml file:\nmathjax : TeX-MML-AM_HTMLorMML-full This setting not only enables the plugin, it also customizes the MathJax Configuration for your presentation. For example, the above setting activates the TeX-MML-AM_HTMLorMML-full configuration.\nMathJax comes with a number of pre-defined and pre-compiled configurations that are supported by GitPitch. The list of configurations can be found here .\nOnce this property has been enabled, math formulas can be included on any slide.\nMathJax Backticks Syntax Sometimes the processing of certain math formula within PITCHME.md can result in incorrect rendering on slides. This is a known issue, see the following Reveal.js issue threads here and here for further details.\nIf a formula does not render as expected on your slides, try enclosing your formula in backticks. This will give the Markdown processor a better chance of rendering your formula correctly.\n"
},
{
	"uri": "https://gitpitch.com/docs/diagram-features/mermaid-diagrams/",
	"title": "Mermaid Diagram Widget",
	"tags": [],
	"description": "",
	"content": "  Activate a GitPitch Paid Plan to unlock UML Diagram Widget support.\n This guide describes the @mermaid widget. This widget is a simple markdown syntax that can be used to render Mermaid Diagrams and Flowcharts on any slide.\n Mermaid Widget Usage Conventions  Mermaid Diagrams Built-In Themes  Mermaid Diagrams Image Manipulations  Mermaid Diagrams Background Colors  Mermaid Diagrams Layout Orientation  Learn By Example - Flowchart  Learn By Example - Flowchart Styling  Learn By Example - Sequence Diagram  More Examples in the Mermaid Docs   Mermaid Widget Usage Conventions Each diagram is defined using a simple text-based syntax within a dedicated description file. The exact syntax is defined by the Mermaid Project .\nThe following conventions for GitPitch Mermaid diagrams are in use:\n Mermaid diagram descriptions must be defined in a file within your local repository. These Mermaid diagram description files must have a .mmd extension. Diagram descriptions must adhere to valid Mermaid syntax.  If you follow these conventions you can then use the following @mermaid syntax to render a diagram on any slide:\n@mermaid[props, style...](path/to/diagram.mmd) The props value accepts a comma-separated list of valid image manipulation properties . The CSS style\u0026hellip; list can be used to activate custom styles or build-in styles on the rendered image.\nMermaid Diagrams Built-In Themes Mermaid supports the following set of built-in themes for native diagrams:\n default dark forest neutral  These themes can be activated on your diagram using the theme property on the @mermaid widget. The following markdown snippet demontrates the use of each of these theme values on a sample flowchart:\n@snap[north-west span-50 text-center] @mermaid[height=290, theme=default](src/mermaid/flow.mmd) @snapend @snap[north-east span-50 text-center] @mermaid[height=290, theme=forest](src/mermaid/flow.mmd) @snapend @snap[south-east span-50 text-center] @mermaid[height=290, theme=dark](src/mermaid/flow.mmd) @snapend @snap[south-west span-50 text-center] @mermaid[height=290, theme=neutral](src/mermaid/flow.mmd) @snapend Results in the rendering of the following slide:\nMermaid Diagrams Image Manipulations The full set of GitPitch supported inline image manipulation properties can be activated on your Mermaid diagrams. For example, the following markdown snippet:\n@mermaid[width=900, rotate=-25](src/mermaid/journey.mmd) Results in the rendering of the following slide:\nThese manipulations include image sizing, opacity controls, filters, transformations, behaviors, and more. For details see the Inline Image Manipulations Guide .\nMermaid Diagrams Background Colors A custom background color can be activated for any Mermaid diagram using the bg property on the @mermaid widget. The following markdown snippet demontrates the use of custom backgrounds on a sample sequence diagram::\n@snap[north-west span-55 text-center] @mermaid[bg=transparent](src/mermaid/sequence.mmd) @snapend @snap[south-east span-55 text-center] @mermaid[bg=#77DD77](src/mermaid/sequence.mmd) @snapend Results in the rendering of the following slide:\nThe bg property can take any value that is valid on the background-color css property . By default, Mermaid diagrams are rendered using a transparent background.\nMermaid Diagrams Layout Orientation You can control the layout orientation of any Mermaid diagram by specifying one of the following orientation flags on the opening graph declaration in your diagram description file.\n TB - top to bottom BT - bottom to top LR - left to right RL - right to left TD - same as TB  For example, the following snippet demonstrates a Mermaid graph with a top-to-bottom layout orientation:\ngraph TB Start --\u0026gt; Stop The following screenshot demonstrates a Mermaid graph being rendered using different layout orientations on a sample GitPitch slide:\nGiven the aspect ratio of GitPitch slides is 16:9 there are times when activating an LR or RL layout for your diagrams makes sense. Doing so lets you to take advantage of the full width of your slides.\nLearn By Example - Flowchart This Mermaid flowchart diagram syntax:\ngraph TB c1--\u0026gt;a2 subgraph one a1--\u0026gt;a2 end subgraph two b1--\u0026gt;b2 end subgraph three c1--\u0026gt;c2 end Used by the following PITCHME.md markdown snippet:\n@mermaid[width=800](src/mermaid/flowchart.mmd) Results in the rendering of the following slide:\nLearn By Example - Flowchart Styling This Mermaid flowchart with styling diagram syntax:\ngraph TB sq[Square shape] --\u0026gt; ci((Circle shape)) subgraph A od\u0026gt;Odd shape]-- Two line\u0026lt;br/\u0026gt;edge comment --\u0026gt; ro di{Diamond with \u0026lt;br/\u0026gt; line break} -.-\u0026gt; ro(Rounded\u0026lt;br\u0026gt;square\u0026lt;br\u0026gt;shape) di==\u0026gt;ro2(Rounded square shape) end %% Notice that no text in shape are added here instead that is appended further down e --\u0026gt; od3\u0026gt;Really long text with linebreak\u0026lt;br\u0026gt;in an Odd shape] %% Comments after double percent signs e((Inner / circle\u0026lt;br\u0026gt;and some odd \u0026lt;br\u0026gt;special characters)) --\u0026gt; f(,.?!+-*ز) cyr[Cyrillic]--\u0026gt;cyr2((Circle shape Начало)); classDef green fill:#9f6,stroke:#333,stroke-width:2px; classDef orange fill:#f96,stroke:#333,stroke-width:4px; class sq,e green class di orange Used by the following PITCHME.md markdown snippet:\n@mermaid[](src/mermaid/flowchart-styling.mmd) Results in the rendering of the following slide:\nLearn By Example - Sequence Diagram This Mermaid sequence diagram syntax:\nsequenceDiagram Alice -\u0026gt;\u0026gt; Bob: Hello Bob, how are you? Bob--\u0026gt;\u0026gt;John: How about you John? Bob--x Alice: I am good thanks! Bob-x John: I am good thanks! Note right of John: Bob thinks a long\u0026lt;br/\u0026gt;long time, so long\u0026lt;br/\u0026gt;that the text does\u0026lt;br/\u0026gt;not fit on a row. Bob--\u0026gt;Alice: Checking with John... Alice-\u0026gt;John: Yes... John, how are you? Used by the following PITCHME.md markdown snippet:\n@mermaid[](src/mermaid/sequence.mmd) Results in the rendering of the following slide:\nMore Examples in the Mermaid Docs Mermaid supports a wide range of flowchart and diagram types. You can learn further details and see numerous examples of each diagram type in the official Mermaid guides:\n Flowcharts Guide  Sequence Diagrams Guide  Class Diagrams Guide  State Diagrams Guide  Entity Relationships Guide  User Journey Diagrams Guide  Gantt Diagrams Guide  Pie Charts Guide   "
},
{
	"uri": "https://gitpitch.com/docs/work-online/",
	"title": "Share Online",
	"tags": [],
	"description": "",
	"content": "Chapter 3 Share Online Publish public, private, and password-protected slide decks.\n"
},
{
	"uri": "https://gitpitch.com/docs/getting-started/delimiters/",
	"title": "Slide Delimiters",
	"tags": [],
	"description": "",
	"content": " GitPitch slideshow presentation content is created using markdown. To split markdown content into a series of slides, you must use a special slide delimiter syntax. Each delimiter denotes the start of a new slide.\nTo create a new slide use the following delimiter syntax within your PITCHME.md file:\n--- # Hello, World! As both horizontal (default) and vertical navigation is supported within GitPitch slide decks each navigation type has it\u0026rsquo;s own unique delimiter syntax. To activate vertical navigation for a slide use the following delimiter syntax within your PITCHME.md file:\n+++ # Hello, World! By using a combination of horizontal and vertical slide delimiters you can customize how your audience experiences and navigates content within your slideshow presentation.\n Typically horizontal slides present top-level information. Vertical slides are then used to drill-down into a series of slides with topic-specific content.\n Example Usage A very simple two slide PITCHME.md slideshow presentation can be created as follows:\n## Hello, World!  --- ## The End :) Note, the delimiter for the first slide in every presentation is implicit. So only one explicit slide delimeter is needed in the above example.\nHere is a simple four slide PITCHME.md presentation that uses both horizontal and vertical navigation:\n## Hello!  +++ ## Hola!  --- ## Goodbye!  +++ ## Adiós!  "
},
{
	"uri": "https://gitpitch.com/docs/git/branch-shared-assets/",
	"title": "Slideshow Shared Assets",
	"tags": [],
	"description": "",
	"content": " The Many Slideshows Guide details the ability of GitPitch to serve an unlimited number of slideshow presentations from within a single Git branch. This guide discusses some of the added advantages of using a single branch in this way.\nSpecifically, a single branch approach allows for the reuse of a wide range of slideshow assets across multiple presentations. These assets can include images , custom logos , slide backgrounds , and even custom css .\nSharing assets across multiple presentations within a single branch simplifies asset management and avoids unnecessary duplication. It is also a great way to stamp a consistent look-and-feel across a series of related slideshow presentations.\nSee the Modular Markdown and Modular Slideshows guides for related details.\n"
},
{
	"uri": "https://gitpitch.com/docs/layout-features/snap-layouts-syntax/",
	"title": "Snap Layouts Syntax",
	"tags": [],
	"description": "",
	"content": "  Snap Layouts Basic Syntax  Snap Layouts 3x3 Grid  Snap Layouts Content Positioning  Snap Layouts Content Sizing   Snap Layouts Basic Syntax To activate snap-layouts for any block of markdown on your slide simply wrap the block in opening @snap and closing @snapend tags, as shown in the above screenshot.\n The first property on the opening tag always indicates a snap-position on the snap-layouts grid . The second property is typically a span-xxx value to control the width and height of the snapped content.  The following sections introduce the snap-layouts grid itself, plus positioning and sizing controls for snapped content within the grid.\nSnap Layouts 3x3 Grid The snap-layouts system makes use of a 3x3 grid. We can see here how that grid system maps onto the area for a slide. Each grid-area is a possible target snap-position for snapped content on your slide. Using snap-layouts content sizing you can then control what portion of the slide is used to render specific blocks of snapped content.\nSnap Layouts Content Positioning Each distinct grid-area is addressed using compass coordinates, for example, north, south, east, west, etc. The following markdown snippet demonstrates the use of snap-layouts to position content in the west area of the grid:\n@snap[west span-50] ### Architecture Diagram ![IMAGE](assets/img/diagram.png) @snapend To relocate this sample snapped content from the west to the north-east position on your slide you need simply update the snap-position property on the opening @snap tag as follows:\n@snap[north-east span-50] ### Architecture Diagram ![IMAGE](assets/img/diagram.png) @snapend The full set of supported snap-positions are as follows:\n midpoint north south east west north-east north-west south-east south-west  Note, the midpoint snap-position target can be used to center snapped content of your slide. The use of a snap-position as the opening property on an opening @snap tag is required. It is also worth noting that these property names are case-sensitive.\nSnap Layouts Content Sizing By default, the space used to render content on your slides is determined by the following:\n The content itself, for example, the number of words on your slide. The fixed theme active for your slide deck. The aspect ratio of non-text based content such as images, etc.  It is important to understand that there are limits to the amount of content you can add to a slide before it will overflow the slide. For example, if you add a lengthy paragraph of text to your slide then unless you actively take steps to constrain the size of that content it is very likely that your text is going to overflow. This can be readily understood when you consider the impact of the active fixed theme for your slide deck.\nThe fixed theme for your slide deck determines the default font-sizes, padding, margins, etc. used to render your content. As a result, these style rules have a major impact on how much slide space is used to render your content. It is worth noting that you do have the ability to override these defaults with your own custom style rules .\nNon-text based content such as images come in all shapes and sizes. But the aspect ratio of your slides is fixed at 16:9. So if you are using images with an aspect ratio that differs from your slide deck then you may need to take steps to constrain that content to fit within the bounds of your slides.\nThankfully snap-layouts makes it very simple to take complete control over sizing of content on your slides. Lets look again at the sample slide markdown from above:\n@snap[west span-50] ### Architecture Diagram ![IMAGE](assets/img/diagram.png) @snapend The combination of the west and span-50 properties ensure this block of snapped content uses just 50% of the available width, starting from the left side of the slide, to render this content. Both the markdown heading text and the accompanying image are automatically constrained by fit within this region of the grid.\nWe could easily adjust this value of the span-xxx property to increase or decrease the amount of space given to the snapped content on our sample slide, for example:\n@snap[west span-33] ### Architecture Diagram ![IMAGE](assets/img/diagram.png) @snapend As a general rule, by constraining the width of snapped content using a span property, the height of that content is adjusted proportionally. You can learn many different way to take control of the size of content on your slides in the CSS Utility Styles Guide .\nThe next chapter in this guide provides us with our first concrete example of slide content-sizing on the snap-layouts grid.\n"
},
{
	"uri": "https://gitpitch.com/docs/the-template/solid-slide-designs/",
	"title": "Solid BG Slide Designs",
	"tags": [],
	"description": "",
	"content": " To reproduce any of the slide background designs shown in this guide simply copy-and-paste the corresponding markdown snippet directly into the PITCHME.md for your GitPitch slide deck.\n Click the small icon in the top-right corner of any markdown block below to copy the markdown snippet.\n All of the markdown snippets that follow in this guide make use of GitPitch color slide delimiters . Each snippet displays placeholder colors and content. You can replace these placeholder values with custom values as appropriate to your slide deck.\nTip! Background Slide Design Templates If you find a background slide design here that you would like to set as the base design for every slide in your deck, you can activate the design globally using the Theme Template Background Property .\nSolid Slide Design A ---?color=#1F6ED4 # @fa[laptop-code fa-3x text-white]  Note, the laptop icon that appears on this slide is placeholder content, rendered by the Font Awesome Widget . It is intended that you replace this sample markdown content with your custom slide content.\n Solid Slide Design B ---?color=#005f6b # @fa[laptop-code fa-3x text-white]  Note, the laptop icon that appears on this slide is placeholder content, rendered by the Font Awesome Widget . It is intended that you replace this sample markdown content with your custom slide content.\n Solid Slide Design C ---?color=#040000 # @fa[laptop-code fa-3x text-white]  Note, the laptop icon that appears on this slide is placeholder content, rendered by the Font Awesome Widget . It is intended that you replace this sample markdown content with your custom slide content.\n Solid Slide Design D ---?color=#5BE7C4 # @fa[laptop-code fa-3x text-black]  Note, the laptop icon that appears on this slide is placeholder content, rendered by the Font Awesome Widget . It is intended that you replace this sample markdown content with your custom slide content.\n Solid Slide Design E ---?color=#00dffc # @fa[laptop-code fa-3x text-black]  Note, the laptop icon that appears on this slide is placeholder content, rendered by the Font Awesome Widget . It is intended that you replace this sample markdown content with your custom slide content.\n Solid Slide Design F ---?color=#fef4a9 # @fa[laptop-code fa-3x text-black]  Note, the laptop icon that appears on this slide is placeholder content, rendered by the Font Awesome Widget . It is intended that you replace this sample markdown content with your custom slide content.\n "
},
{
	"uri": "https://gitpitch.com/docs/speaker-features/remote-control/",
	"title": "Speaker Remote Control",
	"tags": [],
	"description": "",
	"content": " GitPitch slideshow presentations support navigation between slides using remote control devices such as Logitech, Kensington, etc. See the Remote Control Setting documentation for further details.\n"
},
{
	"uri": "https://gitpitch.com/docs/themes/custom/",
	"title": "Theme Custom CSS",
	"tags": [],
	"description": "",
	"content": " While the Theme Builder delivers simple, fast customization for GitPitch slide decks, the use of custom CSS gives you highly targeted and almost unlimited control over the look-and-feel of any presentation.\nThis feature is powered by Cascading Style Sheets aka. CSS. As a presentation author you can define and activate new CSS style rules that override the default style rules inherited from the fixed theme active on your presentation.\nTo apply your own custom CSS styles to your slideshow presentation, see the custom theme setting docs.\nFixed Themes CSS Style Rules Definition The set of CSS style rules that define the default theme made available by GitPitch are defined by the Theme Template . To learn what styles are defined by the theme template and by extension what styles you can override for you presentation, jump straight to the theme template CSS files on GitHub. You can find those files here .\nLive CSS Style Rules manipulation using Web Inspector While studying the CSS files that define the rules for your chosen theme is a great way to familiarize yourself with the styles available, using a Web Inspector to directly inspect the content on your slides is highly recommended.\nA Web Inspector - typically a Developer Tools feature in your browser - provides a highly interactive and very effective way to discover active style rules on any element on your slide. Plus it also gives you an opportunity to experiment with tweaks and overrides and see the results instantly updated in your slideshow within the browser window.\nOnce you have achieved the effects you are after using the Web Inspector you can then capture the new rules in your own custom CSS file. To then activate your custom CSS, see the custom theme setting docs.\n"
},
{
	"uri": "https://gitpitch.com/docs/rich-media-features/tweets/",
	"title": "Tweet Widget",
	"tags": [],
	"description": "",
	"content": "  Activate a GitPitch Paid Plan to unlock Tweet Widget support.\n  @tweet - Tweet Widget  Tweet Offline Support  Tweet Browser Content Blocking   Tweet Widget To render a Tweet on any slide you can use the @tweet widget. Using the following syntax in your PITCHME.md markdown file:\n@tweet[https-url-to-tweet] Here is a markdown snippet demonstrating actual usage:\n--- @snap[west h3-white span-50] ### @fa[calendar] Dec 15, 2018 @snapend @snap[east span-50] @tweet[https://twitter.com/gitpitch/status/1073880271366180865] @snapend This markdown snippet renders as follows:\nNote the use of the span class to constrain the width, and consequently the height, of the rendered Tweet. This technique is recommended to ensure that your Tweets fit properly on your slides.\nTweet Offline Support Rendering a Tweet is dependent on content served by twitter.com. As such, if you are developing or presenting a slide deck when offline the content of your Tweet will not be available for rendering on your slide.\nGitPitch attempts to handle this gracefully by automatically replacing the fully rendered Tweet card with a simple link to the Tweet online. Once Internet access has been restored, the fully rendered Twitter card will be displayed once again.\nTweet Browser Content Blocking Modern Web browsers offer sophisticated content blocking policies, which include smart tracking protection. In most cases, this is a very good thing for end-users.\nHowever, depending on the content-blocking policies activated in your Web browser, Tweets served by twitter.com may be prevented from rendering on your slides.\nThe screenshot on the left captures a cleanly rendered Tweet. The screenshot on the right captures the rendering of a slide when a Tweet is treated as blocked content.\nAs you have no control over the Web content blocking policies of your audience, this note is simply provided to draw your attention to these policies and their potential consequences. If needed, you can inform your audience accordingly.\n"
},
{
	"uri": "https://gitpitch.com/docs/settings/line-numbers/",
	"title": "Code Line Numbers Setting",
	"tags": [],
	"description": "",
	"content": " Purpose The code-line-numbers setting lets you activate the display of line-numbers alongside code rendered on slides within your presentation.\nSample Syntax code-line-numbers : true Details  Slideshow settings are activated using a PITCHME.yaml properties file.\n The activation of line-numbers alongside code can help simplify conversations between you and your audience - providing an effective way to identify and discuss specific lines of code on any slide.\nBy default, line-numbers are not shown alongside code blocks:\nWhen the code-line-numbers setting is enabled, line-numbers are rendered alongside code as shown in the following screenshot:\n Click on the above image to experience code line-numbers within a live GitPitch presentation.\n Specific line-numbers are highlighted just like the code itself when you are code presenting .\n"
},
{
	"uri": "https://gitpitch.com/docs/pro-features/desktop-image-tools/",
	"title": "GitPitch Desktop Image Tools",
	"tags": [],
	"description": "",
	"content": "  Interested in taking GitPitch Desktop for a test drive? To start your 7 day free trial and see one-time purchase and subscription pricing options visit the GitPitch website here .\n  Understanding Image Size Limits  Desktop Image Compression Tool  How to Disable Image Size Limits   Understanding Image Size Limits GitPitch enforces size limits on image files. These size limits exist to ensure slide decks viewed online can be loaded and rendered in the browser without undue delays.\nCurrently there is a 1Mb file size limit for each individual JPG, PNG, and GIF image.\nTo reduce bandwidth usage and rendering times for your decks it is strongly recommended to size-optimize your image files. A task made simple using the built-in Desktop Pro image compression tool .\nDesktop Image Compression Tool The Desktop ships with a built-in image compression tool that automatically scans your local working directory for JPG, PNG, and GIF image files that exceed the image size limits .\nThis tool can be opened using the Switch to Image Manager link on the Desktop home screen. The image manager looks as follows:\nAny image file found in your local working directory that exceeds image size limits is listed within the Large Image Files panel. One-click on any file listed in this panel will generate a compressed version of the image file that will automatically download to local disk.\nAfter downloading a compressed image file you can view it in a local image viewer or copy it into the local working directory for your slide deck and view it directly on your GitPitch slide.\n Note, the Large Image Files panel also includes links to alternate image compression tools online.\n How to Disable Image Size Limits By default, GitPitch enforces image size limits for all slide decks. And as noted in the discussion of those limits, this feature exists principally to ensure slide decks created offline will still load and render without undue delays for your audience when viewed online.\nBut there may be times when your target audience is not online. For example, when:\n Using the Desktop to present a slide deck live at a tech conference or meetup . Using the Desktop to present hi-resoluiton image content that exceed size limits. Using the Desktop to export and share a slide deck as PDF or PowerPoint PPTX .  When needed, you can disable image size limits by disabling the image-size-limits setting in the PITCHME.yaml for any slide deck, as follows:\nimage-size-limits : false Important: This setting disables image size limits in the Desktop only. If you publish your slide deck to the cloud this setting is ignored. The default image size limits are always enforced on gitpitch.com. To ensure consistent rendering everywhere, we strongly recommend that you always size-optimize image files used by your slide decks.\n"
},
{
	"uri": "https://gitpitch.com/docs/work-offline/desktop-image-tools/",
	"title": "GitPitch Desktop Image Tools",
	"tags": [],
	"description": "",
	"content": "  Interested in taking GitPitch Desktop for a test drive? To start your 7 day free trial and see one-time purchase and subscription pricing options visit the GitPitch website here .\n  Understanding Image Size Limits  Desktop Image Compression Tool  How to Disable Image Size Limits   Understanding Image Size Limits GitPitch enforces size limits on image files. These size limits exist to ensure slide decks viewed online can be loaded and rendered in the browser without undue delays.\nCurrently there is a 1Mb file size limit for each individual JPG, PNG, and GIF image.\nTo reduce bandwidth usage and rendering times for your decks it is strongly recommended to size-optimize your image files. A task made simple using the built-in Desktop Pro image compression tool .\nDesktop Image Compression Tool The Desktop ships with a built-in image compression tool that automatically scans your local working directory for JPG, PNG, and GIF image files that exceed the image size limits .\nThis tool can be opened using the Switch to Image Manager link on the Desktop home screen. The image manager looks as follows:\nAny image file found in your local working directory that exceeds image size limits is listed within the Large Image Files panel. One-click on any file listed in this panel will generate a compressed version of the image file that will automatically download to local disk.\nAfter downloading a compressed image file you can view it in a local image viewer or copy it into the local working directory for your slide deck and view it directly on your GitPitch slide.\n Note, the Large Image Files panel also includes links to alternate image compression tools online.\n How to Disable Image Size Limits By default, GitPitch enforces image size limits for all slide decks. And as noted in the discussion of those limits, this feature exists principally to ensure slide decks created offline will still load and render without undue delays for your audience when viewed online.\nBut there may be times when your target audience is not online. For example, when:\n Using the Desktop to present a slide deck live at a tech conference or meetup . Using the Desktop to present hi-resoluiton image content that exceed size limits. Using the Desktop to export and share a slide deck as PDF or PowerPoint PPTX .  When needed, you can disable image size limits by disabling the image-size-limits setting in the PITCHME.yaml for any slide deck, as follows:\nimage-size-limits : false Important: This setting disables image size limits in the Desktop only. If you publish your slide deck to the cloud this setting is ignored. The default image size limits are always enforced on gitpitch.com. To ensure consistent rendering everywhere, we strongly recommend that you always size-optimize image files used by your slide decks.\n"
},
{
	"uri": "https://gitpitch.com/docs/pro-features/desktop-faq/",
	"title": "GitPitch Desktop FAQ",
	"tags": [],
	"description": "",
	"content": "  Interested in taking GitPitch Desktop for a test drive? To start your 7 day free trial and see one-time purchase and subscription pricing options visit the GitPitch website here .\n  How can I download and install the latest Desktop Pro image?  What happens if Desktop Pro finds no PITCHME.md?  What happens if Desktop Pro finds multiple PITCHME.md?  How can I change the default 9000 port used by Desktop Pro?  What can I do if Desktop Pro does not auto-refresh in my browser?  How can I reduce the CPU load associated with Desktop Pro?  How can I install Docker Desktop?   How can I download and install the latest Desktop Pro image? To download and install the latest Desktop image simply login to GitPitch and follow the on-screen instructions on your profile page. To login, click here .\nWhat happens if Desktop Pro finds no PITCHME.md? If no PITCHME.md files are found in your local working directory then Desktop Pro will display the Quickstart Generator window:\nWith one-click on the Quickstart Now button the desktop will copy a set of sample files into your local working directory. This is a great way to start a brand new slide deck.\nWhat happens if Desktop Pro finds multiple PITCHME.md? If multiple PITCHME.md files are found in your local working directory then the Desktop Manager will automatically list each slide deck found:\nWith one-click you can open any deck listed under the Your Slide Decks panel.\nHow can I change the default 9000 port used by Desktop Pro? The default port for Desktop Pro is port 9000. To set a custom port when launching the desktop you must make two changes on your launch command:\n Update the -p port mapping and Add a matching PORT environment variable  For example, the following command demonstrates how you can launch Desktop Pro using port 80:\ndocker run -it -v {WORKINGDIR}:/repo -p 80:80 -e PORT=80 gitpitch/desktop:pro Note, {WORKINGDIR} is a placeholder. You must replace it with an absolute path to a working directory on your local file system where your presentation files are found.\nWhat can I do if Desktop Pro does not auto-refresh in my browser? Each time you create or update a file within your local working directory, Desktop Pro attempts to automatically refresh the slide deck in your browser.\nIf your browser does not auto-refresh - or fails to refresh cleanly - the first thing to try is to simply save your file again and watch for a clean refresh.\nIf the slide deck in your browser still does not auto-refresh or you are seeing long delays before your slide deck auto-refreshes in the browser, re-launch the desktop using a Minimal Working Directory .\nLaunch Desktop Pro using a Minimal Working Directory The launch command for Desktop Pro takes a path to a working directory on your local file system. This path is mounted by Desktop Pro as a Docker volume. And then used to monitor and detect changes you make to your presentation files.\nDue to performance bottlenecks associated with Docker volume mounts, if the local working directory contains a large number of files, the overall responsiveness of the auto-refresh feature may slow. Or may not work at all.\n Important! While your local working directory may contain only a small number of project source files, it is possible that the directory also contains a large number of generated build and runtime artifacts. These artifacts can greatly increase the overall file count in your directory.\n To overcome this performance bottleneck and enjoy fast auto-refresh, please take the following steps:\n Create a new working directory on your local file system. Copy your presentation markdown and any file dependencies into the new working directory. Then re-launch the desktop using this new working directory as follows:  docker run -it -v {MINIMAL}:/repo -p 9000:9000 gitpitch/desktop:pro Note, here {MINIMAL} is a placeholder. You must replace it with an absolute path to the new working directory on your local file system. This working directory should contain presentation files only.\nHaving re-launched the desktop, start making changes to your presentation markdown. If the minimal working directory solution works, you should see your slide deck quickly auto-refresh in the browser each time you modify files in your new working directory.\nIf you have re-launched the desktop using a minimal working directory and you still see slow refresh times or your browser does not refresh at all, please contact GitPitch support .\nHow can I reduce the CPU load associated with Desktop Pro? By default, Desktop Pro uses a periodic file-change watcherthat sweeps the working directory for file changes. When changes are found, your slide deck is automatically refreshed in the browser.\nThe default periodic sweep interval is 250 ms. Periodic sweeps by the desktop place a load on the CPU of your host machine. In most cases, this load is negligible. However, if you would like to reduce the CPU load on your host machine you can set a custom sweep interval. Higher sweep intervals will reduce the load on your CPU.\nFor example, to activate a custom 500ms sweep interval on launch use the -e SWEEP flag:\ndocker run -it -v {WORKINGDIR}:/repo -p 9000:9000 -e SWEEP=500 gitpitch/desktop:pro The minimum sweep interval permitted is the default 250ms. While the maximum sweep internal permitted on launch is 1000ms.\nIf using a custom sweep interval does not result in reduced CPU load then as a last resort for users on MacOSand Linuxyou can try to disable periodic sweeps entirely as follows:\ndocker run -it -v {WORKINGDIR}:/repo -p 9000:9000 -e SWEEP=false gitpitch/desktop:pro Disabling periodic sweeps within Desktop Pro is not supported for users on Windowsdesktops.\nHow can I install Docker Desktop? GitPitch Desktop is delivered as a Docker image. The Docker runtime aka. Docker Desktop used to launch that image is available for MacOS, Linux, and Windows 10.\n Important! Windows 10 Home edition is currently not supported.\n Docker installation instructions can be found here:\n Docker Desktop for Mac  Docker Desktop for Windows  Docker Server for Linux   The simplest way to verify your Docker installation is to run the following command:\ndocker run hello-world If running this command fails for any reason, you will need to resolve those issues before attempting to launch GitPitch Desktop .\n"
},
{
	"uri": "https://gitpitch.com/docs/image-features/positioning/",
	"title": "Background Positioning",
	"tags": [],
	"description": "",
	"content": " Important! Remember to size-optimize your presentation images for the Web.\n Learn By Example   Image delimiter syntax supports a position parameter that gives you complete control over background image positioning within slides.\nThe position paramter can take any value that is valid on the background-position css property . These values include center, left, right, 25% 75%, bottom 50px right 100px, etc.\nIf the position parameter is not specified, the default position value for background images is center.\nBackground image positioning can be extremely useful when you want to control the overall positioning of content on a slide. For example, in order for an image to work alongside text within a slide.\nLearn By Example This PITCHME.md markdown snippet:\n---?image=assets/images/face.jpg\u0026amp;position=left\u0026amp;size=55% 100% @title[Get Ready] #### @size[0.6em](Get ready for some)  \u0026lt;br\u0026gt; ## @color[#e49436](Git)Pitch #### Presentation @fa[magic] @color[#e49436](Magic) Results in the rendering of the following slide:\n Click here to view this slide within a live GitPitch presentation.\n Important! Remember to size-optimize your presentation images for the Web.\n"
},
{
	"uri": "https://gitpitch.com/docs/themes/",
	"title": "Custom Themes",
	"tags": [],
	"description": "",
	"content": "Chapter 4 Custom Themes Embrace or Extend Visual Theme for any GitPitch Slide Deck\n"
},
{
	"uri": "https://gitpitch.com/docs/rich-media-features/emojis/",
	"title": "Emoji Widget",
	"tags": [],
	"description": "",
	"content": "  Activate a GitPitch Paid Plan to unlock Emoji Widget support.\n  @emoji - Emoji Widget  GitPitch Emoji Library  Learn By Example   Emoji Widget To render an Emoji on any slide you can use the @emoji widget. Using the following syntax in your PITCHME.md markdown file:\n@emoji[emoji-name] Where emoji-name is any one of hundreds of available emojis supported by the GitPitch Emoji Library .\nGitPitch Emoji Library GitPitch supports the Twitter Emoji set provided by the emoji-awesome library. You can browse and search the complete set of supported emoji here .\nLearn By Example Here is a markdown snippet demonstrating @emoji usage:\n## Summer @emoji[sunny] + @emoji[sunflower] = happy @emoji[honeybee]  This markdown snippet renders as follows:\nEmojis are rendered on your slide at the size of the surrounding text. This means you can use standard markdown heading syntax to increase or decrease the size of the emoji icons rendered on your slides, for example:\n--- @snap[north] #### @emoji[heart_eyes] @snapend @snap[midpoint] # @emoji[heart_eyes] @snapend @snap[south] ## @emoji[heart_eyes] @snapend This markdown snippet renders as follows:\nEmojis can also be used right alongside existing font-awesome icons to create novel and visually striking slides, for example:\n--- ### GitPitch delivers @emoji[dolphin] ### Font Awesome @fa[magic text-orange] Magic ### alongside Emojis @emoji[heart_eyes fa-spin]  This markdown snippet renders as follows:\nNote, if you pay very careful attention to the sample markdown snippet above you will notice that you can even activate font-awesome icons animation classes on emojis within GitPitch slides!\n"
},
{
	"uri": "https://gitpitch.com/docs/work-offline/desktop-faq/",
	"title": "GitPitch Desktop FAQ",
	"tags": [],
	"description": "",
	"content": "  Interested in taking GitPitch Desktop for a test drive? To start your 7 day free trial and see one-time purchase and subscription pricing options visit the GitPitch website here .\n  How can I download and install the latest Desktop Pro image?  What happens if Desktop Pro finds no PITCHME.md?  What happens if Desktop Pro finds multiple PITCHME.md?  How can I change the default 9000 port used by Desktop Pro?  What can I do if Desktop Pro does not auto-refresh in my browser?  How can I reduce the CPU load associated with Desktop Pro?  How can I install Docker Desktop?   How can I download and install the latest Desktop Pro image? To download and install the latest Desktop image simply login to GitPitch and follow the on-screen instructions on your profile page. To login, click here .\nWhat happens if Desktop Pro finds no PITCHME.md? If no PITCHME.md files are found in your local working directory then Desktop Pro will display the Quickstart Generator window:\nWith one-click on the Quickstart Now button the desktop will copy a set of sample files into your local working directory. This is a great way to start a brand new slide deck.\nWhat happens if Desktop Pro finds multiple PITCHME.md? If multiple PITCHME.md files are found in your local working directory then the Desktop Manager will automatically list each slide deck found:\nWith one-click you can open any deck listed under the Your Slide Decks panel.\nHow can I change the default 9000 port used by Desktop Pro? The default port for Desktop Pro is port 9000. To set a custom port when launching the desktop you must make two changes on your launch command:\n Update the -p port mapping and Add a matching PORT environment variable  For example, the following command demonstrates how you can launch Desktop Pro using port 80:\ndocker run -it -v {WORKINGDIR}:/repo -p 80:80 -e PORT=80 gitpitch/desktop:pro Note, {WORKINGDIR} is a placeholder. You must replace it with an absolute path to a working directory on your local file system where your presentation files are found.\nWhat can I do if Desktop Pro does not auto-refresh in my browser? Each time you create or update a file within your local working directory, Desktop Pro attempts to automatically refresh the slide deck in your browser.\nIf your browser does not auto-refresh - or fails to refresh cleanly - the first thing to try is to simply save your file again and watch for a clean refresh.\nIf the slide deck in your browser still does not auto-refresh or you are seeing long delays before your slide deck auto-refreshes in the browser, re-launch the desktop using a Minimal Working Directory .\nLaunch Desktop Pro using a Minimal Working Directory The launch command for Desktop Pro takes a path to a working directory on your local file system. This path is mounted by Desktop Pro as a Docker volume. And then used to monitor and detect changes you make to your presentation files.\nDue to performance bottlenecks associated with Docker volume mounts, if the local working directory contains a large number of files, the overall responsiveness of the auto-refresh feature may slow. Or may not work at all.\n Important! While your local working directory may contain only a small number of project source files, it is possible that the directory also contains a large number of generated build and runtime artifacts. These artifacts can greatly increase the overall file count in your directory.\n To overcome this performance bottleneck and enjoy fast auto-refresh, please take the following steps:\n Create a new working directory on your local file system. Copy your presentation markdown and any file dependencies into the new working directory. Then re-launch the desktop using this new working directory as follows:  docker run -it -v {MINIMAL}:/repo -p 9000:9000 gitpitch/desktop:pro Note, here {MINIMAL} is a placeholder. You must replace it with an absolute path to the new working directory on your local file system. This working directory should contain presentation files only.\nHaving re-launched the desktop, start making changes to your presentation markdown. If the minimal working directory solution works, you should see your slide deck quickly auto-refresh in the browser each time you modify files in your new working directory.\nIf you have re-launched the desktop using a minimal working directory and you still see slow refresh times or your browser does not refresh at all, please contact GitPitch support .\nHow can I reduce the CPU load associated with Desktop Pro? By default, Desktop Pro uses a periodic file-change watcherthat sweeps the working directory for file changes. When changes are found, your slide deck is automatically refreshed in the browser.\nThe default periodic sweep interval is 250 ms. Periodic sweeps by the desktop place a load on the CPU of your host machine. In most cases, this load is negligible. However, if you would like to reduce the CPU load on your host machine you can set a custom sweep interval. Higher sweep intervals will reduce the load on your CPU.\nFor example, to activate a custom 500ms sweep interval on launch use the -e SWEEP flag:\ndocker run -it -v {WORKINGDIR}:/repo -p 9000:9000 -e SWEEP=500 gitpitch/desktop:pro The minimum sweep interval permitted is the default 250ms. While the maximum sweep internal permitted on launch is 1000ms.\nIf using a custom sweep interval does not result in reduced CPU load then as a last resort for users on MacOSand Linuxyou can try to disable periodic sweeps entirely as follows:\ndocker run -it -v {WORKINGDIR}:/repo -p 9000:9000 -e SWEEP=false gitpitch/desktop:pro Disabling periodic sweeps within Desktop Pro is not supported for users on Windowsdesktops.\nHow can I install Docker Desktop? GitPitch Desktop is delivered as a Docker image. The Docker runtime aka. Docker Desktop used to launch that image is available for MacOS, Linux, and Windows 10.\n Important! Windows 10 Home edition is currently not supported.\n Docker installation instructions can be found here:\n Docker Desktop for Mac  Docker Desktop for Windows  Docker Server for Linux   The simplest way to verify your Docker installation is to run the following command:\ndocker run hello-world If running this command fails for any reason, you will need to resolve those issues before attempting to launch GitPitch Desktop .\n"
},
{
	"uri": "https://gitpitch.com/docs/pro-features/security/",
	"title": "GitPitch Pro Publishing",
	"tags": [],
	"description": "",
	"content": " About  Activate a GitPitch Paid Plan to unlock Pro Cloud Publishing.\n Pro Publishing lets you share any slideshow presentation online with a simple git-push. Including support for public, private, and password-protected slideshows. You can use this feature to secure your content and manage your slideshow audience in the cloud.\nBy convention , GitPitch will automatically transform the contents of any PITCHME.mdmarkdown file found within any public repositoryinto a fully responsive, slideshow presentation. GitPitch Publishing extends this convention by supporting the transformation of PITCHME.mdmarkdown files found within private repositorieson GitHub, GitLab, and Bitbucket.\nHowever, PITCHME.mdfound within private repositoriesare not automatically transformed by GitPitch. As a presentation author, you must explicitly grant access to your audience. This step is an important protection as it helps to prevent the unintended disclosure of your presentation content.\nGranting access requires the activation of privacy controlsfor your presentations. Privacy controls are activated using GitPitch Published Mode, Stealth Mode, and Confidential Mode.\nThe following sections detail the use of these privacy controls.\n Published Mode  Stealth Mode  Confidential Mode  Confidential Mode Customization  Slideshow Access Control Policies   Published Mode Published Mode can be used to create and manage publicly accessible slideshow presentations served from within private repos. It is ideal for publicly promoting, pitching, or presenting news, technology, or even training for any project without revealing code, config, or data within your private repository.\nAs a presentation author you can activate published mode for any slideshow using the publishedproperty in your PITCHME.yaml. The publishedproperty expects a trueor falseboolean value.\nHere is an example of how you can activate published mode for a presentation in your PITCHME.yaml:\npublished : true Once published mode is activated, anyone can access your slideshow at the standard GitPitch presentation URL. You can view a sample Published presentation here .\nTo see what happens if you try to to access a presentation within a private repo that has not been published, click here .\nAs a presentation author you can manage access to your presentation by enabling or disabling published mode at any time.\nStealth Mode Stealth Mode can be used to create and manage private URLs for GitPitch presentations served from within private repos. It is ideal for securing presentation content under development, providing early-access previews, soliciting feedback from trusted parties, and managing limited or temporary audiences.\nAs a presentation author you can activate stealth mode for any slideshow using the stealthproperty in your PITCHME.yaml. The stealthproperty accepts a comma-separated list of one or more stealth-tokens. A token can be any arbitrary string value.\nHere is an example of how you can activate a single stealth-tokenin your PITCHME.yaml:\nstealth : 01234 Here is an example of how you can activate multiple stealth-tokensin your PITCHME.yaml:\nstealth : 01234, AcmeCorp, sneakpeek Once stealth mode is activated, a valid token is required on the presentation URL in order to gain access to the slideshow content. The token is specified on a presentation URL using the ?s=query param. The combination of presentation URL plus valid token query param is a private URL.\nFor example, in this sample case you would need to append ?s=01234, ?s=AcmeCorp, or ?s=sneakpeekon the presentation URL before sharing the link with your intended audience. You can see a successful attempt at Stealth presentation access here .\nAny attempt to access the presentation without a valid stealth-tokenon the URL will be denied. You can see a failed attempt at Stealth presentation access here .\nToken management is as simple as adding and removing tokens on the stealthproperty in your PITCHME.yamlfile. Managing tokens in this way gives you a quick and easy way to define and manage your audience over time.\nConfidential Mode Confidential Mode can be used to create and manage password-protected GitPitch presentations served from within private repos. It is ideal for managing secure access to private, confidential, and even paid content.\nIn addition, the password challenge form activated by this mode can be customized, to reflect the brand of your product, service, or content.\nAs a presentation author you can activate confidential mode for any slideshow using the confidentialproperty in your PITCHME.yaml. The confidentialproperty accepts a comma-separated list of one or more confidential-tokens. A token can be any arbitrary string value.\nHere is an example of how you can activate a single confidential-tokenin your PITCHME.yaml:\nconfidential : 54321 Here is an example of how you can activate multiple confidential-tokensin your PITCHME.yaml:\nconfidential : 54321, GitMagic, earlyacce$$ Once confidential mode is activated, any attempt to access the presentation is intercepted and the user is challenged to provide a valid confidential-tokenas a password for the presentation.\nFor example, in this sample case a user would be required to submit 54321, GitMagic, or earlyacce$$on the challenge formbefore gaining access to the slideshow content. You can experience the Confidential challenge formfor this sample presentation here .\nAny attempt to access the presentation without the user providing a valid confidential-tokenis denied. Token management is as simple as adding and removing tokens on the confidentialproperty in your PITCHME.yamlfile. Managing tokens in this way gives you a quick and easy way to define and manage your audience over time.\nConfidential Mode Customization As noted, when confidential mode is activated a password challenge formwill be presented to anyone attempting to access your presentation.\nThe default challenge screen renders as follows:\nThe default form can be entirely re-branded to reflect your product, service, or content using the set of pro-*properties in your PITCHME.yaml:\nYou can specify none on the pro-background setting:\npro-background : none When none is set on this property the default background image is hidden as shown here:\nAs you can see the default background color is black. The pro-background-color setting is provided for a quick and easy way to activate a custom background color. For example:\npro-background : none pro-background-color : \u0026#34;#3686E4\u0026#34; These sample settings render as follows:\nThe pro-background-color setting can also be used to activate a background color gradient using any valid CSS linear-gradient value, for example:\npro-background : none pro-background-color : \u0026quot;linear-gradient(to right top, #051937, #004d7a, #008793);\u0026quot; These sample settings render as follows:\nHere is an example of how you can customize the title, subtitle, logo, and background image for this form using the set of pro-*properties in your PITCHME.yaml:\n# Tokens confidential : 54321, GitMagic, earlyacce$$ # Customizations pro-title : \u0026quot;Tech Training 2020\u0026quot; pro-subtitle : \u0026quot;Leverage the Power of Git\u0026quot; pro-contact : \u0026quot;Please use the password token provided.\u0026quot; pro-logo : assets/img/logo.png pro-background : assets/img/robot.jpg These sample settings render as follows:\nAdditional customization of the Confidential challenge formcan be achieved using custom CSS. See the following Twitter and Monster presentations for examples of form customization.\nCustom CSS for the confidential challenge form is activated in the same way you can activate custom CSS to style presentation content. The following CSS code block lists the set of customizable CSS ID selectors for this form along with some sample values:\n#pro-background { opacity: 0.9 !important; } #pro-logo { max-height: 3em; } #pro-title { font-size: 1.1em; } #pro-subtitle { color: lightgray; } #pro-enter { background: #e49436; border-color: #e49436; } #pro-contact { display: none; } Slideshow Access Control Policies Public Repo Access Control Policy If a PITCHME.yaml properties file is not found alongside the PITCHME.md, GitPitch will automatically attempt to use the PITCHME.yaml file in the root directory of the repository. If following this fallback procedure no settings file has been found, the presentation is simply rendered without the activation of custom settings.\n This policy allows presentation authors to maintain a single PITCHME.yaml in the root directory and have those settings shared by many public presentations within a single branch.\n Private Repo Access Control Policy If a PITCHME.yaml properties file is not found alongside the active PITCHME.md, all attempts at rendering the slideshow presentation are halted.\n This policy forces presentation authors to be explicit about custom settings - including slideshow visibility settings - for each individual private presentation.\n "
},
{
	"uri": "https://gitpitch.com/docs/the-template/gradient-slide-designs/",
	"title": "Gradient BG Slide Designs",
	"tags": [],
	"description": "",
	"content": " To reproduce any of the slide background designs shown in this guide simply copy-and-paste the corresponding markdown snippet directly into the PITCHME.md for your GitPitch slide deck.\n Click the small icon in the top-right corner of any markdown block below to copy the markdown snippet.\n All of the markdown snippets that follow in this guide make use of GitPitch color slide delimiters . Each snippet displays placeholder colors and content. You can replace these placeholder values with custom values as appropriate to your slide deck.\nTip! Background Slide Design Templates If you find a background slide design here that you would like to set as the base design for every slide in your deck, you can activate the design globally using the Theme Template Background Property .\nGradient Slide Design A ---?color=linear-gradient(to bottom, #2193b0, #6dd5ed) # @fa[laptop-code fa-3x text-white]  Note, the laptop icon that appears on this slide is placeholder content, rendered by the Font Awesome Widget . It is intended that you replace this sample markdown content with your custom slide content.\n Gradient Slide Design B ---?color=linear-gradient(to top left, #bdc3c7, #2c3e50) # @fa[laptop-code fa-3x text-white]  Note, the laptop icon that appears on this slide is placeholder content, rendered by the Font Awesome Widget . It is intended that you replace this sample markdown content with your custom slide content.\n Gradient Slide Design C ---?color=linear-gradient(to top right, #36d1dc, #5b86e5) # @fa[laptop-code fa-3x text-white]  Note, the laptop icon that appears on this slide is placeholder content, rendered by the Font Awesome Widget . It is intended that you replace this sample markdown content with your custom slide content.\n Gradient Slide Design D ---?color=linear-gradient(to bottom, #06beb6, #48b1bf) # @fa[laptop-code fa-3x text-white]  Note, the laptop icon that appears on this slide is placeholder content, rendered by the Font Awesome Widget . It is intended that you replace this sample markdown content with your custom slide content.\n Gradient Slide Design E ---?color=linear-gradient(to top left, #BE5869, #403A3E) # @fa[laptop-code fa-3x text-white]  Note, the laptop icon that appears on this slide is placeholder content, rendered by the Font Awesome Widget . It is intended that you replace this sample markdown content with your custom slide content.\n "
},
{
	"uri": "https://gitpitch.com/docs/enterprise/install/",
	"title": "Install GitPitch Enterprise",
	"tags": [],
	"description": "",
	"content": "  Step 1. Getting Started  Step 2. Install Docker  Step 3. Create Docker Hub Account  Step 4. Register your Docker Hub ID  Step 5. Await Access Confirmation  Step 6. Login To Docker Hub  Step 7. Pull GitPitch Enterprise Image  Step 8. Verify GitPitch Enterprise Image   Step 1. Getting Started If you have not activated a trial subscription for GitPitch Enterprise you can do so now on the GitPitch website, click here .\n Assuming you activated your trail subscription for GitPitch Enterprise the remainder of this guide will take you through the steps you need to take in order to download the GitPitch Enterprise image from the Docker Hub registry.\nStep 2. Install Docker GitPitch Enterprise is delivered using Docker container technology.\nIn order to download GitPitch Enterprise, you first need to have Docker installed on your Linux server. If you do not have Docker installed on your server, please go ahead and install it now. You can find Docker installation instructions here .\nStep 3. Create Docker Hub Acount The GitPitch Enterprise image is maintained in the Docker Hub registry. Therefore, in order to download the image you will need your own free account on Docker Hub . If you do not have an account on Docker Hub, please go ahead and create an account now .\nStep 4. Register your Docker Hub ID Before you can download the image from Docker Hub you must be granted read-access to the GitPitch Enterprise image repository. For that to happen, you need to share your Docker Hub ID with us. Please register your Docker Hub ID under the GitPitch Enterprise Access Management section of your profile page on the GitPitch website, click here .\nStep 5. Await Access Confirmation Once we receive and process your Docker Hub ID - a process that may take up to 24 hours - we will send you an email to confirm your access to the GitPitch Enterprise image repository. As soon as you receive this confirmation message you are then ready to move on to the next step.\nStep 6. Login to Docker Hub You should now have access to the GitPitch Enterprise image repository. Downloading is a two-step process. The first step requires a simple login to Docker Hub from the command line on your host Linux server. You can login using the following command:\ndocker login Once you can confirm a successful login move on to the next step.\nStep 7. Pull GitPitch Enterprise Image Following a successful login to Docker Hub you are now ready to download the GitPitch Enterprise image from the Docker Hub registry. To download, use the following command:\ndocker pull gitpitch/enterprise:latest Allow the download process to complete. This may take a few minutes the first time you run this command. In the future, you can use this same command to pull any updates to the GitPitch Enterprise image.\nStep 8. Verify GitPitch Enterprise Image Following a successful download, the GitPitch Enterprise image should be visible to Docker on your local server. You can verify the presence of the image using the following command:\ndocker images The output generated by that command should confirm the existence of your local copy of the GitPitch Enterprise image. The output should be similar, but not necessarily identical, to the following:\n$ docker images REPOSITORY TAG IMAGE ID CREATED SIZE gitpitch/enterprise latest 83447a6c80d6 1 week ago 256MB Congratulations! If you have reached this point you have completed a successful installation of the GitPitch Enterprise image. You are now ready to move on to launching the server .\n"
},
{
	"uri": "https://gitpitch.com/docs/enterprise/launch/",
	"title": "Launch GitPitch Enterprise",
	"tags": [],
	"description": "",
	"content": "  Step 1. Verify GitPitch Enterprise Docker Image  Step 2. Prepare GitPitch Server Test Configuration  Step 3. Prepare GitPitch Server Log Configuration  Step 4. Prepare Docker Volume Directory  Step 5. Test Launch GitPitch Enterprise  Step 6. Verify Test Launch GitPitch Enterprise  Step 7. Prepare GitPitch Server Production Configuration  Step 8. Launch GitPitch Enterprise  Step 9. Verify Launch GitPitch Enterprise  Appendix - Interactive v Detached Mode Launch   Step 1. Verify GitPitch Enterprise Docker Image Following a successful installation , the GitPitch Enterprise image should be visible to Docker on your local server. You can verify the presence of the image using the following command:\ndocker images The output generated by that command should confirm the existence of your local copy of the GitPitch Enterprise image. The output should be similar, but not necessarily identical, to the following:\n$ docker images REPOSITORY TAG IMAGE ID CREATED SIZE gitpitch/enterprise latest 83447a6c80d6 1 day ago 256MB Step 2. Prepare GitPitch Server Test Configuration The GitPitch Enterprise runtime depends on an external configuration file, called gitpitch.conf.\nThis is the primary configuration file for the GitPitch server. Among other things, the properties in this file can be used to configure the API endpoints for your self-hosted Git server.\nAt this stage we are going to use a fixed configuration - that communicates with https://github.com - for initial testing purposes only. We will mirgate from testing to production configuration later in this guide.\ninclude \u0026#34;application.conf\u0026#34; gitpitch { git { repo { service { name = \u0026#34;GitHub\u0026#34; type = \u0026#34;github\u0026#34; apibase = \u0026#34;https://api.github.com/\u0026#34; rawbase = \u0026#34;https://api.github.com/\u0026#34; gistbase = \u0026#34;https://gist.githubusercontent.com/\u0026#34; apitokenheader = \u0026#34;Authorization\u0026#34; } } } } For now, simply copy the contents of the above configuration block without modification. Save those contents to a file named gitpitch.conf on your Linux server. The small icon in the top-right of the block provides a convenient one-click copy to your clipboard.\nStep 3. Prepare GitPitch Server Log Configuration The GitPitch Enterprise runtime depends on an additional external configuration file, called gitlog.xml. This file configures the log behavior of the GitPitch server.\n\u0026lt;configuration\u0026gt; \u0026lt;conversionRule conversionWord=\u0026#34;coloredLevel\u0026#34; converterClass=\u0026#34;play.api.libs.logback.ColoredLevel\u0026#34; /\u0026gt; \u0026lt;appender name=\u0026#34;FILE\u0026#34; class=\u0026#34;ch.qos.logback.core.rolling.RollingFileAppender\u0026#34;\u0026gt; \u0026lt;file\u0026gt;/data/gitpitch-server-testing.log\u0026lt;/file\u0026gt; \u0026lt;rollingPolicy class=\u0026#34;ch.qos.logback.core.rolling.TimeBasedRollingPolicy\u0026#34;\u0026gt; \u0026lt;fileNamePattern\u0026gt;/data/gitpitch-server-testing.log-%d{yyyy-ww}\u0026lt;/fileNamePattern\u0026gt; \u0026lt;maxHistory\u0026gt;30\u0026lt;/maxHistory\u0026gt; \u0026lt;/rollingPolicy\u0026gt; \u0026lt;encoder\u0026gt; \u0026lt;pattern\u0026gt;%date %coloredLevel %logger{15} - %message%n%xException{10}\u0026lt;/pattern\u0026gt; \u0026lt;/encoder\u0026gt; \u0026lt;/appender\u0026gt; \u0026lt;appender name=\u0026#34;STDOUT\u0026#34; class=\u0026#34;ch.qos.logback.core.ConsoleAppender\u0026#34;\u0026gt; \u0026lt;encoder\u0026gt; \u0026lt;pattern\u0026gt;%date %coloredLevel %logger{15} - %message%n%xException{10}\u0026lt;/pattern\u0026gt; \u0026lt;/encoder\u0026gt; \u0026lt;/appender\u0026gt; \u0026lt;appender name=\u0026#34;ASYNCFILE\u0026#34; class=\u0026#34;ch.qos.logback.classic.AsyncAppender\u0026#34;\u0026gt; \u0026lt;appender-ref ref=\u0026#34;FILE\u0026#34; /\u0026gt; \u0026lt;/appender\u0026gt; \u0026lt;appender name=\u0026#34;ASYNCSTDOUT\u0026#34; class=\u0026#34;ch.qos.logback.classic.AsyncAppender\u0026#34;\u0026gt; \u0026lt;appender-ref ref=\u0026#34;STDOUT\u0026#34; /\u0026gt; \u0026lt;/appender\u0026gt; \u0026lt;logger name=\u0026#34;com.gitpitch\u0026#34; level=\u0026#34;INFO\u0026#34; additivity=\u0026#34;false\u0026#34;\u0026gt; \u0026lt;appender-ref ref=\u0026#34;ASYNCFILE\u0026#34; /\u0026gt; \u0026lt;appender-ref ref=\u0026#34;ASYNCSTDOUT\u0026#34; /\u0026gt; \u0026lt;/logger\u0026gt; \u0026lt;logger name=\u0026#34;play\u0026#34; level=\u0026#34;INFO\u0026#34; /\u0026gt; \u0026lt;root level=\u0026#34;WARN\u0026#34;\u0026gt; \u0026lt;appender-ref ref=\u0026#34;ASYNCFILE\u0026#34; /\u0026gt; \u0026lt;appender-ref ref=\u0026#34;ASYNCSTDOUT\u0026#34; /\u0026gt; \u0026lt;/root\u0026gt; \u0026lt;/configuration\u0026gt; For now, simply copy the contents of the above configuration block and save it to a file named gitlog.xml on your Linux server. The small icon in the top-right of the block provides a convenient one-click copy to your clipboard.\nThis initial log configuration will result in the following logging behavior by the GitPitch server:\n Log statements are written to standard out and displayed in your Docker launch console. Log statements are written to a file called gitpitch-server-testing.log in your Docker volume directory.  While this is a reasonable log configuration for testing purposes, we recommend disabling the writing of log statement to standard out in production. For your convenience, we provide a sample production ready log configuration here .\nNote, the Docker volume directory referred to above is described in detail in the next section.\nStep 4. Prepare Docker Volume Directory GitPitch Enterprise depends on a Docker volume at runtime. This volume provides a mechanism for the live GitPitch Enterprise container to read and write files on the host file system of your Linux server.\nIn preparation for launch, please copy the configuration files created during step 2 and step 3 into your chosen Docker volume directory. Your chosen directory should be dedicated exclusively for use by GitPitch Enterprise.\nAfter copying the required configuration files, the contents of the directory should look as follows:\n├── gitpitch.conf |── gitlog.xml Note, these file names are case-sensitive. The files indicated must be present in your Docker volume directory before moving on to the next step.\nStep 5. Test Launch GitPitch Enterprise To launch GitPitch Enterprise using the current test configuration, execute the following command:\ndocker run --rm -it -v {DVD}:/data -p 9000:9000 gitpitch/enterprise:latest Note, {DVD} is a placeholder. You must replace it with an absolute path to the root of the Docker volume directory you prepared in step 4 .\nFor example, assuming /Users/david/gpe is your chosen Docker volume directory, then the full launch command would be as follows:\ndocker run --rm -it -v /Users/david/gpe:/data -p 9000:9000 gitpitch/enterprise:latest Following this launch command you should expect to see a small amount of console output, like this:\n$ docker run --rm -it -v /Users/david/gpe:/data -p 9000:9000 gitpitch/enterprise:latest 2019-04-27 08:43:30,976 [info] c.g.g.GRSManager - GIT: GRS[ GitHub ][ github ] 2019-04-27 08:43:30,989 [info] c.g.s.g.ProService - TOKENS: activated=false 2019-04-27 08:43:30,990 [info] c.g.s.g.ProService - JVM: processors=2, max memory=1908932608 2019-04-27 08:43:31,262 [info] play.api.Play - Application started (Prod) 2019-04-27 08:43:31,501 [info] p.c.s.NettyServer - Listening for HTTP on /0.0.0.0:9000 2019-04-27 08:43:31,507 [info] p.c.s.NettyServer - Listening for HTTPS on /0.0.0.0:9443 If your console output is similar to that shown above, please move on to the next step. Otherwise, please get in touch and provide details of any failures you are seeing. To aid the debugging process, please attach the gitpitch-server-testing.log log file that has been written to the root of your Docker volume directory.\nStep 6. Verify Test Launch GitPitch Enterprise The simplest way to test your GitPitch Enterprise server instance is to open a slideshow presentation in your browser and verify that it is rendered correctly.\nBy default, your GitPitch Enterprise server responds on localhost:9000. Therefore, to launch the GitPitch Demo Deck sample presentation - found in the gitpitch/demo-deck repository on GitHub - open the following URL in any browser on your Linux server:\nhttp://localhost:9000/gitpitch/demo-deck If you can verify that the sample presentation opens and renders correctly in your browser, move on to the next step. Otherwise, please get in touch and provide details of any failures you are seeing.\n Before moving on to the next step, please stop your test GitPitch Enterprise container by typing Ctrl-C in the console window where you launched the instance.\n Step 7. Prepare GitPitch Server Production Configuration Earlier in step 2 we prepared a gitpitch.conf server configuration file for initial testing purposes. In this step will need to migrate from that testing configuration to your production configuration.\nThe production configuraiton will activate the integration between GitPitch Enterprise and your self-hosted Git server.\n# The following include statement is required. include \u0026#34;application.conf\u0026#34; # # [Required] # Update the `name` property value to match the name # of your Organization. # # [Required] # Update the `type` property value to match the # type of self-hosted Git server used by your Organization. # # The value set on the `type` property value must be # one of the following: # github, gitlab, bitbucket, gitbucket, gitea, gogs # # [Required] # Update the `apibase` and `rawbase` property values to match # the API endpoint for your self-hosted Git server. For most # Git server types, these property values should be set to the # same value. And both values must end in a \u0026#39;/\u0026#39; character. # # [Optional] # Uncomment the `apitoken` property and replace `xxx...` with a # Personal Access Token for the primary Git account within # your organization. If specified, this `apitoken` will be # used by default on all API calls to your Git server. # gitpitch { git { repo { service { name = \u0026#34;your-organization-name\u0026#34; type = \u0026#34;your-git-server-type\u0026#34; apibase = \u0026#34;http(s)://xxx/yyy/\u0026#34; rawbase = \u0026#34;http(s)://xxx/yyy/\u0026#34; apitokenheader = \u0026#34;Authorization\u0026#34; # apitoken = \u0026#34;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\u0026#34; gistbase = \u0026#34;https://gist.githubusercontent.com/\u0026#34; } } } } To start this migration, copy the contents of the above configuration block and use it to overwrite the current contents of the gitpitch.conf on your Linux server. The small icon in the top-right of the block provides a convenient one-click copy to your clipboard.\nNext, make changes to the configuration property values in that file by following each of the instructions marked [Required] in the comments. When your gitpitch.conf file has been updated to reflect your specific configuration, please move on to the next step.\nStep 8. Launch GitPitch Enterprise  This step uses the same launch commands introduced in step 5 .\n To launch GitPitch Enterprise using your new production configuration execute the following command:\ndocker run --rm -it -v {DVD}:/data -p 9000:9000 gitpitch/enterprise:latest Note, {DVD} is a placeholder. You must replace it with an absolute path to the root of the Docker volume directory you prepared in step 4 .\nFor example, assuming /Users/david/gpe is your chosen Docker volume directory, then the full launch command would be as follows:\ndocker run --rm -it -v /Users/david/gpe:/data -p 9000:9000 gitpitch/enterprise:latest Following this launch command you should again expect to see a small amount of console output, like this:\n$ docker run --rm -it -v /Users/david/gpe:/data -p 9000:9000 gitpitch/enterprise:latest 2019-04-27 08:43:30,976 [info] c.g.g.GRSManager - GIT: GRS[ GitHub ][ github ] 2019-04-27 08:43:30,989 [info] c.g.s.g.ProService - TOKENS: activated=false 2019-04-27 08:43:30,990 [info] c.g.s.g.ProService - JVM: processors=2, max memory=1908932608 2019-04-27 08:43:31,262 [info] play.api.Play - Application started (Prod) 2019-04-27 08:43:31,501 [info] p.c.s.NettyServer - Listening for HTTP on /0.0.0.0:9000 2019-04-27 08:43:31,507 [info] p.c.s.NettyServer - Listening for HTTPS on /0.0.0.0:9443 If your console output is similar to that shown above, please move on to the next step. Otherwise, please get in touch and provide details of any failures you are seeing.\nStep 9. Verify Launch GitPitch Enterprise Again, the simplest way to test your GitPitch Enterprise production server instance is to open a slideshow presentation in your browser and verify that it is rendered correctly.\nNow that you are using your production configuration, GitPitch Enterprise is communicating with your self-hosted Git server. Therefore, at least one repository on that server needs to contain a PITCHME.md file for verification purposes.\nOpen the following URL in any browser on your host Linux server:\nhttp://localhost:9000/{user}/{repository} Note, both {user} and {repository} are placeholders. You must replace them with a valid user account and repository name on your self-hosted Git server. And that repository must contain a PITCHME.md markdown file.\nIf you can verify that the sample presentation opens and renders correctly in your browser, congratulations - GitPitch Enterprise has been successfully integrated with your self-hosted Git server. Otherwise, please get in touch and provide details of any failures you are seeing.\nIf you have successfully verified the integration of GitPitch Enterprise with your Git server we strongly recommend the following:\n Activate Production Logging for your server. Relaunch your server using Docker Detached Mode .  Appendix - Interactive v Detached Mode Launch All of the sample launch commands above demonstrate the starting of the GitPitch Enterprise container in interactive mode, using the -it flag on the launch command.\nInteractive mode makes it very simple to stop a live container using nothing more than a Ctrl-C in the launch console window. This approach makes sense for testing purposes.\nIn a real production environment, the GitPitch Enterprise container should be launched using detached mode. Using detached mode ensures the server is run in the background.\nLaunching GitPitch Enterprise using detached mode is achieved as follows:\ndocker run --name gitpitch --rm -d -v {DVD}:/data -p 9000:9000 gitpitch/enterprise:latest For example:\n$ docker run --name gitpitch --rm -d -v /Users/david/gpe:/data -p 9000:9000 gitpitch/enterprise:latest 96ee5f19d6339601c78e248f36e38aa1563fdbd0b6393343175593a9e601b01d As shown above, following the execution of this command the long container ID for your GitPitch Enterprise container instance is output to the console. At this point, the container is running in the background.\nYou can also lookup the abbreviated container ID using the following command:\ndocker container ls You can use the long or abbreviated container ID to terminate the background container process. For example:\ndocker container stop 96ee5f19d633 Alternatively, if you named the container using the name syntax at launch, you can also terminate the background container by name:\ndocker container stop gitpitch "
},
{
	"uri": "https://gitpitch.com/docs/ci/github-actions/",
	"title": "Launch on GitHub Actions",
	"tags": [],
	"description": "",
	"content": " GitPitch CI on GitHub Actions Details coming soon. If you are interested in using GitPitch CI within your GitHub Actions pipelines please get in touch .\n"
},
{
	"uri": "https://gitpitch.com/docs/settings/layout/",
	"title": "Layout Setting",
	"tags": [],
	"description": "",
	"content": " Purpose The layout setting lets you set an automatic layout policy for your slideshow content.\nSample Syntax layout : top-left Details  Slideshow settings are activated using a PITCHME.yaml properties file.\n The active layout sets an automatic layout policy for content on all slides within your presentation. See snap layouts to learn how to override the automatic layout policy for individual content on individual slides.\nGitPitch currently supports the following slideshow layouts:\n center (default) center-left center-right top top-left top-right   If you do not explicitly set a value for the layout setting your slideshow will automatically be rendered using the default layout - the center layout.\n "
},
{
	"uri": "https://gitpitch.com/docs/code-features/presenting/",
	"title": "Live Code Presenting",
	"tags": [],
	"description": "",
	"content": " Live code presenting can be activated for any code block on any slide - whether the code originated as a fenced code-block , a source code file , or a GitHub GIST .\n Introducing Live Code Presenting  Live Code Presenting Example  Live Code Presenting Example with Annotations  Live Code Presenting Example with Pro Code Zoom  Live Code Presenting Fragment Syntax  The Importance of Code Language Hints   Introducing Live Code Presenting Live code presenting lets you focus-on and step-through code directly on your slides. This feature lets you demonstrate code flow control, initialization, looping, function calls, and more. All without ever having to leave your slide deck.\n If you are a conference speaker or training instructor Live Code Presenting can mean no more switching back-and-forth between your presentation slides and your IDE!\n Live Code Presenting Example Live code presenting can be activated on any code slide using a live code fragment syntax . The following example demonstrates the use of code-fragments to activate live code presenting on a sample fenced code block :\n--- @snap[north-east span-100 text-06 text-gray] Live Code Presenting @snapend ```js var io = require(\u0026#39;socket.io\u0026#39;)(80); var cfg = require(\u0026#39;./config.json\u0026#39;); var tw = require(\u0026#39;node-tweet-stream\u0026#39;)(cfg); tw.track(\u0026#39;socket.io\u0026#39;); tw.track(\u0026#39;javascript\u0026#39;); tw.on(\u0026#39;tweet\u0026#39;, function(tweet){ io.emit(\u0026#39;tweet\u0026#39;, tweet); }); ``` @[1] @[2,3] @[5-10] Results in the rendering of the following slide:\nTo understand this markdown snippet, see the live code fragment syntax description.\nLive Code Presenting Example with Annotations Annotations are a feature of live code presenting that let you display additional context on your slide for each individual code-fragment. See live code fragment syntax for details. The following example demonstrates the use of code-fragments with annotations for a sample source code file :\n---?code=src/sample/tweet-io.js\u0026amp;lang=js @snap[north-east span-100 text-06 text-gray] Live Code Presenting with Annotations @snapend @snap[south span-100] @[1](Socket.IO enables real-time, bidirectional, event-based communication.) @[2,3](Tweet Stream is node module that connects to the public twitter stream.) @[5-10](To process interesting Tweets, simply register a custom handler.) @snapend Results in the rendering of the following slide:\n Tip! For best results, always Snap your Code Annotations to the south-position on your slides.\n To understand this markdown snippet, see the live code fragment syntax description.\nLive Code Presenting Example with Pro Code Zoom The following sample slide demonstrates live code presenting with Pro Code Zoom .\n This sample slide provides a quick introduction to Live Code Presenting with Code ZOOM. To learn about the full set of Code ZOOM features see the Pro Code Zoom Guide .\n Live Code Presenting Fragment Syntax Live code presenting fragments allow you to step-into code on your slides using standard slideshow navigation. Each code-fragment is given sharp-focus while surrounding code is automatically blurred.\nThe basic code-fragment syntax is as follows:\n@[fragment-range] Where fragment-range identifies a range of one or more line numbers within the code-block that you want focused-and-highlighted on the slide.\nFor example, to identify just the first line in a code-block as a fragment-range use:\n@[1] To identify a multi-line fragment-range covering the second, third, and fourth lines in a code-block use the following syntax:\n@[2-4] To identify two or more non-contiguous slices of code within a single fragment-range, use the following syntax:\n@[3,5-7,9] An optional annotation can be added to any code-fragment as follows:\n@[3-6,9](Your custom message for display while fragment is visible goes here.) It is strongly recommended that you use Snap Layouts to snap code-fragments with annotations to the south-position on your slides as follows:\n@snap[south span-100] @[3-6,9](Your custom message for display while fragment is visible goes here.) @snapend Snapping code-fragments with annotations to the south-position on your slides ensures you make optimal use of the space on any slide that is simultaneously displaying code and related annotations.\n"
},
{
	"uri": "https://gitpitch.com/docs/markdown-features/widgets/",
	"title": "Markdown Widgets",
	"tags": [],
	"description": "",
	"content": " GitPitch provides a number of unique syntax shortcuts supported by PITCHME.md markdown that can be used to generate rich visual components - aka. widgets - on any slide.\n @box - Boxed Text Widget  @box - Boxed Text With Title Widget  @quote - Quote Widget  @quote - Quote With Attribution Widget  @fa - Font Awesome 5 Icon Widget  @gitlink - Git Repo Link Widget  @diff - Git Diff Widget  @snap - Snap Layouts Widget    Note: Markdown Widgets are supported by gitpitch.com , GitPitch Desktop , and GitPitch Enterprise . These widgets are not part of the GitPitch open source project .\n Boxed Text Widget The Boxed Text Widget renders text within a box to let you highlight or emphasize the content on your slide. The widget is created using the following @box syntax in your PITCHME.md markdown file:\n@snap[west span-40] @box[bg-gold text-white rounded box-padding](What is GitPitch?) @snapend @snap[east span-50] @box[bg-green rounded box-padding](A *modern* PowerPoint uniquely adapted for Developers on Git.) @snapend This markdown snippet renders as follows:\nThe visual appearance of the text and the box itself can be customized as needed. In the above example a number of the built-in CSS utility styles were used to customize the background color, text color, and the rendered-style for the box. In addition, the example also made use of a custom CSS style called box-padding. That custom style was defined as follows:\n.box-padding #boxed-text { padding-top: 2em; padding-bottom: 2em; } The box-padding class was used to control the vertical height of the box by overriding the default padding around the text rendered inside the box. Overriding the default padding in this way is entirely optional.\nBoxed Text With Title Widget The Boxed Text-with-Title Widget is a simple extension of the basic Boxed Text Widget . As before, this widget lets you highlight or emphasize text on your slide. Using this widget the box also displays a custom title.\nThe widget is created using the following @box syntax in your PITCHME.md markdown file:\n---?color=black @snap[north-west span-35] @box[bg-green text-white box-padding](1. Plan#Lorem ipsum dolor sit amet eiusmod) @snapend @snap[north-east span-35] @box[bg-orange text-white rounded box-padding](2. Build#Sed do eiusmod tempor labore) @snapend @snap[south-east span-35] @box[bg-pink text-white box-padding](3. Measure#Cupidatat non proident sunt in) @snapend @snap[south-west span-35] @box[bg-blue text-white waved box-padding](4. Repeat#Ut enim ad minim veniam prodient) @snapend @snap[midpoint] @fa[refresh fa-3x] @snapend This markdown snippet renders as follows:\nNote, the box-with-title syntax depends on a simple convention where a # delimiter is used to separate the title from the text within the @box tag. This syntax convention is generalized as follows:\n@box[class...](title # text) You can also see from the above sample markdown, the @box tag ships with three distinct box rendering styles: the default, rounded, and waved.\nThe appearance of the text and the box itself can be further customized as needed. In the above example a number of the built-in CSS utility styles were used to customize the background color, text color, and the rendered style for the box. In addition, the example also made use of a custom CSS style called box-padding. That custom style was defined as follows:\n.box-padding #boxed-text { padding-top: 1.8em; padding-bottom: 2.3em; } The box-padding class was used to control the vertical height of the box by overriding the default padding around the text rendered inside the box. Overriding the default padding in this way is entirely optional.\nQuote Widget The Quote Widget renders a nicely styled quotation on your slide. The widget is created using the following @quote syntax in your PITCHME.md markdown file:\n@snap[north-east span-65] @quote[Beware of geeks bearing formulas.] @snapend This markdown snippet renders as follows:\nQuote With Attribution Widget The Quote With Attribution Widget is a simple extension of the basic Quote Widget . As before, this widget lets render a nicely style quotation on your slide. Using this widget the rendering includes source attribution for the quote.\nThe widget is created using the following @quote syntax in your PITCHME.md markdown file:\n@snap[north-east span-20] @quote[It\u0026#39;s what I do that defines me.](Bruce Wayne) @snapend This markdown snippet renders as follows:\nFont Awesome 5 Icon Widget The Font Awesome 5 Widget renders pixel-perfect icons on your slides. Enjoy up to 2000 beautifully rendered icons for use within any slideshow.\nFor further details, see the Font Awesome 5 Icons Guide .\nGit Repo Link Widget The Git Repo Link Widget renders a direct link to any file within your repository on GitHub, GitLab, or Bitbucket in the cloud. The widget is created using the following @gitlink syntax in your PITCHME.md markdown file:\n@gitlink[TEXT](path/to/repo/file.ext) For example, assuming there is an install/README.md file within the same branch as your presentation, you can use the following markdown shortcut syntax to link to that file:\nYou can find additional documentation @gitlink[here](install/README.md). This link to your repository in the cloud will automatically open on the same branch as the presentation itself.\n"
},
{
	"uri": "https://gitpitch.com/docs/git/branch-shared-markdown/",
	"title": "Modular Markdown",
	"tags": [],
	"description": "",
	"content": " Developers are accustomed to writing code in a modular fashion. Modularity is achieved using distinct functions, files, and directories to partition code in meaningful ways. This approach typically improves code clarity and aids modifications and maintenance over time.\nGitPitch supports this same modular approach for presentation markdown and associated image assets, settings, and custom css.\n Learn By Example  The Modular Markdown Slide Delimiter  Example: Modular HTML5 Training Slideshow  Example: Modular Localized Slideshow Content  Example: Modular Audience Specific Slideshow Content   1. Learn By Example This PITCHME.md markdown snippet:\n## Modular Markdown Demo  ---?include=meetup/intro/PITCHME.md ---?include=meetup/topics/PITCHME.md ---?include=meetup/call-to-action/PITCHME.md Results in the rendering of a slideshow presentation that includes the following slides:\n Every slide defined in the top-level PITCHME.md file plus Every slide defined in the intro, topics, and call-to-action markdown files.   Any included markdown files can contain an unlimited number of slides using the standard slide delimiters and full GitPitch features.\n 2. The Modular Markdown Slide Delimiter The include delimiter is used to import modular markdown content into a top-level PITCHME.md markdown file for a given presentation. The delimiter takes a relative path to any markdown file found within your repository. Paths must be relative to the root directory of the repository.\n---?include=path/to/topic/PITCHME.md  The include delimiter can only be used in top-level PITCHME.md markdown file for a given presentation. Any markdown file that has been included can not itself use the include delimiter to include further files.\n 3. Example: Modular HTML5 Training Slideshow The following example demonstrates a modular approach to delivering training course materials for an introduction to HTML5. The file and directory structure recognizes the inherently modular nature of the course content.\nLet\u0026rsquo;s assume our HTML5 training course provides an introduction to the key HTML5 technologies: HTML, CSS, and JavaScript. We can use the following directory and file structure for our slideshow content in the repository:\n. ├── PITCHME.md | ├── PITCHME.yaml | ├── common │ ├── about │ │ └── PITCHME.md │ └── contact │ └── PITCHME.md | └── training | └── topics | ├── css | | │ ├── PITCHME.md | | │ ├── selectors │ │ └── PITCHME.md | | │ └── syntax │ └── PITCHME.md | ├── html | | │ ├── PITCHME.md | | │ ├── attributes │ │ └── PITCHME.md | | │ └── tags │ └── PITCHME.md | └── js | ├── PITCHME.md | ├── callbacks │ └── PITCHME.md └── objects └── PITCHME.md Slides for each major topic and sub-topic can be maintained within topic-specific PITCHME.md markdown files under the course/topics directory.\nThe top-level PITCHME.md in the directory structure can then use the modular markdown slide delimiter to merge all sub-topics into a comprehensive HTML5 training slideshow, for example:\n# HTML5 Training Course ---?include=course/common/greeting/PITCHME.md ---?include=course/topics/html/PITCHME.md ---?include=course/topics/html/tags/PITCHME.md ---?include=course/topics/html/attributes/PITCHME.md ---?include=course/topics/css/PITCHME.md ---?include=course/topics/css/syntax/PITCHME.md ---?include=course/topics/css/selectors/PITCHME.md ---?include=course/topics/js/PITCHME.md ---?include=course/topics/js/objects/PITCHME.md ---?include=course/topics/js/callbacks/PITCHME.md ---?include=course/common/contact-me/PITCHME.md Adopting this modular approach when managing slideshow content delivers all of the benefits typically associated with modular design: improved clarity, greater consistency, and simplified maintenance.\nThis modular approach to managing and maintaining slideshow content also lends itself perfectly to delivering Modular Slideshows .\n4. Example: Modular Localized Slideshow Content The following example demonstrates a modular approach to delivering localized slideshow content in order to deliver a single slide deck in multiple languages. The file and directory structure takes advantage of the inherently modular nature of language-specific versus language-independent slideshow content.\nLet’s assume our goal is to create a slide deck that can be delivered in English, Spanish, French, and Japanese. We can use the following directory and file structure for our slideshow content in the repository:\n. ├── PITCHME.yaml | ├── assets | │ ├── css │ │ └── PITCHME.css | | │ └── img │ ├── humor.gif │ ├── logo.png │ └── overview.jpg | └── slides | ├── en │ └── PITCHME.md | ├── es │ └── PITCHME.md | ├── fr │ └── PITCHME.md | ├── jp │ └── PITCHME.md | └── shared | ├── architecture.md ├── contact.md └── thank-you.md Adopting this modular approach to managing slideshow content delivers all of the benefits typically associated with modular design: improved clarity, greater consistency, and simplified maintenance.\nIn this example, each set of language-specific slides are maintained within clearly differentiated language directories:\n└── slides | ├── en │ └── PITCHME.md ├── es │ └── PITCHME.md ├── fr │ └── PITCHME.md └── jp └── PITCHME.md While language-indepenent slides and common assets such as images, settings, and even custom css are maintained independently as follows:\n. ├── PITCHME.yaml | ├── assets | │ ├── css │ │ └── PITCHME.css | | │ └── img │ ├── humor.gif │ ├── logo.png │ └── overview.jpg | └── slides | └── shared | ├── architecture.md ├── contact.md └── thank-you.md To present this slideshow for a specific language, simply identify the chosen language [ en, es, fr, jp ] as a query parameter on the slideshow URL. For example, to present in French:\nhttps://gitpitch.com/acmecorp/demo?p=slides/fr Alternatively, to present the same slideshow presentation in Japanese:\nhttps://gitpitch.com/acmecorp/demo?p=slides/jp This modular approach to managing and maintaining slideshow content also lends itself perfectly to delivering Modular Slideshows .\n5. Example: Modular Audience Specific Slideshow Content The modular approach demonstrated by the Localized Slideshow Content example above can be used to deliver all kinds of slide decks that need to deliver custom variations of slide content for specific audiences.\nFor example, this same approach can be used to deliver a slide deck that introduces an API. Rather than Spanish, French, and Japenese specific slides, this same modular approach can be used to deliver Java, Elixir, and Go specific slides for the same API.\nTo present this slideshow for a specific programming language audience, simply identify the chosen language [ java, elixir, go ] as a query parameter on the slideshow URL. For example, to present at an Elixir conference or meetup:\nhttps://gitpitch.com/acmecorp/api?p=slides/elixir "
},
{
	"uri": "https://gitpitch.com/docs/layout-features/snap-layouts-example-1/",
	"title": "Snap Layouts Example 1",
	"tags": [],
	"description": "",
	"content": " Snap Layouts Learn By Example  Step 1. Initial Markdown  Step 2. Slide Content Sizing   This guide demonstrates the use of GitPitch Snap Layouts to create the following sample slide.\nStep 1. Initial Markdown The initial markdown snippet for our sample slide looks as follows:\n### GraphQL @fa[quote-left](A query language for your API) ![GRAPHQL](assets/img/graphql.png) The only new markdown in this snippet that may be unfamiliar to you is the use of the Font Awesome Markdown Widget . This markdown snippet renders as follows:\nSomething is not quite right. Specifically, the image is overflowing the slide. Based on what we learned about aspect ratios in the Snap Layouts Syntax Guide we quickly realize that the sample image does not match the aspect ratio of our slide.\nStep 2. Slide Content Sizing This step updates the markdown to let us control the horizontal and vertical height of the snapped content to fit within the bounds of our sample slide.\nTo prevent content overflowing the slide we can wrap our sample markdown block in snap-tags and specify a custom span-xxx property value to control the width and height of the snapped content within the bounds of the space available on our slide.\n@snap[midpoint span-40] ### GraphQL @fa[quote-left](A query language for your API) ![GRAPHQL](assets/img/graphql.png) @snapend This final markdown snippet renders as follows:\nMuch better. As a general rule, you may need to play around with the span-xxx property value until you find the correct sizing for your specific slide content.\nWhile this is a simple slide design it demonstrates an effective solution to a common issue when working with arbitrary image content within GitPitch slide decks. Check out the next Snap Layouts Example for tips on how to achieve more sophisticated slide layouts.\n"
},
{
	"uri": "https://gitpitch.com/docs/speaker-features/demo-gods/",
	"title": "Speaker Demo Gods",
	"tags": [],
	"description": "",
	"content": " If you have ever given a live presentation at a conference or meetup then you know only too well that the number of problems you experience with your slides, microphone, remote control device, etc. is directly proportional to the size and importance of your audience ;-)\nGitPitch understands your pain. And offers the following pain-killers for common scenarios:\n When you can present your slides using your own Laptop   When you must present your slides using the Conference Laptop  When you must present your slides as Microsoft PowerPoint PPTX or PDF   When you can present your slides using your own Laptop Depending on the conference Wifi to serve your slides reliably when standing on stage in front of a live audience can be a little like walking a tightrope without the benefit of a safety net. While possible. It is rarely recommended.\nBreaking all dependencies on the conference Wifi and network connections in general is one great way to keep the demo gods at bay. And for this, GitPitch offers comprehensive offline support.\nGitPitch Desktop is a dedicated desktop tool for working and presenting offline. It can be used to develop, preview, and present slides offline. With zero dependencies on the network. This makes it the perfect antidote to the demo gods. You can learn more about GitPitch Desktop here .\nWhen you must present your slides using the Conference Laptop There are times when a conference organizer will insist that you present your slides using a dedicated conference laptop that is pre-configured and pre-connected to the conference audio and display systems.\nIn these circumstances you rarely have the luxury of installing your own presentation software, such as GitPitch Desktop , on their device. Which typically means you will be downloading your slideshow over the network to the conference laptop prior to going on stage. More often than not, during a pre-conference A/V check.\nIf this is the situation you are likely to face then it is important that you understand a little about GitPitch lazy-loading policies. These policies apply to the loading of slideshow assets, such as images and videos that you display on your slides.\nBy default, GitPitch uses a lazy-loading strategy for slideshow assets. This means that only a small number of the images used by your slideshow are loaded when you first open your slideshow in your browser. Only when you start moving through your slides, GitPitch detects upcoming slides that need to display image assets and it will automatically fetch those images. You can think of this as a just-in-time loading strategy for your slideshow assets.\nThis strategy makes a lot of sense when you are sharing your slideshows online. But in the context of a live slideshow presentation when you first load your slides during an A/V check potentially hours before going live on stage, this just-in-time strategy may leave you exposed to the demo gods if the network goes down at any point after your initial check.\nFor this eventuality, GitPitch supports an eager-loading slideshow setting. It can be activated in the PITCHME.yaml for any presentation as follows:\neager-loading : true When activated, this setting ensures that all slideshow assets are loaded over the network when you first open your presentation in the browser. This greatly reduces the risk inherent in unreliable conference Wifi when you are live on-stage.\n Note, this approach still runs the risk of the browser on the conference laptop evicting your slideshow asset dependencies from the browser cache before you go live on-stage. For this reason, this eager-loading approach is only recommended if you can not export and present your slide deck as PTTX or PDF.\n When you must present your slides as Microsoft PowerPoint PPTX or PDF Sometimes conference organizers will insist all slideshow presentations be submitted ahead of time as Microsoft PowerPoint (PPTX) or PDF files. GitPitch Pro users can use Desktop Pro to export your slide deck as a Microsoft PowerPoint slideshow or PDF.\nFor further details, see the Desktop Pro Guide .\n"
},
{
	"uri": "https://gitpitch.com/docs/themes/custom-fonts/",
	"title": "Theme Custom Fonts",
	"tags": [],
	"description": "",
	"content": "  Activate a GitPitch Paid Plan to unlock Custom Fonts support.\n Custom font support lets presentation authors accurately reflect the brand of any project, conference, or business within GitPitch slide decks. Licensed commercial fonts and free Web fonts can be used including Google Web Fonts .\n  This guide describes how you can activate custom fonts for your slide decks.\n Download Custom Fonts Woff or Woff2  Register Custom Fonts in your PITCHME.yaml  Activate Custom Fonts using the Theme Builder  Optionally Activate Custom Fonts Manually   Custom fonts are managed directly alongside other asset dependencies for your slide decks directly within your Git repository.\n1. Download Custom Fonts Woff or Woff2 Download your custom font files and add them as asset depedencies for your slide deck. Both woff and woff2 file formats are supported.\nFor example, the following directory structure shows a sample slide deck with custom font dependencies:\n. ├── assets │ ├── css │ │ └── PITCHME.css │ │ │ ├── fonts │ │ ├── Aladin.woff2 │ │ ├── Black-Ops.woff2 │ │ ├── Londrina-Outline.woff │ │ └── Permanent-Marker.woff2 │ │ │ └── img │ └── logo.png │ ├── PITCHME.md └── PITCHME.yaml 2. Register Custom Fonts in your PITCHME.yaml Register the custom-fonts property in your PITCHME.yaml . This array property lets you register one or more custom fonts for your slide deck.\nThe following snippet shows how to register a single custom font:\ncustom-fonts : [ \u0026#34;assets/fonts/Aladin.woff2\u0026#34; ]  Font paths are relative to the root directory of your Git repository.\n The following snippet shows how to register multiple custom fonts:\ncustom-fonts : [ \u0026#34;assets/fonts/Aladin.woff2\u0026#34;, \u0026#34;assets/fonts/Black-Ops.woff2\u0026#34;, \u0026#34;assets/fonts/Londrina-Outline.woff\u0026#34;, \u0026#34;assets/fonts/Permanent-Marker.woff2\u0026#34; ]  Font paths are relative to the root directory of your Git repository.\n 3. Activate Custom Fonts using the Theme Builder Once your custom fonts have been registered within your PITCHME.yaml you can immediately activate those fonts for headline, byline, and plain text within your slide deck. The fastest way is to use the Theme Builder as shown here:\nThe Theme Builder is automatically aware of registered custom fonts and makes them available alongside the full set of built-in fonts for headline, byline, and plain-text content.\n4. Optionally Activate Custom Fonts Manually If for any reason you prefer not to use the Theme Builder you can activate your custom fonts directly on the following Theme Template settings:\n Theme Headline Setting  Theme Byline Setting  Theme Plain Text Setting   The name of the font family for a custom font is derived directly from the registered filename specified within your PITCHME.yaml file.\nFor example, if you registered assets/fonts/Aladin.woff2 then you would reference this font using the Aladin font-family name. And if you registered assets/fonts/Permanent-Marker.woff2 you would use Permanet-Marker as the font-family name. Note these font-family names are case-sensitive and match exactly the case used when registered.\n Note, custom font filenames must not contain spaces or other special characters.\n "
},
{
	"uri": "https://gitpitch.com/docs/diagram-features/uml-diagrams/",
	"title": "UML Diagram Widget",
	"tags": [],
	"description": "",
	"content": "  Activate a GitPitch Paid Plan to unlock UML Diagram Widget support.\n This guide describes the @uml widget. This widget is a simple markdown syntax that can be used to render PlantUML diagrams on any slide.\n UML Widget Usage Conventions  UML Diagrams Image Manipulations  UML Diagrams Layout Orientation  Learn By Example - Sequence Diagrams  Learn By Example - Activity Diagrams  Learn By Example - State Diagrams  Learn By Example - Timing Diagrams  Learn By Example - Use Case Diagrams  Learn By Example - Object Diagrams  More Examples in the PlantUML Docs    Click here to experience UML Diagrams live in a sample GitPitch slide deck.\n UML Widget Usage Conventions Each diagram is defined using a simple text-based syntax within a dedicated description file. The exact syntax is defined by the PlantUML Project .\nThe following conventions for GitPitch UML diagrams are in use:\n PlantUML diagram descriptions must be defined in a file within your local repository. These PlantUML diagram description files must have a .puml extension. Diagram descriptions must adhere to valid PlantUML syntax.  If you follow these conventions you can then use the following @uml syntax to render a UML diagram on any slide:\n@uml[props, style...](path/to/diagram.puml) The props value accepts a comma-separated list of valid image manipulation properties . The CSS style\u0026hellip; list can be used to activate custom styles or build-in styles on the rendered image.\nUML Diagrams Image Manipulations The full set of GitPitch supported inline image manipulation properties can be activated on your PlantUML diagrams. For example, the following markdown snippet:\n@uml[width=750, rotate=-25](src/plant/demo.puml) Results in the rendering of the following slide:\nThese manipulations include image sizing, opacity controls, filters, transformations, behaviors, and more. For details see the Inline Image Manipulations Guide .\nUML Diagrams Layout Orientation By default, PlantUML diagram entities are rendered in a top-to-bottom layout. For any diagram with more than a couple of entities this typically results in tall-and-thin UML diagrams. For example:\nGiven the aspect ratio of GitPitch slides is 16:9 there are times when activating an left-to-right layout for your diagrams makes sense. Doing so lets you to take advantage of the full width of your slides. You can activate a left-to-right layout for any UML diagram by adding a direction instruction directly following the opening @startuml tag, as follows:\n@startuml left to right direction . . . @enduml When activated, this same sample UML diagram is rendered as follows:\nLearn By Example - Sequence Diagrams This PlantUML sequence diagram syntax:\n@startuml actor Alice #yellow participant Bob Alice-\u0026gt;Bob: Auth Request Bob-\u0026gt;Alice: Auth Response @enduml Used by the following PITCHME.md markdown snippet:\n---?color=#E58537; @snap[west span-60] @code[uml rawcode zoom-15](src/uml/sequence.puml) @snapend @snap[east span-40] @uml[span-100 bg-white](src/uml/sequence.puml) @snapend @snap[south-west span-100] @[1,6](Start with opening and closing PlantUML delimiters.) @[2,3](Declare participants, actors, boundaries, etc.) @[4,5](Then define the messages between participants.). @snapend Results in the rendering of the following slide:\n Click here to view this slide with a live GitPitch presentation.\n For further details about Sequence Diagrams syntax see the following PlantUML Guide .\nLearn By Example - Activity Diagrams This PlantUML activity diagram syntax:\n@startuml start if (Graphviz installed?) then (yes) :Process all\\ndiagrams; else (no) :Process only __sequence__ and __activity__ diagrams; endif stop @enduml Used by the following PITCHME.md markdown snippet:\n---?color=#E58537; @snap[west span-50] @code[uml rawcode zoom-09](src/uml/activity.puml) @snapend @snap[east span-50] @uml[span-100 bg-white](src/uml/activity.puml) @snapend @snap[south-west span-100] @[1,14](Start with opening and closing PlantUML delimiters.) @[3,12](Declare activity diagram start and stop states.) @[5,7,10](Use *if*, *then*, and *else* keywords to define logical branches.) @[6,8-9](Then define a process for each branch path in the activity diagram.) @snapend Results in the rendering of the following slide:\n Click here to view this slide within a live GitPitch presentation.\n For further details about Activity Diagrams syntax see the following PlantUML Guide .\nLearn By Example - State Diagrams This PlantUML state diagram syntax:\n@startuml hide empty description [*] --\u0026gt; State1 State1 --\u0026gt; [*] State1 : this is a string State1 : this is another string State1 -\u0026gt; State2 State2 --\u0026gt; [*] @enduml Used by the following PITCHME.md markdown snippet:\n---?color=#E58537; @uml[span-45 bg-white](src/uml/state.puml) Results in the rendering of the following slide:\n Click here to view this slide within a live GitPitch presentation.\n For further details about State Diagrams syntax see the following PlantUML Guide .\nLearn By Example - Timing Diagrams This PlantUML timing diagram syntax:\n@startuml robust \u0026quot;Web Browser\u0026quot; as WB concise \u0026quot;Web User\u0026quot; as WU @0 WU is Idle WB is Idle @100 WU is Waiting WB is Processing @300 WB is Waiting @enduml Used by the following PITCHME.md markdown snippet:\n---?color=#E58537; @snap[west span-45] @code[uml rawcode zoom-11](src/uml/timing.puml) @snapend @snap[east span-55] @uml[span-100 bg-white](src/uml/timing.puml) @snapend Results in the rendering of the following slide:\n Click here to view this slide within a live GitPitch presentation.\n For further details about Timing Diagrams syntax see the following PlantUML Guide .\nLearn By Example - Use Case Diagrams This PlantUML use-case diagram syntax:\n@startuml :Main Admin: as Admin (Use the application) as (Use) User -\u0026gt; (Start) User --\u0026gt; (Use) Admin ---\u0026gt; (Use) note right of Admin : This is an example. note right of (Use) A note can also be on several lines end note note \u0026quot;Note connected\\nto several objects.\u0026quot; as N2 (Start) .. N2 N2 .. (Use) @enduml Used by the following PITCHME.md markdown snippet:\n---?color=#E58537; @uml[span-75 bg-white](src/uml/usecase.puml) Results in the rendering of the following slide:\n Click here to view this slide within a live GitPitch presentation.\n For further details about Use Case Diagrams syntax see the following PlantUML Guide .\nLearn By Example - Object Diagrams This PlantUML object diagram syntax:\n@startuml object Object01 object Object02 object Object03 object Object04 object Object05 object Object06 object Object07 object Object08 Object01 \u0026lt;|-- Object02 Object03 *-- Object04 Object05 o-- \u0026quot;4\u0026quot; Object06 Object07 .. Object08 : some labels @enduml Used by the following PITCHME.md markdown snippet:\n---?color=#E58537; @uml[span-90 bg-white](src/uml/object.puml) Results in the rendering of the following slide:\n Click here to view this slide within a live GitPitch presentation.\n For further details about Object Diagrams syntax see the following PlantUML Guide .\nMore Examples in the PlantUML Docs PlantUML supports a wide range of diagram types. You can learn further details and see numerous examples of each diagram type in the official PlantUML guides:\n Sequence Diagrams Guide  Usecase Diagrams Guide  Class Diagrams Guide  Activity Diagrams Guide  Component Diagrams Guide  State Diagrams Guide  Object Diagrams Guide  Deployment Diagrams Guide  Timing Diagrams Guide  MindMap Diagrams Guide   "
},
{
	"uri": "https://gitpitch.com/docs/markdown-features/list-widgets/",
	"title": "Markdown List Widgets",
	"tags": [],
	"description": "",
	"content": " This guide introduces GitPitch list widgets, a special syntax for activating custom styles and custom behaviors for markdown list content on your slides.\n @ul - Unordered List Widget  @ol - Ordered List Widget  List Widget Slide Fragments Behavior  List Widget Built-In Styles Activation  List Widget Custom Styles Activation  List Widget Speaker Mode Fragment Behaviors  List Widget Speaker Mode Fragment Notes     Unordered List Widget Syntax To activate a list widget on unordered list content simply wrap any standard markdown list block in opening @ul and closing @ulend tags as shown here:\n@ul - Markdown - Modular - Git Native - Speaker Ready - Cross Platform @ulend This markdown snippet is rendered as follows:\nAs you can see the widget automatically activates slide fragments for your list content. To understand and control this behavior, see the section on Widget Slide Fragment Behaviors .\nThe widget can also wrap unordered nested list content as shown here:\n@ul - Markdown - GFM - Widgets - Git Native - GitHub - GitLab - Bitbucket - Cross Platform - Linux - MacOS - Windows 10 @ulend  You must indent nested list content using 4 spaces in your markdown file.\n This same widget can also wrap a mix of unordered list content with nested ordered content as shown here:\n@ul - Markdown 1. GFM 1. Widgets - Git Native 1. GitHub 1. GitLab 1. Bitbucket - Cross Platform 1. Linux 1. MacOS 1. Windows 10 @ulend  You must indent nested list content using 4 spaces in your markdown file.\n Ordered List Widget Syntax To activate a list widget on ordered list content simply wrap any standard markdown list block in opening @ol and closing @olend tags as shown here:\n@ol 1. Markdown 1. Modular 1. Git Native 1. Speaker Ready 1. Cross Platform @olend This markdown snippet is rendered as follows:\nAs you can see the widget automatically activates slide fragments for your list content. To understand and control this behavior, see the section on Widget Slide Fragment Behaviors .\nThis widget can also wrap ordered nested list content as shown here:\n@ol 1. Markdown 1. GFM 1. Widgets 1. Git Native 1. GitHub 1. GitLab 1. Bitbucket 1. Cross Platform 1. Linux 1. MacOS 1. Windows 10 @olend  You must indent nested list content using 4 spaces in your markdown file.\n This same widget can also wrap a mix of ordered list content with nested unordered content as shown here:\n@ol 1. Markdown - GFM - Widgets 1. Git Native - GitHub - GitLab - Bitbucket 1. Cross Platform - Linux - MacOS - Windows 10 @olend  You must indent nested list content using 4 spaces in your markdown file.\n List Widget Slide Fragments Behavior By default, list widgets activate slide fragments behavior for your list content. Causing each item in your list to be revealed step-by-step on your slide:\nYou can disable this default behavior, for example, when you are using the widget for the sole purpose of activating custom style properties on your list content. To disable the default slide fragments behavior specify false as the value on the widget as shown here:\n@ol[...](false) - Markdown - Modular - Git Native - Speaker Ready - Cross Platform @olend Note, in the above snippet custom properties on the widget are represented by the ... ellipsis. The following snippet is a concrete demonstration of the list widget being used to display static list content with custom style properties:\n@ol[text-17 text-bold font-quicksand](false) - Markdown - Modular - Git Native - Speaker Ready - Cross Platform @olend This markdown snippet renders as follows:\nAs you can see the custom properties on the widget have activated custom styles for the list content while slide fragments have been disabled so the content has been rendered statically on the slide.\nList Widget Built-In Styles Activation GitPitch ships with a wide range of built-in CSS Utility Styles . These styles can be used to override the default styles for your slide deck. By simply referencing these utility styles by name you can quickly customize the appearance of content on any slide, including list content.\nThere are built-in utility styles for a wide range of text colors, font sizes, font styles, even font families. Plus a built-in set of styles that can be used to change the style of bullet icons used by your lists. Details in the CSS Utility Styles Guide .\nThe following markdown snippet demonstrates the activation of a number of these utility styles on a sample slide that uses a list widget:\n@snap[west span-45 text-center] Slide Decks\u0026lt;br\u0026gt;for Developers @snapend @snap[east span-55 text-center] @ul[list-square-bullets list-spaced-bullets font-concert-one text-12 text-italic text-yellow](false) - Markdown - Modular - Git Native - Speaker Ready - Cross Platform @ulend @snapend This markdown snippet is rendered as follows:\nAny combination of built-in and custom CSS styles can be activated on the list widget by specificying the class names as properties on the widget.\nList Widget Custom Styles Activation If you want complete control over the appearance of list content on your slides you can use Custom CSS . For example, the following CSS snippet declares a custom style rule that activates a striped effect using alternating colors on list items:\nul.striped-list-items { color: #001F3F; } ul.striped-list-items \u0026gt; li:nth-child(even){ color: white; } This custom style rule can be activated as a property on a sample list widget as shown here:\n@snap[west span-45 text-center] Slide Decks\u0026lt;br\u0026gt;for Developers @snapend @snap[east span-55 text-center] @ul[list-square-bullets striped-list-items](false) - Markdown - Modular - Git Native - Speaker Ready - Cross Platform @ulend @snapend This markdown snippet is rendered as follows:\nAny combination of built-in and custom CSS styles can be activated on the list widget by specificying the class names as properties on the widget.\nList Widget Speaker Mode Fragment Behaviors If you are a regular speaker at tech conferences or meetups you already understand that simple, distracation free slides allow for a more focused and engaged audience.\nTo help you create simple, distraction free slides GitPitch supports two special behaviors for list content that ensure laser focus for speakers and audiences alike.\nThe first speaker beahvior is called list-hide-fragments and can be activated as a property on a list widget as shown here:\n@snap[west span-45 text-center] Slide Decks\u0026lt;br\u0026gt;for Developers @snapend @snap[east span-55 text-center] @ul[list-spaced-bullets list-hide-fragments] - Markdown - Modular - Git Native - Speaker Ready - Cross Platform @ulend @snapend This markdown snippet is rendered as follows:\nThis behavior causes exlusive focus on one and only one list item on the slide at any given time. All other items in the list are hidden. A great way to focus 100% of your audience\u0026rsquo;s attention on your current talking point.\nThe second speaker beahvior is called list-fade-fragments and can be activated as a property on a list widget as shown here:\n@snap[west span-45 text-center] Slide Decks\u0026lt;br\u0026gt;for Developers @snapend @snap[east span-55 text-center] @ul[list-spaced-bullets list-fade-fragments] - Markdown - Modular - Git Native - Speaker Ready - Cross Platform @ulend @snapend This markdown snippet is rendered as follows:\nThis behavior ensures clear focus is always maintained on the current list item. While previous list items are still visible, but muted. Muted list items provide useful context for your audience without creating an unnecessary distraction on the slide.\nList Widget Speaker Mode Fragment Notes GitPitch slide decks provide extensive speaker support . Including speaker mode fragment notes on the list widget as described here.\nThe following sample slide markdown demonstrates the use of one slide-specific note plus a series of list item fragment-specific speaker notes:\n@ul - Markdown @note[GFM. Plus GitPitch Markdown Widgets.] - Modular @note[Supports modular design of slide decks using modular markdown.] - Git Native @note[Manage slide decks as code. On GitHub, GitLab, and Bitbucket.] - Speaker Ready @note[Dedicated speaker window, previews, timer, speaker notes.] - Cross Platform @note[Available on Linux, MacOS, and Windows 10.] @ulend Note: What makes GitPitch the perfect slide deck solution for developers? This markdown snippet is rendered as follows:\nThis feature gives you list item specifc speaker notes to refer to when you are live on stage. These notes are optional. If a list item does not have it\u0026rsquo;s own custom speaker note, then the slide-specific speaker note is displayed in the speaker window.\n"
},
{
	"uri": "https://gitpitch.com/docs/markdown-features/pro-widgets/",
	"title": "Markdown Pro Widgets",
	"tags": [],
	"description": "",
	"content": "  Activate a GitPitch Paid Plan to unlock Pro Widget support.\n  @code - Code Widget  @gist - GitHub GIST Widget  @emoji - Emoji Widget  @tweet - Tweet Widget  @table - Table Data Widget  @cloud - Cloud Diagram Widget  @uml - UML Diagram Widget  @uml - LaTeX \u0026#43; AsciiMath Widget  @audio - Audio Slide Deck Widget   Code Widget The @code widget supports a wide range of powerful extensions beyond standard code presenting including Code Step-and-Zoom , Code Revealing , and Code Power Properties .\nFor further details, see the Pro Code Widgets Guide .\nGitHub GIST Widget The @gist widget supports a wide range of powerful extensions beyond standard code presenting including Code Step-and-Zoom , Code Revealing , and Code Power Properties .\nFor further details, see the Pro Code Widgets Guide .\nEmoji Widget The @emoji widget supports the rendering of hundreds of different emojis including emojis for people, places, symbols, objects, activities, and foods. Using this widget ensures that your widgets will render properly whether working online, offline, or exporting your slide decks to Microsoft PowerPoint or PDF .\nFor further details see the Pro Emoji Widget Guide .\nTweet Widget The @tweet widget supports the rendering of Tweets on any slide.\nFor further details see the Pro Tweet Widget Guide .\nTable Data Widget The @table widget renders comma-separated and tab-separated file data as tables. It provides a simple and consistent syntax to render table data on any slide.\nFor further details see the Pro Table Data Widget Guide .\nCloud Diagram Widget The @cloud widget supports the creation and rendering of sophisticated cloud system architecture diagrams on any slide. GitPitch Cloud diagram support is powered by Diagrams As Code .\nFor further details see the Cloud Diagram Widget Guide .\nUML Diagram Widget The @uml widget supports the creation of pixel-perfect UML diagrams generated as SVG images from simple text-based descriptions. GitPitch UML diagram support is powered by PlantUML .\nFor further details see the UML Diagram Widget Guide .\nLaTeX + AsciiMath Widget The @uml widget supports some excellent extensions for rendering math formulas on any slide.\nFor further details, see the UML LaTeX \u0026#43; Ascii Math Widget Guide .\nAudio Slide Deck Widget The @audio widget lets you enhance traditional slide decks with the spoken word. By activating a voice-over for individual slides and slide fragments, you can unlock brand new ways to SHARE knowledge, TEACH, and deliver TRAINING materials.\nFor further details, see the Audio Slide Deck Guide .\n"
},
{
	"uri": "https://gitpitch.com/docs/image-features/colors/",
	"title": "Background Colors",
	"tags": [],
	"description": "",
	"content": " Important! Remember to size-optimize your presentation images for the Web.\n Learn By Example   Image delimiter syntax supports a color parameter that gives you the ability to change the color of the exposed area of a slide background for an individual slide.\nBy default, the background color for any slide is determined by the active slideshow theme . Using the color parameter you can change the background color to a custom value for an individual slide. The ability to change the background color can be very useful when you are also scaling - where the background image does not fill the entire area of the slide.\nThe color parameter can take any value that is valid on the background-color css property .\nLearn By Example This PITCHME.md markdown snippet:\n---?image=assets/img/ballerina.jpg\u0026amp;size=auto 75%\u0026amp;position=bottom\u0026amp;color=#b7410e ### @color[white](Fill the background with custom colors for visual pop) Results in the rendering of the following slide:\n Click here to view this slide within a live GitPitch presentation.\n Important! Remember to size-optimize your presentation images for the Web.\n"
},
{
	"uri": "https://gitpitch.com/docs/code-features/syntax-highlighting/",
	"title": "Code Highlighting",
	"tags": [],
	"description": "",
	"content": " Code syntax highlighting is a feature that controls the visual appearance of code rendered on your slides. GitPitch currently supports 185 programming languages and 89 distinct visual styles.\n Introducing Code Highlighting  Code Highlighting Sample Slides     Introducing Code Highlighting By activating the highlight setting in your PITCHME.yaml for your slide deck you can activate a custom syntax highlighting style for code rendered on your slides.\nCode Highlighting Sample Slides The following series of screenshots use the same sample code block to demonstrate a small number of the available syntax highlighting styles available to GitPitch presentation authors:\n"
},
{
	"uri": "https://gitpitch.com/docs/enterprise/config/",
	"title": "Config GitPitch Enterprise",
	"tags": [],
	"description": "",
	"content": "  Server Log Production Configuration  Server Log Debug Configuration  Activate Personal Access Tokens  HTTPS/SSL Certificate Configuration  HTTPS/SSL Using PEM Certificates  HTTPS/SSL Using JKS Certificates   Server Log Production Configuration The following production log configuration instructs the GitPitch server to write all log statements to a file called gitpitch-server-production.log in your Docker volume directory. Logging to standard out is disabled.\n\u0026lt;configuration\u0026gt; \u0026lt;conversionRule conversionWord=\u0026quot;coloredLevel\u0026quot; converterClass=\u0026quot;play.api.libs.logback.ColoredLevel\u0026quot; /\u0026gt; \u0026lt;appender name=\u0026quot;FILE\u0026quot; class=\u0026quot;ch.qos.logback.core.rolling.RollingFileAppender\u0026quot;\u0026gt; \u0026lt;file\u0026gt;/data/gitpitch-server-production.log\u0026lt;/file\u0026gt; \u0026lt;rollingPolicy class=\u0026quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy\u0026quot;\u0026gt; \u0026lt;fileNamePattern\u0026gt;/data/gitpitch-server-production.log-%d{yyyy-ww}\u0026lt;/fileNamePattern\u0026gt; \u0026lt;maxHistory\u0026gt;30\u0026lt;/maxHistory\u0026gt; \u0026lt;/rollingPolicy\u0026gt; \u0026lt;encoder\u0026gt; \u0026lt;pattern\u0026gt;%date %coloredLevel %logger{15} - %message%n%xException{10}\u0026lt;/pattern\u0026gt; \u0026lt;/encoder\u0026gt; \u0026lt;/appender\u0026gt; \u0026lt;appender name=\u0026quot;ASYNCFILE\u0026quot; class=\u0026quot;ch.qos.logback.classic.AsyncAppender\u0026quot;\u0026gt; \u0026lt;appender-ref ref=\u0026quot;FILE\u0026quot; /\u0026gt; \u0026lt;/appender\u0026gt; \u0026lt;logger name=\u0026quot;com.gitpitch\u0026quot; level=\u0026quot;INFO\u0026quot; additivity=\u0026quot;false\u0026quot;\u0026gt; \u0026lt;appender-ref ref=\u0026quot;ASYNCFILE\u0026quot; /\u0026gt; \u0026lt;/logger\u0026gt; \u0026lt;logger name=\u0026quot;play\u0026quot; level=\u0026quot;INFO\u0026quot; /\u0026gt; \u0026lt;root level=\u0026quot;WARN\u0026quot;\u0026gt; \u0026lt;appender-ref ref=\u0026quot;ASYNCFILE\u0026quot; /\u0026gt; \u0026lt;/root\u0026gt; \u0026lt;/configuration\u0026gt; To activate production logging, copy the above configuration block and use it to replace the existing content within the gitlog.xml file in your Docker Volume Directory . The small icon in the top-right of the block provides a convenient one-click copy to your clipboard.\nServer Log Debug Configuration The following debug log configuration instructs the GitPitch server to generate verbose log output. This configuration is provided to help gather the log data required to debug startup and runtime problems with your GitPitch Enterprise instance. Typically you will only need to activate this configuration when requested to do so by us.\nAll log statements are written to a file called gitpitch-server-debug.log in your Docker volume directory. Logging to standard out is disabled.\n\u0026lt;configuration\u0026gt; \u0026lt;conversionRule conversionWord=\u0026quot;coloredLevel\u0026quot; converterClass=\u0026quot;play.api.libs.logback.ColoredLevel\u0026quot; /\u0026gt; \u0026lt;appender name=\u0026quot;FILE\u0026quot; class=\u0026quot;ch.qos.logback.core.rolling.RollingFileAppender\u0026quot;\u0026gt; \u0026lt;file\u0026gt;/data/gitpitch-server-debug.log\u0026lt;/file\u0026gt; \u0026lt;rollingPolicy class=\u0026quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy\u0026quot;\u0026gt; \u0026lt;fileNamePattern\u0026gt;/data/gitpitch-server-debug.log-%d{yyyy-ww}\u0026lt;/fileNamePattern\u0026gt; \u0026lt;maxHistory\u0026gt;30\u0026lt;/maxHistory\u0026gt; \u0026lt;/rollingPolicy\u0026gt; \u0026lt;encoder\u0026gt; \u0026lt;pattern\u0026gt;%date %coloredLevel %logger{15} - %message%n%xException{10}\u0026lt;/pattern\u0026gt; \u0026lt;/encoder\u0026gt; \u0026lt;/appender\u0026gt; \u0026lt;appender name=\u0026quot;ASYNCFILE\u0026quot; class=\u0026quot;ch.qos.logback.classic.AsyncAppender\u0026quot;\u0026gt; \u0026lt;appender-ref ref=\u0026quot;FILE\u0026quot; /\u0026gt; \u0026lt;/appender\u0026gt; \u0026lt;logger name=\u0026quot;com.gitpitch\u0026quot; level=\u0026quot;DEBUG\u0026quot; additivity=\u0026quot;false\u0026quot;\u0026gt; \u0026lt;appender-ref ref=\u0026quot;ASYNCFILE\u0026quot; /\u0026gt; \u0026lt;/logger\u0026gt; \u0026lt;logger name=\u0026quot;play\u0026quot; level=\u0026quot;INFO\u0026quot; /\u0026gt; \u0026lt;root level=\u0026quot;WARN\u0026quot;\u0026gt; \u0026lt;appender-ref ref=\u0026quot;ASYNCFILE\u0026quot; /\u0026gt; \u0026lt;/root\u0026gt; \u0026lt;/configuration\u0026gt; To activate debug logging, copy the above configuration block and use it to replace the existing content within the gitlog.xml file in your Docker Volume Directory . The small icon in the top-right of the block provides a convenient one-click copy to your clipboard.\nActivate Personal Access Tokens The GitPitch Enterprise runtime can be configured to use personal access tokens aka PAT for individual Git accounts using an optional external configuration file, called tokens.yaml.\n When a PAT is activated, a presentation author using the corresponding account can publish public slideshow presentations from both public and priviate repositories on the Git server.\n For example, the following sample tokens.yaml file contains tokens for three distinct Git accounts:\ndavid : 0d5f871a56be7ba345d0f89b0f270950cda1be11 devops : 65c13fd1035046fedf7b531c2f820f6ff9caa336 maya : 11030045fe6fcd5460b3e537351ba7fa3149a466 As a GitPitch Enterprise administrator, you can activate personal access tokens for an unlimited number of accounts on your Git server. The tokens.yaml file must be added to your Docker Volume Directory .\nAfter copying the tokens.yaml configuration file, the contents of your Docker volume directory should look as follows:\n├── gitpitch.conf |── gitlog.xml |── tokens.yaml Note, these file names are case-sensitive. Also note, you will need to restart a running server in order to pick-up modifications to these files.\nHTTPS/SSL Certificate Configuration To configure GitPitch Enterprise to serve HTTPS requests you must add additional configuration to your external configuration file, gitpitch.conf .\nThis HTTPS/SSL specific configuration specifies the following properties:\n Identifies the type of SSL certificate store - PEM or JKS Identifies the path to your SSL certificates file Identifies an optional password for your SSL certificates file  The path to your SSL certificates file must be specified using an absolute /data path as shown in the sample pem and jks configuratons that follow.\nThis /data path maps to the Docker Volume Directory on your Linux server. To activate HTTPS/SSL for the server your certs.pem or certs.jks certificates file must be deployed into the Docker Volume Directory alongside your gitpitch.conf configuration file.\nHTTPS/SSL Using PEM Certificates play.ws { # # Reference documentation: # https://www.playframework.com/documentation/latest/WsSSL # ssl { trustManager = { stores = [ { type = \u0026quot;PEM\u0026quot;, path = \u0026quot;/data/certs.pem\u0026quot; } ] } # # Optional - JSSE debug activation for troubleshooting. #debug.handshake = true # } } Note 1. The path property must be specified using an absolute /data path as shown above. This path maps to Docker Volume Directory on your Linux server. HTTPS/SSL Using JKS Certificates play.ws { # # Reference documentation: # https://www.playframework.com/documentation/latest/WsSSL # ssl { trustManager = { stores = [ { type = \u0026quot;JKS\u0026quot;, path = \u0026quot;/data/certs.jks\u0026quot;, password = \u0026quot;changeit\u0026quot; } ] } # # Optional - JSSE debug activation for troubleshooting. #debug.handshake = true # } } Note 1. The path property must be specified using an absolute /data path as shown above. This path maps to Docker Volume Directory on your Linux server.\n"
},
{
	"uri": "https://gitpitch.com/docs/layout-features/",
	"title": "Custom Layouts",
	"tags": [],
	"description": "",
	"content": "Chapter 5 Custom Layouts Powered by Markdown Snap Layouts\n"
},
{
	"uri": "https://gitpitch.com/docs/pro-features/surveys/",
	"title": "GitPitch Pro Surveys",
	"tags": [],
	"description": "",
	"content": " About  Activate a GitPitch Paid Plan to unlock Pro Cloud Surveys.\n Pro Surveys turn any online slideshow into a two-way conversation. Deliver your message using a GitPitch slideshow presentation. Then gather feedback from your audience by seamlessly embedding a professional survey directly inside your slidedeck.\nSurveys let you gather feedback from your audience long after you leave the stage.\n JotForm Surveys  SurveyMonkey Surveys  Google Forms Surveys   JotForm Surveys Powered by JotForm .\nTo activate a JotForm survey on a slide within a GitPitch presentation use a surveyslide delimiter. For example:\n---?survey=https://form.jotform.me/81050187195456 The direct linkto your JotForm survey can be found within the JotForm dashboard in your browser. Under the Publishtab for your survey.\nThe surveyslide delimiter takes an optional colorquery parameter. It can be used to customize the color of the slide background visible around the survey form. For example:\n---?survey=https://form.jotform.me/81050187195456\u0026amp;color=yellow The colorquery parameter can take any value that is valid on a GitPitch colorslide delimiter. More details found here.\nSurveyMonkey Surveys Powered by SurveyMonkey .\nTo activate a SurveyMonkey survey on a slide within a GitPitch presentation use a surveyslide delimiter. For example:\n---?survey=https://www.surveymonkey.com/r/B73FNQK The web linkto your SurveyMonkey survey can be found within the SurveyMonkey dashboard in your browser. Under the Collect Responsestab for your survey.\nThe surveyslide delimiter takes an optional colorquery parameter. It can be used to customize the color of the slide background visible around the survey form. For example:\n---?survey=https://www.surveymonkey.com/r/B73FNQK\u0026amp;color=yellow The colorquery parameter can take any value that is valid on a GitPitch colorslide delimiter. More details found here.\nGoogle Forms Surveys Powered by Google Forms .\nTo activate a Google Forms survey on a slide within a GitPitch presentation use a surveyslide delimiter. For example:\n---?survey=https://docs.google.com/forms/d/e/1FAIpQLSe/viewform The form linkto your Google Forms survey can be found within the Google Forms dashboard in your browser. Open your survey, then click the Sendbutton. Within the pop-up window, click the Send vialink option. Then copy and use the link displayed in your browser.\nThe surveyslide delimiter takes an optional colorquery parameter. It can be used to customize the color of the slide background visible around the survey form. For example:\n---?survey=https://docs.google.com/forms/d/e/1FAIpQLSe/viewform\u0026amp;color=yellow The colorquery parameter can take any value that is valid on a GitPitch colorslide delimiter. More details found here.\n"
},
{
	"uri": "https://gitpitch.com/docs/diagram-features/graphviz-diagrams/",
	"title": "Graphviz/DOT Diagrams",
	"tags": [],
	"description": "",
	"content": "  Activate a GitPitch Paid Plan to unlock Graphviz/Dot Diagrams.\n The UML Widget powered by PlantUML makes use of Graphviz/DOT Visualization Software for rendering under the hood. This guide describes how you can leverage Graphviz/Dot support directly to generate sophisticated graphs on any slide.\n Graphviz/Dot Usage Conventions  Learn by Example - A  Learn by Example - B  Learn by Example - C  Learn by Example - D  Graphviz/Dot Diagrams GitPitch Caching Policy   Graphviz/Dot Widget Usage Conventions The conventions required to use Graphviz/Dot diagrams are as follows:\n Graphviz/Dot diagram descriptions must be defined in a file within your local repository. These Graphviz/Dot diagram description files must have a .puml extension. Diagram descriptions must adhere to valid PlantUML Dot syntax.  If you follow these conventions you can then use the following @uml syntax to render a Graphviz/Dot diagram on any slide:\n@uml[style...](path/to/graph.puml) The CSS style\u0026hellip; list can make use of any custom styles you define. It can also make use of the built-in span styles giving you control over the rendering width and height of your Graphviz/Dot diagrams.\nNote, if you are developing your slide decks using GitPitch Desktop then be aware of the current caching policy for your Graphviz/Dot diagrams.\nLearn By Example - A This sample diagram was generated using the following PUML/Dot syntax:\n@startdot digraph foo { node [style=rounded, width=1, margin=\u0026quot;0,0\u0026quot;]; Supervisory [shape=house, width=1]; Workstation [label=\u0026quot;Engineering/\\nTechnician\\nWorkstation\u0026quot;, style=dotted, color=red, fontcolor=red]; Controller [fillcolor=yellow, style=\u0026quot;rounded,filled\u0026quot;, shape=diamond, height=1]; Actuators [shape=box]; cl [label=\u0026quot;Control\\nLoop\u0026quot;, shape=none, fontcolor=forestgreen, style=bold, fontsize=18]; Sensors [shape=box]; Process [shape=doublecircle, width=1]; {rank=same; Supervisory; Workstation}; Supervisory:s -\u0026gt; Controller:n [dir=both, weight=9]; Controller -\u0026gt; cl -\u0026gt; Process [weight=9, style=invis]; Controller -\u0026gt; Actuators:n [taillabel=\u0026quot;output\u0026quot;, labeldistance=3]; {rank=same; Actuators; cl; Sensors}; Actuators:s -\u0026gt; Process [headlabel=\u0026quot;changes\u0026quot;, labeldistance=3, labelangle=35]; Process -\u0026gt; Sensors:s [weight=5, taillabel=\u0026quot;measures\u0026quot;, labeldistance=3.2, labelangle=-35]; Sensors:n -\u0026gt; Controller [weight=5, headlabel=\u0026quot;input\u0026quot;, labeldistance=3, labelangle=25]; Supervisory -\u0026gt; Workstation [dir=back, style=dotted, minlen=5, color=red]; Controller -\u0026gt; Workstation [dir=back, style=dotted, color=red]; Actuators:nw -\u0026gt; Workstation [weight=0, dir=back, style=dotted, color=red]; cl -\u0026gt; Workstation [weight=2, style=invis]; Sensors:ne -\u0026gt; Workstation [weight=3, dir=back, style=dotted, color=red]; } @enddot Learn By Example - B This sample diagram was generated using the following PUML/Dot syntax:\n@startuml digraph G { node [shape=record, fillcolor=lightgrey, style=\u0026quot;filled,rounded\u0026quot;] capture [label=\u0026quot;Traffic Capture\u0026quot;] capture -\u0026gt; analyze subgraph cluster0 { label = \u0026quot;Same as\\nNetwork Capture Assessment\u0026quot; labeljust = left style = \u0026quot;filled,rounded\u0026quot; color = deepskyblue analyze [label=\u0026quot;Endpoint and Flow Analysis\u0026quot;] analyze:0 -\u0026gt; known:n analyze:1 -\u0026gt; unknown:n known [label=\u0026quot;Known Protocol Analysis\u0026quot;] unknown [label=\u0026quot;Unknown Protocol Decode\u0026quot;] } known:s -\u0026gt; enum:0 unknown:s -\u0026gt; enum:1 enum [label=\u0026quot;Protocol Enumeration\u0026quot;] enum -\u0026gt; fuzz fuzz [label=\u0026quot;Protocol Fuzzing\u0026quot;] fuzz -\u0026gt; exploit exploit [label=\u0026quot;Protocol Exploitation\u0026quot;] } @enduml Learn By Example - C This sample diagram was generated using the following PUML/Dot syntax:\n@startuml digraph structs { node [shape=record]; write [label=\u0026quot;\\\u0026gt; | \u0026lt;0\u0026gt;0xA0 | \u0026lt;1\u0026gt;0x00 | \u0026lt;2\u0026gt;0xBE | \u0026lt;3\u0026gt;0xEF | \u0026lt;4\u0026gt;...\u0026quot;, fillcolor=lightgrey, style=filled]; write:0 -\u0026gt; command:4; command [label=\u0026quot;\u0026lt;0\u0026gt;1|\u0026lt;1\u0026gt;0|\u0026lt;2\u0026gt;1|\u0026lt;3\u0026gt;0|\u0026lt;4\u0026gt;0|\u0026lt;5\u0026gt;0|\u0026lt;6\u0026gt;0|\u0026lt;7\u0026gt;0\u0026quot;, fillcolor=whitesmoke, style=filled]; command:0 -\u0026gt; chip:0; command:1 -\u0026gt; chip:1; command:2 -\u0026gt; chip:2; command:3 -\u0026gt; chip:3; chip [label=\u0026quot;Chip\\nAddress\u0026quot;]; command:4 -\u0026gt; memblock:0; command:5 -\u0026gt; memblock:1; command:6 -\u0026gt; memblock:2; memblock [label=\u0026quot;{Memory Blocks | 000 = Block 0\\n001 = Block 1\\n010 = Block 2\\n011 = Block 3\\n100 = Block 4\\n101 = Block 5\\n110 = Block 6\\n111 = Block 7}\u0026quot;]; command:7 -\u0026gt; rw; rw [label=\u0026quot;Write = 0\\nRead = 1\u0026quot;]; write:1 -\u0026gt; address; address [label=\u0026quot;Memory\\nLocation\u0026quot;]; write:2 -\u0026gt; data:0; write:3 -\u0026gt; data:1; write:4 -\u0026gt; data:2; data [label=\u0026quot;Bytes to Write\\n(max of write buffer)\\n(none to move pointer)\u0026quot;]; } @enduml Learn By Example - D This sample diagram was generated using the following PUML/Dot syntax:\n@startuml skinparam monochrome true skinparam shadowing false skinparam sequenceArrowThickness 2 skinparam roundcorner 10 skinparam sequenceReferenceAlign center participant \u0026quot;ModbusTCP Client\u0026quot; as TcpClient participant \u0026quot;ModbusTCP Server\u0026quot; as TcpServer participant \u0026quot;vs\u0026quot; participant \u0026quot;ModbusTCP Client\u0026quot; as UdpClient participant \u0026quot;ModbusTCP Server\u0026quot; as UdpServer group ModbusTCP Connection Establishment TcpClient o-\u0026gt; TcpServer: TCP SYN (Synchronize) TcpServer -\u0026gt; TcpClient: TCP SYN ACK (Acknowledge) TcpClient -\u0026gt; TcpServer: TCP ACK end group ModbusTCP vs ModbusUDP Payload TcpClient -\u0026gt; TcpServer : ModbusTCP Request TcpClient \u0026lt;- TcpServer : TCP ACK UdpClient -\u0026gt; UdpServer : ModbusUDP Request TcpServer -\u0026gt; TcpClient : ModbusTCP Response TcpServer \u0026lt;- TcpClient : TCP ACK UdpClient \u0026lt;- UdpServer : ModubsUDP Response end group ModbusTCP Connection Teardown TcpClient -\u0026gt; TcpServer: TCP FIN (Finalize) TcpClient \u0026lt;- TcpServer: TCP FIN or FIN ACK TcpClient \u0026lt;-- TcpServer: TCP ACK TcpClient -\u0026gt;x TcpServer: TCP ACK End @enduml Graphviz/Dot Diagrams GitPitch Caching Policy Test-based Graphviz/Dot diagram descriptions maintained within local repository files are converted to SVG images at runtime. This means whether you are developing or sharing a slide deck there can be a small rendering overhead due to the time taken to convert the text-based description to an image.\nTo ensure this processing overhead does not unduly interfere with smooth development workflows, in particular within GitPitch Desktop , each generated SVG image is cached for up to 60 seconds.\nThis means if you make changes to any Graphviz/Dot description file you may not see those changes reflected on your slides for up to 60 seconds.\n"
},
{
	"uri": "https://gitpitch.com/docs/the-template/horizontal-slide-designs/",
	"title": "Horizontal BG Slide Designs",
	"tags": [],
	"description": "",
	"content": " To reproduce any of the slide background designs shown in this guide simply copy-and-paste the corresponding markdown snippet directly into the PITCHME.md for your GitPitch slide deck.\n Click the small icon in the top-right corner of any markdown block below to copy the markdown snippet.\n All of the markdown snippets that follow in this guide make use of GitPitch color slide delimiters . Each snippet displays placeholder colors and content. You can replace these placeholder values with custom values as appropriate to your slide deck.\nTip! Background Slide Design Templates If you find a background slide design here that you would like to set as the base design for every slide in your deck, you can activate the design globally using the Theme Template Background Property .\nHorizontal Slide Design A ---?color=linear-gradient(180deg, white 25%, black 25%) @snap[north span-100] # @fa[laptop-code text-gold] @snapend @snap[south span-100 h1-white] # Aaaaaa @snapend  Note, the laptop icon that appears on this slide is placeholder content, rendered by the Font Awesome Widget . It is intended that you replace this sample markdown content with your custom slide content.\n Horizontal Slide Design B ---?color=linear-gradient(180deg, white 33.33%, #1F6ED4 33.33%) @snap[north span-100] # @fa[laptop-code text-black] @snapend @snap[south span-100 h1-white] # Bbbbbb @snapend  Note, the laptop icon that appears on this slide is placeholder content, rendered by the Font Awesome Widget . It is intended that you replace this sample markdown content with your custom slide content.\n Horizontal Slide Design C ---?color=linear-gradient(180deg, white 50%, #005f6b 50%) @snap[north span-100] # @fa[laptop-code fa-2x text-black] @snapend @snap[south span-100 h1-white] # Cccccc @snapend  Note, the laptop icon that appears on this slide is placeholder content, rendered by the Font Awesome Widget . It is intended that you replace this sample markdown content with your custom slide content.\n Horizontal Slide Design D ---?color=linear-gradient(180deg, white 66.66%, #1F6ED4 33.33%) @snap[north span-100] # @fa[laptop-code fa-2x text-black] @snapend @snap[south span-100 h2-white] ## Dddddd @snapend  Note, the laptop icon that appears on this slide is placeholder content, rendered by the Font Awesome Widget . It is intended that you replace this sample markdown content with your custom slide content.\n Horizontal Slide Design E ---?color=linear-gradient(180deg, white 75%, black 25%) @snap[north span-100] # @fa[laptop-code fa-3x text-gold] @snapend @snap[south span-100 h2-white] ## Eeeeee @snapend  Note, the laptop icon that appears on this slide is placeholder content, rendered by the Font Awesome Widget . It is intended that you replace this sample markdown content with your custom slide content.\n "
},
{
	"uri": "https://gitpitch.com/docs/settings/logo/",
	"title": "Logo Setting",
	"tags": [],
	"description": "",
	"content": " Purpose The logo setting lets you use a custom logo to brand every slide in your presentation.\nSample Syntax logo : assets/img/logo.png Details  Slideshow settings are activated using a PITCHME.yaml properties file.\n The logo setting supports both relative and absolute paths to the image file.\nBy default your logo will be displayed in the top-left corner of every slide. However, you can change the position of your logo by specifying a logo-position setting alongside the logo setting.\nGitPitch currently supports the following logo positions:\n top-left (default) top-right bottom-left bottom-right  Sample Logo Position logo : assets/img/logo.png logo-position : top-right The logo-position setting must be used in conjunction with the logo setting. It has no effect if you have not specified a value for the logo setting.\nLogo Interaction with Controls Layout Setting If the logo position setting is activated using the bottom-right position then the controls layout setting is automatically set to display using the edges layout.\n"
},
{
	"uri": "https://gitpitch.com/docs/markdown-features/image-manipulation/",
	"title": "Markdown Pro Images",
	"tags": [],
	"description": "",
	"content": "  Activate a GitPitch Paid Plan to unlock Pro Image support.\n This guide introduces powerful Pro image-manipulation techniques that can be applied to inline images on any slide.\n Image Sizing  Image Opacity  Image Filters  Image 2D Transformations  Image 3D Transformations  Image Fragment Behaviour  Image Custom Styles  Image Title Text      For even more image manipulation features see the Background Images Guide .\n Image Sizing You can control the width and height of any inline image using the width and height directives. These directives accept pixel values only. Specifying the px unit identifier on the value is optional.\nThe following markdown snippet demonstrates valid uses of these directives:\n![width=800](assets/img/yoda.jpg) --- ![height=250px](assets/img/chewbacca.png) --- ![width=500, height=400](assets/img/hansolo.gif)  Note, use comma-separated values to specify multiple directives on an image.\n If only width or only height is specified the other dimension is automatically scaled to preserve the original aspect ratio of the image.\nImage Opacity You can control the opacity of any inline image using the opacity directive. This directive accepts any value greater than 0.0 and less than or equal to 1.0. The lower the value the more transparent your image.\nThe following markdown snippet demonstrates valid uses of this directive:\n![opacity=0.3](assets/img/yoda.jpg) --- ![width=400, opacity=0.75](assets/img/chewbacca.png) --- ![opacity=0.5](assets/img/hansolo.gif)  Note, use comma-separated values to specify multiple directives on an image.\n Image Filters You can activate visual-effect filters on any inline image using the filter directive. This directive currently supports the following filter values:\n Blur Bright Contrast Grayscale Hue Invert Saturate Sepia  The following markdown snippet demonstrates valid uses of the image filter directive:\n![filter=blur](assets/img/yoda.jpg) --- ![width=250, filter=grayscale](assets/img/chewbacca.png) --- ![height=400, filter=sepia](assets/img/hansolo.gif)  Note, use comma-separated values to specify multiple directives on an image.\n Image 2D Transformations You can control the 2D rotation of any inline image using the rotate directive. This directive accepts any positive or negative angle value between 0 and 360 degrees. Specifying the deg unit identifier on the value is optional.\nThe following markdown snippet demonstrates valid uses of the image rotate directive:\n![rotate=45](assets/img/yoda.jpg) --- ![width=400, filter=sepia, rotate=-60deg](assets/img/chewbacca.png) --- ![opacity=0.6, rotate=230](assets/img/hansolo.gif)  Note, use comma-separated values to specify multiple directives on an image.\n Image 3D Transformations You can control the 3D rotation of any inline image on the x-axis and y-axis using the skewx and skewy directives. These directives accept any positive or negative angle value between 0 and 360 degrees. Specifying the deg unit identifier on the value is optional.\nThe following markdown snippet demonstrates valid uses of the image skew directives:\n![skewx=-15](assets/img/yoda.jpg) --- ![width=300, height=300, skewy=40deg](assets/img/chewbacca.png) --- ![filter=saturate, skewx=20, skewy=-35](assets/img/hansolo.gif)  Note, use comma-separated values to specify multiple directives on an image.\n Image Fragment Behavior You can activate markdown fragment behavior on any inline image using the fragment property. The following markdown snippet demonstrates valid uses of the image fragment property:\n![fragment](assets/img/yoda.jpg) --- ![skewy=40deg, fragment](assets/img/chewbacca.png) --- ![width=500, filter=grayscale, fragment](assets/img/hansolo.gif)  Note, use comma-separated values to specify multiple directives on an image.\n Image Custom Styles You can activate one or more Custom CSS Styles on any inline image by specifying your custom style names as properties. For example, assuming you have defined custom-shadow and custom-border styles the following markdown snippet demonstrates valid uses of those styles:\n![custom-shadow](assets/img/yoda.jpg) --- ![skewy=40deg, custom-border fragment](assets/img/chewbacca.png) --- ![filter=grayscale, custom-shadow custom-border](assets/img/hansolo.gif)  Note, use comma-separated values to specify multiple directives and use space-separated values to specify multiple properties on an image.\n Image Title Text To specify image title text alongside image directives or properties you can use the title directive. The following markdown snippet demonstrates valid uses of the image title directive:\n![YODA](assets/img/yoda.jpg) --- ![rotate=35, title=Baby Yoda!](assets/img/baby-yoda.jpg) --- ![filter=contrast, title=Star Wars, fragment](assets/img/death-star.gif)  Note, use comma-separated values to specify multiple directives on an image.\n "
},
{
	"uri": "https://gitpitch.com/docs/auxiliary-features/slideshow-embedding/",
	"title": "Slideshow Embedding",
	"tags": [],
	"description": "",
	"content": " GitPitch slideshow presentations can be seamlessly embedded within all of the major blogging platforms - including WordPress, Blogger, Tumblr, and Medium.\nTo embed your slideshow presentation in a blog post or website use the GitPitch Embed.ly Provider .\nFor further details, see the following blog post .\n"
},
{
	"uri": "https://gitpitch.com/docs/layout-features/snap-layouts-example-2/",
	"title": "Snap Layouts Example 2",
	"tags": [],
	"description": "",
	"content": " Snap Layouts Learn By Example  Step 1. Initial Markdown  Step 2. Vertical Split Screen  Step 3. Boxed Title-and-Text  Step 4. Colored Boxed Title-and-Text   This guide demonstrates the use of GitPitch Snap Layouts to create the following sample slide.\nStep 1. Initial Markdown The initial markdown snippet for the west of our sample slide looks as follows:\n@snap[west span-40 text-center] ### GraphQL @fa[quote-left](A query language for your API) ![GRAPHQL](assets/img/graphql.png)G @snapend This markdown snippet renders as follows:\nThe use of the span-40 property controls the width and height of the snapped content, ensuring it fits within the west bounds of our slide. For a more detailed discussion of content sizing see this Snap Layouts Example .\nThe use of the text-center property sets a custom alignment for the snapped content creating a nice centered stack. By default, the following content alignment rules are active on the grid:\n Content in west grid-positions are automatically text-left aligned. Content in central grid-positions are automatically text-center aligned. Content in east grid-positions are automatically text-right aligned.  The full set of built-in alignment properties are documented in the CSS Utility Styles Guide .\nStep 2. Vertical Split Screen This step updates our markdown to deliver the split-screen effect for our sample slide:\n---?color=linear-gradient(90deg, white 50%, black 50%) @snap[west span-40 text-center] ### GraphQL @fa[quote-left quote-graphql](A query language for your API) ![GRAPHQL](assets/img/graphql.png) @snapend This intermediate markdown snippet renders as follows:\nThis effect is achieved by activating a color gradient on a color delimiter for the sample slide.\nStep 3. Boxed Title-and-Text This step updates our markdown to deliver the boxed title-and-text in the east of our sample slide:\n---?color=linear-gradient(90deg, white 50%, black 50%) @snap[west span-40 text-center] ### GraphQL @fa[quote-left quote-graphql](A query language for your API) ![GRAPHQL](assets/img/graphql.png) @snapend @snap[north-east span-40 text-08] @box[](Step 1. Schema # Define types using SDL) @snapend @snap[east span-40 text-08] @box[](Step 2. Query # Fetch data with Queries) @snapend @snap[south-east span-40 text-08] @box[](Step 3. Mutate # Modify data with Mutations) @snapend The updated markdown in this snippet makes use of the Boxed Text Widget . It also makes use of built-in Text Font Size Styles to customize the size of the text appearing in the Boxed Text Widgets. This intermediate markdown snippet renders as follows:\nStep 4. Colored Boxed Title-and-Text This final step updates our markdown to deliver the colored boxed title-and-text in the east of our sample slide:\n---?color=linear-gradient(90deg, white 50%, black 50%) @snap[west span-40 text-center] ### GraphQL @fa[quote-left quote-graphql](A query language for your API) ![GRAPHQL](assets/img/graphql.png) @snapend @snap[north-east span-40 text-08] @box[bg-green](Step 1. Schema # Define types using SDL) @snapend @snap[east span-40 text-08] @box[bg-blue](Step 2. Query # Fetch data with Queries) @snapend @snap[south-east span-40 text-08] @box[bg-gold](Step 3. Mutate # Modify data with Mutations) @snapend The updated markdown snippet makes use of the bg-green, bg-blue, and bg-gold properties on the Boxed Text Widgets to add a splash of color. These are just some of the built-in Background Color Styles available to all GitPitch presentation authors. And of course, as a GitPitch presentation author you can always define your own custom background colors .\nThis final markdown snippet renders as follows:\nCheck out the next Snap Layouts Example for more tips and tricks including the display of code within the snap-layouts grid.\n"
},
{
	"uri": "https://gitpitch.com/docs/rich-media-features/table-data/",
	"title": "Table Data Widget",
	"tags": [],
	"description": "",
	"content": "  Activate a GitPitch Paid Plan to unlock Table Data Widget support.\n  @table - Table Data Widget  Working with Table Data Headers  Working with Table Data Fragments  Working with Tabbed Table Data  Working with Custom Table Styles  Sizing Tables with Text Properties  Positioning Tables with Snap Layouts     Table Data Widget The @table widget renders comma-separated and tab-separated file data as tables. It provides a simple and consistent syntax to render table data on any slide:\n@table[property...](path/to/sample.csv) The widget accepts zero or more CSS property values that can be used to control the size and appearance of your table. The sections that follow demonstrate the use of properties for common use-cases when working with the @table widget.\nThe following markdown snippet demonstrates how table data is rendered by the @table widget using the default table styles associated with the fixed theme for your slide deck:\n@table[](path/to/sample.csv) This sample markdown snippet renders as follows:\nWorking with Table Data Headers The first row in a comma-separated or tab-separated data file may contain header information. If your data file contains header information activate the built-in table-header property on your @table widget as follows:\n@table[table-header](path/to/sample.csv) This markdown snippet renders as follows:\nYou can further customize the appearance of your table headers and data rows using Custom Table Styles .\nWorking with Table Data Fragments When you need to introduce each row of data in your table step-by-step activate the built-in table-fragment property on your @table widget as follows:\n@table[table-header table-fragment](path/to/sample.csv) This markdown snippet renders as follows:\nWorking with Tabbed Table Data By default, the @table widgets expects comma-separated values in your files. If your data file uses tab delimiters instead, activate the built-in table-tsv property on your widget as follows:\n@table[table-header table-tsv](path/to/sample.tsv) This markdown snippet renders as follows:\nWorking with Custom Table Styles To activate custom table styles for your @table widget data you can define custom CSS styles and then activate those styles as properties on your widgets. For example, see the following sample custom CSS style rules:\ntable.custom-header th { font-variant: small-caps; } table.custom-row tr:nth-child(even) { background-color: #f2f2f2; } table.custom-spacing th, table.custom-spacing td { padding: 15px; } These sample custom styles rules are designed to modify the appearance of a table as follows:\n Table headings are rendered using a small-caps font variant. Table rows are rendered using alternating striped backgrounds using custom color. Table header and table data padding is set to a custom 15px size per style rule.  These custom CSS style rules can be activated as properties on a @table widget as follows:\n@table[table-header custom-header custom-row custom-spacing](path/to/sample.csv) This markdown snippet render as follows:\nThe use of custom CSS style rules to customize the appearance of tables generated by the @table widget is entirely optional. Default table styling is determined by the fixed theme for your slide deck.\nSizing Tables with Text Properties Using standard markdown syntax to create and maintain table data quickly becomes unwieldy after just a few rows of data. The @table widget provides a simple, consistent syntax to work with table data of any size. But your table data still has to fit on the space available on your slides.\nThe built-in Text Font Size Properties can be activated on the @table widget to control the size of any table on your slides. For example, the following markdown snippet renders data from a large file:\n@table[table-header text-05](path/to/sample-large.csv) This markdown snippet render as follows:\nThe screenshot on the left shows how the default rendering of the large data file overflows the slide. The screenshot on the right shows how with the simple activation of the text-05 property on the @table widget allowed us to fit the table data on our slide.\n Note, the @table widget will render up to a maximum of 20 rows of data. Any rows beyond this max limit found in your data file are simply ignored.\n Positioning Tables with Snap Layouts Data rendered by the @table widget can be positioned on your slides using snap-layouts . For example, see the following markdown snippet:\n@snap[west span-25] Table Data Widget Demo @snapend @snap[east span-70] @table[table-header custom-header custom-spacing text-06](path/to/sample.csv) @snapend The use of the built-in east and span-70 properties on the @snap tag positions the table within the east of the snap-layouts grid . The additional use of the text-06 property on the @table widget itself sizes the table content to fit cleanly within this area of the slide. This markdown snippet renders as follows:\n"
},
{
	"uri": "https://gitpitch.com/docs/themes/css-utility-styles/",
	"title": "Theme Utility Styles",
	"tags": [],
	"description": "",
	"content": "  Span (Width) Styles  Text Color Styles  Text Font Size Styles  Text Font Weight Styles  Text Font Family Styles  Text Alignment Styles  Heading Color Styles  Background Color Styles  List Bullet Styles  Override Utility Styles    To override any of the utility styles documented in this guide, see overriding utility styles .\n Span (Width) Styles The set of available span-{width} styles can be used to constrain the horizontal-space used by content on your slides. Note, by constraining the horizontal width of specific slide content, the vertical height of that same content is adjusted automatically.\nThe span-{width} styles in the range of 1..100 are currently available out-of-the-box:\n.span-1 { width: 1% !important } .span-2 { width: 2% !important } .span-3 { width: 3% !important } .span-4 { width: 4% !important } .span-5 { width: 5% !important } .span-6 { width: 6% !important } .span-7 { width: 7% !important } .span-8 { width: 8% !important } .span-9 { width: 9% !important } .span-10 { width: 10% !important } .span-11 { width: 11% !important } .span-12 { width: 12% !important } .span-13 { width: 13% !important } .span-14 { width: 14% !important } .span-15 { width: 15% !important } . . . .span-95 { width: 95% !important } .span-96 { width: 96% !important } .span-97 { width: 97% !important } .span-98 { width: 98% !important } .span-99 { width: 99% !important } .span-100 { width: 100% !important } The span-{width} styles can be applied to a wide range of content types on your slides. The most frequent use-case for these styles is to control the width of content within different regions on the slide when you are using snap-layouts . But the span-{width} styles are also very useful when working with list content, and inline images as the following examples demonstrate.\nExample: Snap-Layouts Span Style Activation The following markdown snippet demonstrates standard snap-layouts syntax where span-{width} styles have been activated to constrain the width of content in each snap-region:\n +++?color=black @snap[west span-45] # Step by Step @snapend @snap[north-east span-60] @box[bg-purple text-white](Step 1.#Lorem ipsum dolor sit amet, consectetur adipiscing elit.) @snapend @snap[east span-60] @box[bg-orange text-white](Step 2.#Sed do eiusmod tempor incididunt ut labore ut enim ad.) @snapend @snap[south-east span-60] @box[bg-pink text-white](Step 3.#Cupidatat non proident sunt in culpa officia veniam quis.) @snapend The following screenshot shows the slide generated by the sample markdown snippet:\nThe above screenshot demonstrates how the text content in the western region of the slide has been constrained by the span-45 style while the width of the boxed content in the eastern regions have all been constrained by the span-60 style.\nExample: List Content Span Style Activation The following markdown snippet demonstrates Markdown List Widget Syntax :\n---?color=linear-gradient(to top, #a1c4fd, #c2e9fb) @ol - Lorem ipsum dolor sit amet, consectetur elit - Ut enim ad minim veniam, quis exercitation - Duis aute irure in reprehenderit in voluptate @olend The following markdown snippet demonstrates the same list shortcut syntax where a span style has been activated to constrain the width of the list content on the slide:\n---?color=linear-gradient(to top, #a1c4fd, #c2e9fb) @ol[span-50] - Lorem ipsum dolor sit amet, consectetur elit - Ut enim ad minim veniam, quis exercitation - Duis aute irure in reprehenderit in voluptate @olend The following screenshots show the slides generated by the above sample markdown snippets:\nWhile the list content is identical on both slides, the space given to rendering the list content on the second slide is controlled by the activation of the span-50 style.\nExample: Inline Image Span Style Activation The following markdown snippet demonstrates standard image shortcut syntax :\n---?color=linear-gradient(to top, #93a5cf, #e4efe9) @snap[west] ## Earthrise @snapend @snap[east] @img[](template/img/moon.jpg) @snapend The following markdown snippet demonstrates the same image shortcut syntax where a span style has been activated to constrain the width of the inline image on the slide:\n---?color=linear-gradient(to top, #93a5cf, #e4efe9) @snap[west] ## Earthrise @snapend @snap[east] @img[span-65](template/img/moon.jpg) @snapend The following screenshots show the slides generated by the above sample markdown snippets:\nWhile the slide content is similar on both slides, the space given to rendering the inline image on the second slide is controlled by the activation of the span-65 style.\nText Color Styles The set of available text-{color} styles can be used to set custom colors for plain text rendered on your slides.\nThe following text-{color} styles are currently available out-of-the-box:\n.text-black { color: #000000 !important; } .text-blue { color: #4487F2 !important; } .text-gray { color: #777777 !important; } .text-green { color: #8EA33B !important; } .text-orange { color: #F26225 !important; } .text-gold { color: #E58537 !important; } .text-pink { color: #E71E60 !important; } .text-purple { color: #643B85 !important; } .text-yellow { color: #F5DB2E !important; } .text-white { color: #FFFFFF !important; } For example, the following sample markdown demonstrates the use of text-{color} styles in a number of distinct use-cases:\n---?color=linear-gradient(to top, #868f96, #596164) @snap[north text-gold] GitPitch @snapend @css[text-white](The Markdown Presentation Service on Git) @snap[south text-black span-100] For Everyone on GitHub, GitLab, and Bitbucket. @snapend This markdown snippet renders as follows:\nText Font Size Styles The set of available text-{size} styles can be used to change the font size of plain text rendered on your slides. Sizes represent CSS em values.\nThe following text-{size} styles are currently availableo ut-of-the-box:\n.text-01 { font-size: 0.1em !important; } .text-02 { font-size: 0.2em !important; } .text-03 { font-size: 0.3em !important; } .text-04 { font-size: 0.4em !important; } .text-05 { font-size: 0.5em !important; } .text-06 { font-size: 0.6em !important; } .text-07 { font-size: 0.7em !important; } .text-08 { font-size: 0.8em !important; } .text-09 { font-size: 0.9em !important; } .text-10 { font-size: 1.0em !important; } .text-11 { font-size: 1.1em !important; } .text-12 { font-size: 1.2em !important; } .text-13 { font-size: 1.3em !important; } .text-14 { font-size: 1.4em !important; } .text-15 { font-size: 1.5em !important; } .text-16 { font-size: 1.6em !important; } .text-17 { font-size: 1.7em !important; } .text-18 { font-size: 1.8em !important; } .text-19 { font-size: 1.9em !important; } .text-20 { font-size: 2.0em !important; } .text-21 { font-size: 2.1em !important; } .text-22 { font-size: 2.2em !important; } .text-23 { font-size: 2.3em !important; } .text-24 { font-size: 2.4em !important; } .text-25 { font-size: 2.5em !important; } .text-30 { font-size: 3.0em !important; } .text-35 { font-size: 3.5em !important; } .text-40 { font-size: 4.0em !important; } .text-45 { font-size: 4.5em !important; } .text-50 { font-size: 5.0em !important; } For example, the following sample markdown demonstrates the use of text-{size} styles in a number of distinct use-cases:\n---?color=linear-gradient(to top, #868f96, #596164) @snap[north text-15 text-gold] GitPitch @snapend @css[text-25 text-white](The Fastest Way from Idea to Presentation) @snap[south text-06 text-gray span-100] For Everyone on GitHub, GitLab, and Bitbucket. @snapend This markdown snippet renders as follows:\nText Font Weight Styles The set of available text-{weight} styles can be used to change the weight or style of plain text rendered on any slide.\nThe following text-{weight} styles are currently available out-of-the-box:\n.text-bold { font-weight: bold !important; } .text-italic { font-style: italic !important; } .text-italics { font-style: italic !important; } .text-uppercase { text-transform: uppercase !important; } .text-lowercase { text-transform: lowercase !important; } .text-capitalize { text-transform: capitalize !important; } .text-smallcaps { font-variant: small-caps !important; } For example, the following sample markdown demonstrates the use of text-{weight} styles in a number of distinct use-cases:\n---?color=linear-gradient(to top, #c79081, #dfa579) @snap[north text-smallcaps text-white] GitPitch @snapend @css[text-bold text-25 text-white](The Fastest Way\u0026lt;br\u0026gt;from\u0026lt;br\u0026gt;Idea to Presentation) @snap[south text-italics text-white span-100] For Everyone on GitHub, GitLab, and Bitbucket. @snapend This markdown snippet renders as follows:\nText Font Family Styles  Note, the Font Family styles are available to decks using the Theme Template only.\n The set of available font-{family-name} styles can be used to activate a custom font family for a specific block of plain-text or list-item text.\nThe font-{family-name}-{weight} styles are currently available out-of-the-box:\n.font-lato { font-family: \u0026#34;Lato\u0026#34; !important; } .font-montserrat { font-family: \u0026#34;Montserrat\u0026#34; !important; } .font-nunito-sans { font-family: \u0026#34;Nunito Sans\u0026#34; !important; } .font-open-sans { font-family: \u0026#34;Open Sans\u0026#34; !important; } .font-oswald { font-family: \u0026#34;Oswald\u0026#34; !important; } .font-poppins { font-family: \u0026#34;Poppins\u0026#34; !important; } .font-prompt { font-family: \u0026#34;Prompt\u0026#34; !important; } .font-quicksand { font-family: \u0026#34;Quicksand\u0026#34; !important; } .font-raleway { font-family: \u0026#34;Raleway\u0026#34; !important; } .font-roboto { font-family: \u0026#34;Roboto\u0026#34; !important; } .font-source-sans-pro { font-family: \u0026#34;Source Sans Pro\u0026#34; !important; } .font-ubuntu { font-family: \u0026#34;Ubuntu\u0026#34; !important; } .font-work-sans { font-family: \u0026#34;Work Sans\u0026#34; !important; } .font-bubblegum { font-family: \u0026#34;Bubblegum\u0026#34; !important; } .font-concert-one { font-family: \u0026#34;Concert One\u0026#34; !important; } .font-righteous { font-family: \u0026#34;Righteous\u0026#34; !important; } .font-lato-medium { font-family: \u0026#34;Lato Medium\u0026#34; !important; } .font-montserrat-medium { font-family: \u0026#34;Montserrat Medium\u0026#34; !important; } .font-nunito-sans-medium { font-family: \u0026#34;Nunito Sans Medium\u0026#34; !important; } .font-open-sans-medium { font-family: \u0026#34;Open Sans Medium\u0026#34; !important; } .font-oswald-medium { font-family: \u0026#34;Oswald Medium\u0026#34; !important; } .font-poppins-medium { font-family: \u0026#34;Poppins Medium\u0026#34; !important; } .font-prompt-medium { font-family: \u0026#34;Prompt Medium\u0026#34; !important; } .font-quicksand-medium { font-family: \u0026#34;Quicksand Medium\u0026#34; !important; } .font-raleway-medium { font-family: \u0026#34;Raleway Medium\u0026#34; !important; } .font-roboto-medium { font-family: \u0026#34;Roboto Medium\u0026#34; !important; } .font-source-sans-pro-medium { font-family: \u0026#34;Source Sans Pro Medium\u0026#34; !important; } .font-ubuntu-medium { font-family: \u0026#34;Ubuntu Medium\u0026#34; !important; } .font-work-sans-medium { font-family: \u0026#34;Work Sans Medium\u0026#34; !important; } .font-lato-heavy { font-family: \u0026#34;Lato Heavy\u0026#34; !important; } .font-montserrat-heavy { font-family: \u0026#34;Montserrat Heavy\u0026#34; !important; } .font-nunito-sans-heavy { font-family: \u0026#34;Nunito Sans Heavy\u0026#34; !important; } .font-open-sans-heavy { font-family: \u0026#34;Open Sans Heavy\u0026#34; !important; } .font-oswald-heavy { font-family: \u0026#34;Oswald Heavy\u0026#34; !important; } .font-poppins-heavy { font-family: \u0026#34;Poppins Heavy\u0026#34; !important; } .font-prompt-heavy { font-family: \u0026#34;Prompt Heavy\u0026#34; !important; } .font-quicksand-heavy { font-family: \u0026#34;Quicksand Heavy\u0026#34; !important; } .font-raleway-heavy { font-family: \u0026#34;Raleway Heavy\u0026#34; !important; } .font-roboto-heavy { font-family: \u0026#34;Roboto Heavy\u0026#34; !important; } .font-source-sans-pro-heavy { font-family: \u0026#34;Source Sans Pro Heavy\u0026#34; !important; } .font-ubuntu-heavy { font-family: \u0026#34;Ubuntu Heavy\u0026#34; !important; } .font-work-sans-heavy { font-family: \u0026#34;Work Sans Heavy\u0026#34; !important; } Each font is made available at regular, medium, and heavy font-weight. For example, font-prompt, font-prompt-medium, and font-prompt-heavy respectively.\nFor example, the following sample markdown demonstrates the use of regular font-{family-name} styles on distinct blocks of text:\n---?color=linear-gradient(180deg, white 50%, #005f6b 50%) @snap[north span-100 font-righteous] Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Donec odio. Quisque volutpat mattis eros. Nullam malesuada erat ut turpis. Suspendisse urna nibh, viverra non, semper suscipit, posuere a, pede. @snapend @snap[south span-100 font-montserrat text-white] Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Donec odio. Quisque volutpat mattis eros. Nullam malesuada erat ut turpis. Suspendisse urna nibh, viverra non, semper suscipit, posuere a, pede. @snapend This markdown snippet renders as follows:\nText Alignment Styles The set of available text-{alighment} styles can be used to change the alignment of text rendered on your slides.\nThe following text-{alignment} styles are currently available out-of-the-box:\n.text-center { text-align: center; } .text-left { text-align: left; } .text-right { text-align: right; } For example, the following sample markdown demonstrates the use of the text-{right} alignment style:\n---?color=linear-gradient(to top, #1e3c72, #2a5298) @snap[midpoint text-right text-white] The Moon Rise @img[](template/img/moon.jpg) @snapend This markdown snippet renders as follows:\nHeading Color Styles The set of available h{level}-{color} styles can be used to set custom colors for markdown headings rendered on your slides.\nThe following h1-{color} styles are currently available out-of-the-box:\n.h1-black h1 { color: #000000 !important; } .h1-blue h1 { color: #4487F2 !important; } .h1-gray h1 { color: #777777 !important; } .h1-green h1 { color: #8EA33B !important; } .h1-orange h1 { color: #F26225 !important; } .h1-gold h1 { color: #E58537 !important; } .h1-pink h1 { color: #E71E60 !important; } .h1-purple h1 { color: #643B85 !important; } .h1-yellow h1 { color: #F5DB2E !important; } .h1-white h1 { color: #FFFFFF !important; } The following h2-{color} styles are currently available out-of-the-box:\n.h2-black h2 { color: #000000 !important; } .h2-blue h2 { color: #4487F2 !important; } .h2-gray h2 { color: #777777 !important; } .h2-green h2 { color: #8EA33B !important; } .h2-orange h2 { color: #F26225 !important; } .h2-gold h2 { color: #E58537 !important; } .h2-pink h2 { color: #E71E60 !important; } .h2-purple h2 { color: #643B85 !important; } .h2-yellow h2 { color: #F5DB2E !important; } .h2-white h2 { color: #FFFFFF !important; } The following h3-{color} styles are currently available out-of-the-box:\n.h3-black h3 { color: #000000 !important; } .h3-blue h3 { color: #4487F2 !important; } .h3-gray h3 { color: #777777 !important; } .h3-green h3 { color: #8EA33B !important; } .h3-orange h3 { color: #F26225 !important; } .h3-gold h3 { color: #E58537 !important; } .h3-pink h3 { color: #E71E60 !important; } .h3-purple h3 { color: #643B85 !important; } .h3-yellow h3 { color: #F5DB2E !important; } .h3-white h3 { color: #FFFFFF !important; } The following h4-{color} styles are currently available out-of-the-box:\n.h4-black h4 { color: #000000 !important; } .h4-blue h4 { color: #4487F2 !important; } .h4-gray h4 { color: #777777 !important; } .h4-green h4 { color: #8EA33B !important; } .h4-orange h4 { color: #F26225 !important; } .h4-gold h4 { color: #E58537 !important; } .h4-pink h4 { color: #E71E60 !important; } .h4-purple h4 { color: #643B85 !important; } .h4-yellow h4 { color: #F5DB2E !important; } .h4-white h4 { color: #FFFFFF !important; } For example, the following sample markdown demonstrates the use of h{level}-{color} styles in a number of distinct use-cases:\n---?color=linear-gradient(to bottom, #B7F8DB, #50A7C2) @snap[midpoint h1-purple h3-white] # GitPitch ### The Markdown Presentation Service on Git @snapend This markdown snippet renders as follows:\nBackground Color Styles The set of available bg-{color} styles can be used to set a custom background color for any container element on your slides.\nThe following bg-{color} styles are currently available out-of-the-box:\n.bg-black { background: #000000 !important; } .bg-blue { background: #4487F2 !important; } .bg-gray { background: #777777 !important; } .bg-green { background: #8EA33B !important; } .bg-orange { background: #F26225 !important; } .bg-gold { background: #E58537 !important; } .bg-pink { background: #E71E60 !important; } .bg-purple { background: #643B85 !important; } .bg-yellow { background: #F5DB2E !important; } .bg-white { background: #FFFFFF !important; } For example, the following sample markdown demonstrates the use of bg-{color} styles in a number of distinct use-cases:\n---?color=black @snap[north-west bg-green text-center span-40] North West @snapend @snap[north-east bg-orange text-center span-40] North East @snapend @snap[west bg-gray text-center span-30] West @snapend @snap[midpoint text-white] North\u0026lt;br\u0026gt;\u0026lt;br\u0026gt; @fa[compass fa-5x] \u0026lt;br\u0026gt;\u0026lt;br\u0026gt;South @snapend @snap[east bg-gray text-center span-30] East @snapend @snap[south-west bg-pink text-center span-40] South West @snapend @snap[south-east bg-blue text-center span-40] South East @snapend This markdown snippet renders as follows:\nList Bullet Styles  Note, the List Bullet styles are available to decks using the Theme Template only.\n The set of available list-{type}-bullets styles can be used to set a custom bullet style for list content.\nThe following list-{type}-bullets styles are currently available out-of-the-box:\n.list-circle-bullets { list-style-type: circle !important; } .list-square-bullets { list-style-type: square !important; } .list-alpha-bullets { list-style-type: upper-alpha !important; } .list-roman-bullets { list-style-type: lower-roman !important; } .list-spaced-bullets li { margin-bottom: 1em; } .list-no-bullets { list-style-type: none !important; } For example, the following sample markdown demonstrates the use of list-{type}-bullets styles to customize a sample list:\n---?color=#1D1E22 @ul[list-square-bullets list-spaced-bullets font-righteous text-pink](false) - Lorem ipsum dolor sit amet. - Aliquam tincidunt mauris eu risus. - Vestibulum auctor dapibus neque. - Nunc dignissim risus id metus. - Cras ornare tristique elit. @ulend This markdown snippet renders as follows:\nOverride Utility Styles All CSS utility styles can be overridden using custom css .\nThe current set of CSS utility styles provide a useful template for creating new or derived styles that may be needed by your slide decks. Simply define a new style class and customize the properties on that class to meet your needs.\n"
},
{
	"uri": "https://gitpitch.com/docs/settings/favicon/",
	"title": "Favicon Setting",
	"tags": [],
	"description": "",
	"content": " Purpose The favicon setting lets you activate a custom favicon for your slide deck.\nSample Syntax favicon : assets/img/fav.ico Details  Slideshow settings are activated using a PITCHME.yaml properties file.\n The favicon setting supports both relative and absolute paths to the image file. When activated, your favicon is used as a website icon, tab icon, shortcut icon, URL icon, or bookmark icon for your slide deck.\n"
},
{
	"uri": "https://gitpitch.com/docs/git/branch-modular-slideshows/",
	"title": "Modular Slideshows",
	"tags": [],
	"description": "",
	"content": " The Modular Markdown Guide details the recommended approach and key benefits of adopting a modular design when developing and managing slideshow presentation content. Especially when you are developing course or training materials.\nThis guide takes modularity one step further, showing you how you can use modular markdown to deliver modular slideshows.\n What is a Modular Slideshow?  Example: HTML5 Training Slideshow Revisited  Example: HTML5 Training Mini-Slideshows  Example: The GitPitch Demo Deck   What is a Modular Slideshow? A Modular Slideshow is a slideshow built using modular markdown that allows you to publish mini-decks. Each mini-deck presents a subset of slides found within the master presentation. Mini-decks can be shared independently with any audience.\nThis feature is especially powerful when you are developing slide decks to deliver course and training materials. Modular slideshows allow you to develop complete course content that can share common slides, assets, and styles. And then deliver your course to your audience as as series of topic-specific mini-decks.\nExample: HTML5 Training Slideshow Revisited The Modular Markdown Guide demonstrated how a modular approach can be used to deliver training materials using an example course, an Introduction to HTML5. Here is the repository file and directory structure for that example:\n. ├── PITCHME.md | ├── PITCHME.yaml | ├── common │ ├── about │ │ └── PITCHME.md │ └── contact │ └── PITCHME.md | └── training | └── topics | ├── css | | │ ├── PITCHME.md | | │ ├── selectors │ │ └── PITCHME.md | | │ └── syntax │ └── PITCHME.md | ├── html | | │ ├── PITCHME.md | | │ ├── attributes │ │ └── PITCHME.md | | │ └── tags │ └── PITCHME.md | └── js | ├── PITCHME.md | ├── callbacks │ └── PITCHME.md └── objects └── PITCHME.md The above file and directory structure recognizes the inherently modular - HTML, CSS, and JavaScript - nature of the Introduction to HTML5 course content.\nThe master presentation delivered by the content in this repository delivers the full set of content across all topics covered by the example HTML5 course. The master presentation could be shared at the following (fictitious) slideshow URL:\nhttps://gitpitch.com/acmecorp/html5 The example that follows below demonstrates how mini-slideshows can be delivered with zero-modifications to the master content.\nExample: HTML5 Training Mini-Slideshows The following example takes advantage of existing content within the example Introduction to HTML5 repository to deliver chapter-specific mini-decks. These mini-decks can be used to simplify the delivery of the training course materials.\nThe following directory outline shows the addition of new chapter specific PITCHME.md markdown files:\n. ├── PITCHME.md | ├── PITCHME.yaml | ├── chapter | | | ├── css | │ └── PITCHME.md | | | ├── html | │ └── PITCHME.md | | | └── topics | └── PITCHME.md | └── training | └── ... The addition of the new PITCHME.md chapter content allows us to reuse existing markdown content per topic and deliver individual mini-decks for HTML, CSS, and JavaScript.\nThe content of the new chapter/css/PITCHME.md markdown file might look as follows:\n---?include=course/common/greeting/PITCHME.md ---?include=course/topics/css/PITCHME.md ---?include=course/topics/css/selectors/PITCHME.md ---?include=course/topics/css/syntax/PITCHME.md ---?include=course/common/contact-me/PITCHME.md As you can see above, the content of our new CSS chapter mini-deck is created purely by reusing existing presentation content found in the repository. No file, asset, or style duplication.\nTo present this new CSS-chapter specific mini-deck, simply identify the chapter as a query parameter on the standard slideshow URL, for example (fictitious):\nhttps://gitpitch.com/acmecorp/html5?p=chapter/css This exact same approach can be used to deliver mini-decks for the HTML and JavaScript chapters too. Giving you great flexibility when presenting training course materials to any audience.\nExample: The GitPitch Demo Deck The GitPitch Demo Deck provides a real-world example of a Modular Slideshow. An overview of the repository file and directory structure for the demo deck is shown here:\n. ├── assets │ ├── css │ │ └── PITCHME.css │ └── img │ ├── robot.jpg │ └── fireworks.gif ├── deck │ ├── code │ │ └── PITCHME.md │ ├── desktop │ │ └── PITCHME.md │ ├── layout │ │ └── PITCHME.md │ ├── media │ │ └── PITCHME.md │ ├── theme │ │ └── PITCHME.md │ └── widgets │ └── PITCHME.md │ ├── PITCHME.yaml └── PITCHME.md The master presentation for The Demo Deck is found at the following slideshow URL:\nhttps://gitpitch.com/gitpitch/demo-deck For demonstration purposes the slide content for this deck has been partitioned into distinct topics. Where each topic is maintained within it\u0026rsquo;s own dedicated PITCHME.md markdown file.\nOne consequence of this modular design of the demo deck is that each topic can be opened and viewed as an independent slideshow presentation, or mini-deck.\nFor example, to present the widgets topic as an independent mini-deck, simply identify the widgets as a query parameter on the standard slideshow URL, for example:\nhttps://gitpitch.com/gitpitch/demo-deck?p=deck/widgets This exact same approach can be used to present any of distinct topics as an independent mini-deck.\n"
},
{
	"uri": "https://gitpitch.com/docs/code-features/monospaced-fonts/",
	"title": "Monospaced Code Fonts",
	"tags": [],
	"description": "",
	"content": " Monospaced code fonts deliver beautiful typography for code rendered on your slides.\n Introducing Monospaced Code Fonts  Monospaced Code Fonts Sample Slides   Introducing Monospaced Code Fonts Monospaced code fonts are a feature of The Theme Template . As such, this feature is only available to slide decks that activate the theme template. Any slide decks using a deprecated theme can not take advantage of this feature.\nBy activating the theme-code setting in your PITCHME.yaml for your slide deck you can activate a custom monospaced code font for code rendered on your slides.\nMonospaced Code Fonts Sample Slides The following series of screenshots use the same sample code block to demonstrate a the set of available monospaced code fonts available to GitPitch presentation authors:\n"
},
{
	"uri": "https://gitpitch.com/docs/image-features/repeat/",
	"title": "Background Repeat",
	"tags": [],
	"description": "",
	"content": " Important! Remember to size-optimize your presentation images for the Web.\n Learn By Example   Image delimiter syntax supports a repeat parameter that gives you the ability to have a background image repeated on a slide background.\nBy default, background images are rendered with a no-repeat pattern. The repeat paramter can take any value that is valid on the background-repeat css property .\nLearn By Example This PITCHME.md markdown snippet:\n---?image=assets/img/face.jpg\u0026amp;size=auto 60%\u0026amp;repeat=repeat-x ### @color[white](Repeat background images) Results in the rendering of the following slide:\n Click here to view this slide within a live GitPitch presentation.\n Important! Remember to size-optimize your presentation images for the Web.\n"
},
{
	"uri": "https://gitpitch.com/docs/settings/background/",
	"title": "Background Setting",
	"tags": [],
	"description": "",
	"content": " GitPitch supports a number of background-* settings that can be combined to deliver precise control over default background images used by any presentation.\n Background Setting  Background Size Setting  Background Position Setting  Background Color Setting  Background Repeat Setting  Background Opacity Setting   Setting: Background Purpose The background setting lets you specify a default background image for all slides within your presentation.\nSample Syntax background : assets/img/bg.png Details  Slideshow settings are activated using a PITCHME.yaml properties file.\n The background setting supports both relative and absolute paths to the image file.\nThe background image file type can be any JPEG, PNG, or GIF image file. SVG background image support - for pixel perfect rendering at any resolution - is available as a Pro image feature .\nNote, a default background image can be overridden on individual slides within a presentation using standard image delimiter syntax .\nSetting: Background-Size Purpose The background-size setting lets you specify a sizing and scaling policy for your default background image.\nSample Syntax background-size : auto 90% Details  Slideshow settings are activated using a PITCHME.yaml properties file.\n The background-size setting can take any value that is valid on the background-size css property . See the Image Features Background Scaling documentation for further details.\nSetting: Background-Position Purpose The background-position setting lets you specify a custom position for your default background image.\nSample Syntax background-position : left Details  Slideshow settings are activated using a PITCHME.yaml properties file.\n The background-position setting can take any value that is valid on the background-position css property . See the Image Features Background Positioning documentation for further details.\nThe background-position setting is frequently used in conjuction with the background-size setting to deliver a final custom background image configuration for a presentation.\nSetting: Background-Color Purpose The background-color setting lets you specify a custom color to fill any exposed slide area not covered by your default background image.\nSample Syntax background-color : black Details  Slideshow settings are activated using a PITCHME.yaml properties file.\n The background-color setting can take any value that is valid on the background-color css property . See the Image Features Background Color documentation for further details.\nThe background-color setting is frequently used in conjuction with the background-size setting to deliver a final custom background image configuration for a presentation.\nSetting: Background-Repeat Purpose The background-repeat setting lets you specify a custom image repeat policy to be applied to your default background image.\nSample Syntax background-repeat : repeat-x Details  Slideshow settings are activated using a PITCHME.yaml properties file.\n The background-repeat setting can take any value that is valid on the background-repeat css property . See the Image Features Background Repeat documentation for further details.\nSetting: Background-Opacity Purpose The background-opacity setting lets you specify a custom opacity filter to be applied to your default background image.\nSample Syntax background-opacity : 75 Details  Slideshow settings are activated using a PITCHME.yaml properties file.\n The background-opacity setting must take a value defined within the following series of permissible values: 10, 15, 20, 25, 30,…,90, 95, 100. Each value represents a percentage of full image transparency at 100%.\nSee the Image Features Background Opacity documentation for further details.\n Note: Opacity filters are a Pro image feature only.\n "
},
{
	"uri": "https://gitpitch.com/docs/code-features/diff/",
	"title": "Git Diff for Commit",
	"tags": [],
	"description": "",
	"content": " GitPitch provides a powerful markdown widget that can be used to generate and render a diff for any commit on any repository on github.com.\n Diff for Commit within any GitHub Repository  Diff for Commit within the Presentation Repository  Disable Automatic Code Presenting on Diff  Offline Git Diff Support    This feature is GitHub only. Generating diffs for content on GitLab and Bitbucket is not supported.\n Diff for Commit within any GitHub Repository To render a diff for a commit within any repository on gitpitch.com you can use the following widget syntax in your PITCHME.md markdown file:\n@diff[class...]($user/$repo/$commit)  Substitute the GitHub account name, repository, and commit hash for $user, $repo, and $commit respectively.\n The use of class\u0026hellip; properties on this markdown widget is optional. When used to control the appearance of this widget on your slides, one or more property values can be specified within the square brackets.\nFor example, to generate and render a diff for a selected commit on the Vue.js repo use the following snippet:\n--- @diff[span-100 zoom-09](vuejs/vue/e7d49cdcf2fd9a612e0dac7a7bea318824210881) This markdown snippet renders as follows:\n You can see the original GiutHub diff for this commit here .\n By default, GitPitch automatically activates live code presenting for the diff output. This allows you to instantly step-through the individual changes on each file modified by the corresponding commit. If you want to disable this feature, for example, in order to customize the live code presenting steps or annotations, see Disable Automatic Code Presenting on Diff .\nDiff for Commit within the Presentation Repository  This feature is only available when the slide deck is viewed online.\n To render a diff for a commit within the repository that contains the GitPitch slide deck you can use the following widget shortcut syntax in your PITCHME.md markdown file:\n--- @diff[span-100]($commit)  Substitute the GitHub commit hash found in the presentation repository for $commit.\n Disable Automatic Code Presenting on Diff By default, GitPitch automatically activates live code presenting for the diff output. This allows you to instantly step-through the individual changes on each file modified by the corresponding commit.\nBut if you want to disable live code presenting, simply set the nofrags style as a property value for the markdown widget as follows:\n--- @diff[span-100 nofrags](onetapbeyond/gen_metrics/3e9f2100269b9f5f2fd98975bd417089183ddcf2) This markdown snippet renders as follows:\nIf you use nofrags to disable automatic live code presenting, you can then add your own custom live code fragment markers . For example:\n--- @diff[nofrags](onetapbeyond/gen_metrics/3e9f2100269b9f5f2fd98975bd417089183ddcf2) @snap[south span-100] @[1](Git Diff generated for changes to PITCHME.md) @[9](This commit involved a single change to this file) @snapend Offline Git Diff Support Git Diffs are dependent on content served by github.com. As such, if you are developing or presenting a slide deck when offline the content of the diff will not be available for rendering on your slide.\nGitPitch attempts to handle this gracefully by automatically replacing the fully rendered diff with a simple message indicating that the diff is not currently available. Once Internet access has been restored, the fully rendered diff will be displayed once again.\n"
},
{
	"uri": "https://gitpitch.com/docs/pro-features/audio/",
	"title": "GitPitch Pro Audio Decks",
	"tags": [],
	"description": "",
	"content": " About  Activate a GitPitch Paid Plan to unlock Pro Cloud Audio.\n GitPitch Audio Slide Decks let you enhance traditional slide decks with the spoken word. By activating a voice-over for individual slides and slide fragments, you can unlock brand new ways to SHARE knowledge, TEACH, and deliver TRAINING materials.\n Live Audio Slide Deck Example  Audio Deck Activation  Master Audio v Fragment Audio  Add Slide Master Audio  Add Slide Code Fragment Audio  Add Slide Snap Fragment Audio  Add Slide List Fragment Audio  Slides / Fragments without Audio  Customize Audio Player Controls  Audio File Caching Policies  Supported Audio Formats  Audio Recording Tool Recommendations   Live Audio Slide Deck Example The best way to appreciate the unique benefits of an audio slide deck is to experience one live. Click here to open a sample audio slide deck in your browser:\nWhen you open this sample deck note the 🎧 headphones icon in the bottom-left corner of your browser window. Position your mouse over this icon to reveal the audio player controls ⏯ to start audio playback for the deck.\nIf you are viewing this sample slide deck in a browser on your desktop, once playback has started, the deck will automatically advance between slides with the audio playing in sync as each new slide (or slide fragment) is displayed.\nIf you are viewing this sample slide deck in a browser on a mobile device, the audio will only play as the direct result of user interaction, so you need to click play ⏯ to hear the audio on each new slide.\nAudio Deck Activation By default, audio features are disabled for slide decks. To enable the full set of audio features for your slide deck add the following property to your PITCHME.yaml settings file:\naudio-deck : true When this setting is activated, the standard slideshow menu for your deck is replaced by the audio slide deck player controls icon displayed as 🎧 headphones in the bottom-left corner of each slide. These controls can be used to start and stop audio playback.\nMaster Audio v Fragment Audio The main audio file for any slide is referred to as the master audio file. This audio file is guaranteed to play as soon as the corresponding slide is displayed. Master audio files are registered using the @audio markdown widget . This widget must be declared following the delimiter for an audio slide.\nSlides are not limited to playing only the one master audio file. Additional files can be registered for audio playback when individual fragments on your slide are displayed. This is a powerful feature that mirrors how people typically deliver real-world presentation content - step-by-step. Working with slide audio fragments is detailed in the following sections of this guide:\n Add Slide Code Fragment Audio  Add Slide Snap Fragment Audio  Add Slide List Fragment Audio   Add Slide Master Audio To activate master audio playback on any slide simply register an audio file using the @audio markdown widget. This widget must be declared directly following the delimiter for the slide. For example:\n--- @audio[Greeting](assets/audio/greeting.mp3) ### Hello, World! The text specified within the square-brackets on the @audio widget is optional. When specified, the text is used to set a custom title for the slide that then appears in the auto-generated table-of-contents for the deck.\nThe path specified within the round-brackets on the @audio widget is required. Any relative path to a valid audio file can be used. Whatever audio file is indicated on this path is the audio file that will play when the slide is displayed.\nAdd Slide Code Fragment Audio The Code Presenting Guide introduces a markdown syntax that allows you to focus-on and step-through code files, snippets, loops, functions, console output, etc. directly on any slide. Each step can optionally display a custom text annotation to provide additional context for your audience.\nSlide Code Fragment Audio support lets you replace text-based custom annotations with custom audio playback for individual code-fragments. For example:\n--- @audio[Code Intro](assets/audio/intro.mp3) @code[java zoom-20](src/lib/Utility.java) @[1-4,zoom-16](assets/audio/java-imports.mp3) @[9,10,14-18](assets/audio/java-method-args.mp3) This markdown snippet demonstrates a number of important features:\n The snippet declares Slide Master Audio intro.mp3 for playback when the slide is first displayed The snippet uses a Code Widget to inject a sample Java code file onto the slide The snippet declares two Slide Code Fragment Audio java-*.mp3 files for playback These code-fragment audio files are played when the corresponding code fragments are displayed  It does not matter what technique you use to inject code onto your slide - code widgets, code delimiters, fenced-code blocks, etc. The key audio-specific support being demonstrated here is the setting of relative paths to valid audio files within the round-brackets for the code-fragment markers .\nAdd Slide Snap Fragment Audio The Snap Layouts Guide introduces a markdown syntax that can be used to control the placement of content on any slide. To activate snap-layouts for any block of markdown you simply wrap the block in opening @snap and closing @snapend tags.\nSlide Snap Fragment Audio lets you associate custom audio playback with any block of snapped-content on your slide. When audio is activated, the block is automatically treated as a fragment on the slide. For example:\n--- @audio[Deployment](assets/audio/cloud.mp3) @snap[west span-50] ## Cloud Deployment @snapend @snap[east span-50](assets/audio/deploy.mp3) #### A Bird\u0026#39;s Eye View ![DEPLOY](assets/img/deployment.jpg) @snapend This markdown snippet demonstrates a number of important features:\n The snippet declares Slide Master Audio cloud.mp3 for playback when the slide is first displayed The snippet declares the Slide Snap Fragment Audio deploy.mp3 file for playback The snap-fragment audio declaration turns the east snapped-content into a slide fragment The snap-fragment audio file is played when the corresponding snapped-content is displayed  The key audio-specific support being demonstrated here is the setting of a relative path to a valid audio file within the round-brackets following the opening snap tag for the markdown block.\nAdd Slide List Fragment Audio The Markdown List Widget Speaker Mode Fragments Guide introduces a markdown syntax for working with list content as slide fragments. This syntax includes support for an optional @note markdown widget that can be used to associate custom speaker-notes with individual list fragments.\nSlide List Fragment Audio lets you associate custom audio playback with individual list fragments by extending the functionality of the @note widget. For example:\n--- @audio[About](assets/audio/about.mp3) ## What is GitPitch? @ul - A modern PowerPoint @note[Markdown, Modular, Versioned](assets/audio/modern.mp3) - Uniquely adapted for Devs @note[GitHub, GitLab, Bitbucket](assets/audio/developers.mp3) - On Linux, MacOS, and Windows @note[Online, Offline, Export](assets/audio/everywhere.mp3) @ulend This markdown snippet demonstrates a number of important features:\n The snippet declares Slide Master Audio about.mp3 for playback when the slide is first displayed The snippet declares Slide List Fragment Audio files for playback using @note on each list item Each list-fragment audio file is played when the corresponding list-item fragment is displayed  The key audio-specific support being demonstrated here is the setting of a relative path to a valid audio file within the round-brackets for each @note markdown widget used on individual list items.\n Note, when activating list-fragment audio, the speaker-note text specified within the square-brackets on the @note widget is optional. For example, @note  is valid syntax.\n Slides / Fragments without Audio For audio slide decks it is strongly recommended that each slide and each slide-fragment has its own audio file. This delivers a seamless viewing and listening experience for your audience.\nFor slides or slide-fragments without audio files associated, by default the slide or fragment content will be displayed for up to 5 seconds in silence before automatically transitioning to the next slide or fragment in the deck. You can override this default no-audio-pause period when activating audio deck features in your PITCHME.yaml . For example:\n audio-deck : 8 Here the audio-deck setting has the following effects:\n The setting activates audio deck features for your slide deck And the setting value sets a custom no-audio-pause period measured in seconds.  This no-audio-pause period is a global value, and applies to all slides and slide-fragments where custom audio has not been activated.\n If for any reason you want to display a slide or slide-fragment in silence for a period of time that differs fro the global no-audio-pause period, simply record silence for that custom duration, and then register the corresponding silent audio file using standard audio syntax.\n Customize Audio Player Controls The default styling and positioning of the 🎧 headphones icon for audio playback are set with the following built-in CSS style rules:\ndiv.audio-deck-icon { color: #E58537; position: fixed; left: 20px; bottom: 20px; z-index: 100; animation: shake-headphones 1.0s; animation-iteration-count: 5; } div.audio-deck-controls { position: fixed; left: 70px; bottom: 22px; z-index: 99; } div.audio-deck-controls \u0026gt; audio { opacity: 0.0; width: 200px; height: 40px; } div.audio-deck-controls:hover \u0026gt; audio { opacity:1; width: 200px; } div.audio-deck-icon:hover + div.audio-deck-controls \u0026gt; audio { opacity: 1; } As a presentation author, you can override these default style rules by activating appropriate custom CSS styles for your slide deck. For example, you could override the default #E58537 color with blue for the 🎧 headphones icon by activating the following custom CSS style rule:\ndiv.audio-deck-icon { color: blue; } These styling details are provided so you can easily make small tweaks to the audio player controls if needed. Making wholesale changes to these built-in CSS style rules for the 🎧 headphones icon is not recommended unless you perform extensive cross-browser testing before publishing your audio slide deck to the cloud.\nAudio File Caching Policies Audio files used by audio slide decks are cached by the gitpitch.com server for up to 6 hours. This means any changes to the audio files that you push to your upstream repositories on GitHub, GitLab, or Bitbucket will not be heard by your audience until the older versions of those same files expire in the cache.\nFor this reason, we strongly recommend that you develop your audio slide decks directly within GitPitch Desktop . The Desktop does not cache audio files so you will hear changes to those files immediately. Once work on your audio deck is complete, you can then push your presentation files, including the final versions of your audio files, to your upstream repository. At that point you will be ready to start sharing the link to your new audio slide deck online.\nSupported Audio Formats GitPitch audio slide decks are made possible by HTML5 audio playback support in your browser. The HTML5 standard supports the following audio formats: MP3, WAV, and OGG. But not all Web browsers are capable of playing all of these audio formats.\nThe following table indicates the current [May, 2019] status of audio support by popular browsers:\nAs this table indicates, the only audio format that will reliably play across all browsers is the MP3 format. For this reason, at this time it is strongly recommended that you use MP3 audio files exclusively for your GitPitch audio slide decks. Numerous tools exist that can convert alternate audio formats to MP3.\nAudio Recording Tool Recommendations You can use absolutely any tool to record the audio files for your GitPitch audio slide decks. The only constraint is that the final format of your audio files must meet the conditions documented in the Supported Audio Formats section of this guide.\nHowever, if you are looking for a recommendation, from personal experience I can recommend Audacity . It is a free, easy to use, open-source audio tool. Available on Windows, MacOS, and GNU/Linux. You can learn more about Audacity and download the free software here .\n Note, GitPitch has no affiliation with the Audacity project. Besides being a big fan :)\n There are also numerous online audio recording services, like the Online Voice Recorder . While I have no personal experience using these online tools they do present an alternative if you do not wish to install an audio tool on your desktop.\n Tip! For consistent results, always trim silence at the beginning and end for your audio recordings.\n "
},
{
	"uri": "https://gitpitch.com/docs/rich-media-features/inline-videos/",
	"title": "Inline Videos",
	"tags": [],
	"description": "",
	"content": "  Video files must be served from a video streaming CDN such as YouTube or Vimeo. Your repository on GitHub, GitLab or Bitbucket can not be used as a video CDN. However, Pro subscribers can do more .\n  Learn By Example  Slide Inline YouTube Video  Slide Inline Vimeo Video  Slide Inline MP4 Video   Enhance any slideshow presentation by embedding rich video content. This technique provides a great way to take advantage of existing teaching or training materials. Plus it\u0026rsquo;s a great way to add a touch of humor or a popular meme to keep your audience engaged.\nLearn By Example This PITCHME.md markdown snippet:\n--- @css[title-top-right](Embed Video) ![Gravity](https://player.vimeo.com/video/125471012) Results in the rendering of the following slide:\nSlide Inline YouTube Video This PITCHME.md markdown snippet demonstrates how to inline a YouTube video:\n![Video](https://www.youtube.com/embed/mkiDkkdGGAQ) Please note the use of an embed link is required for YouTube videos.\nSlide Inline Vimeo Video This PITCHME.md markdown snippet demonstrates how to inline a YouTube video:\n![Video](https://player.vimeo.com/video/111525512) Slide Inline MP4 Video This PITCHME.md markdown snippet demonstrates how to inline an MP4 video:\n![Cartoon](http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4)  Video files must be served from a video streaming CDN such as YouTube or Vimeo. Your repository on GitHub, GitLab or Bitbucket can not be used as a video CDN. However, Pro subscribers can do more .\n "
},
{
	"uri": "https://gitpitch.com/docs/diagram-features/charts/",
	"title": "Line Bar Radar Charts",
	"tags": [],
	"description": "",
	"content": " Add beautifully rendered line, bar, pie, radial, etc. charts to any slide. Support for charts within GitPitch slide decks is powered by the Reveal.js plugin for Chart.js .\n Learn by Example - Line Chart  Learn By Example - Bar Chart  Learn By Example - Radar Chart  Charts Plugin Activation   By default, this plugin is disabled. To enable this plugin for your presentation, see Charts Plugin Activation below.\nLearn By Example - Line Chart To render any chart you must declare a canvas element on your slide. This required element takes a data-chart property. And that property value determines the style of chart rendered for your custom data. For a line chart, this property value must be set to line. For example, this PITCHME.md markdown snippet:\n--- \u0026lt;canvas data-chart=\u0026#34;line\u0026#34;\u0026gt; \u0026lt;!-- { \u0026#34;data\u0026#34;: { \u0026#34;labels\u0026#34;: [\u0026#34;January\u0026#34;,\u0026#34; February\u0026#34;,\u0026#34; March\u0026#34;,\u0026#34; April\u0026#34;,\u0026#34; May\u0026#34;,\u0026#34; June\u0026#34;,\u0026#34; July\u0026#34;], \u0026#34;datasets\u0026#34;: [ { \u0026#34;data\u0026#34;:[65,59,80,81,56,55,40], \u0026#34;label\u0026#34;:\u0026#34;Sample Data X\u0026#34;, \u0026#34;backgroundColor\u0026#34;:\u0026#34;rgba(20,220,220,.8)\u0026#34; }, { \u0026#34;data\u0026#34;:[28,48,40,19,86,27,90], \u0026#34;label\u0026#34;:\u0026#34;Sample Data Y\u0026#34;, \u0026#34;backgroundColor\u0026#34;:\u0026#34;rgba(120,220,0,.8)\u0026#34; } ] }, \u0026#34;options\u0026#34;: { \u0026#34;responsive\u0026#34;: \u0026#34;true\u0026#34; } } --\u0026gt; \u0026lt;/canvas\u0026gt; Please note the following:\n Your chart properties are defined as a JSON string within HTML comment syntax You can add as many data elements as needed inside the datasets array. The number of elements within the top-level labels property value should match the size of the data arrays specified within datasets. Each element within datasets must provide a data property, plus optional but recommended properties including label, and backgroundColor.  This sample markup snippet is rendered as follows:\nLearn By Example - Bar Chart To render any chart you must declare a canvas element on your slide. This required element takes a data-chart property. And that property value determines the style of chart rendered for your custom data. For a bar chart, this property value must be set to bar. For example, this PITCHME.md markdown snippet:\n--- \u0026lt;canvas data-chart=\u0026#34;bar\u0026#34;\u0026gt; \u0026lt;!-- { \u0026#34;data\u0026#34;: { \u0026#34;labels\u0026#34;: [\u0026#34;January\u0026#34;,\u0026#34; February\u0026#34;,\u0026#34; March\u0026#34;,\u0026#34; April\u0026#34;,\u0026#34; May\u0026#34;,\u0026#34; June\u0026#34;,\u0026#34; July\u0026#34;], \u0026#34;datasets\u0026#34;: [ { \u0026#34;data\u0026#34;:[65,59,80,81,56,55,40], \u0026#34;label\u0026#34;:\u0026#34;Sample Data X\u0026#34;, \u0026#34;backgroundColor\u0026#34;:\u0026#34;rgba(20,20,220,.8)\u0026#34; }, { \u0026#34;data\u0026#34;:[28,48,40,19,86,27,90], \u0026#34;label\u0026#34;:\u0026#34;Sample Data Y\u0026#34;, \u0026#34;backgroundColor\u0026#34;:\u0026#34;rgba(120,120,220,.8)\u0026#34; } ] }, \u0026#34;options\u0026#34;: { \u0026#34;responsive\u0026#34;: \u0026#34;true\u0026#34; } } --\u0026gt; \u0026lt;/canvas\u0026gt; Please note the following:\n Your chart properties are defined as a JSON string within HTML comment syntax You can add as many data elements as needed inside the datasets You can add as many data elements as needed inside the datasets array. The number of elements within the top-level labels property value should match the size of the data arrays specified within datasets. Each element within datasets must provide a data property, plus optional but recommended properties including label, and backgroundColor.  This sample markup snippet is rendered as follows:\nLearn By Example - Radar Chart To render any chart you must declare a canvas element on your slide. This required element takes a data-chart property. And that property value determines the style of chart rendered for your custom data. For a radar chart, this property value must be set to radar. For example, this PITCHME.md markdown snippet:\n--- \u0026lt;canvas data-chart=\u0026#34;radar\u0026#34;\u0026gt; \u0026lt;!-- { \u0026#34;data\u0026#34;: { \u0026#34;labels\u0026#34;: [\u0026#34;January\u0026#34;,\u0026#34; February\u0026#34;,\u0026#34; March\u0026#34;,\u0026#34; April\u0026#34;,\u0026#34; May\u0026#34;,\u0026#34; June\u0026#34;,\u0026#34; July\u0026#34;], \u0026#34;datasets\u0026#34;: [ { \u0026#34;data\u0026#34;:[65,59,80,81,56,55,40], \u0026#34;label\u0026#34;:\u0026#34;Sample Data X\u0026#34;, \u0026#34;backgroundColor\u0026#34;:\u0026#34;rgba(80,160,240,.8)\u0026#34; }, { \u0026#34;data\u0026#34;:[28,48,40,19,86,27,90], \u0026#34;label\u0026#34;:\u0026#34;Sample Data Y\u0026#34;, \u0026#34;backgroundColor\u0026#34;:\u0026#34;rgba(240,160,80,.8)\u0026#34; } ] }, \u0026#34;options\u0026#34;: { \u0026#34;responsive\u0026#34;: \u0026#34;true\u0026#34; } } --\u0026gt; \u0026lt;/canvas\u0026gt; Please note the following:\n Your chart properties are defined as a JSON string within HTML comment syntax You can add as many data elements as needed inside the datasets You can add as many data elements as needed inside the datasets array. The number of elements within the top-level labels property value should match the size of the data arrays specified within datasets. Each element within datasets must provide a data property, plus optional but recommended properties including label, and backgroundColor.  This sample markup snippet is rendered as follows:\nCharts Plugin Activation To enable the charts plugin for your presentation add the following property to your PITCHME.yaml file:\ncharts : true Once this property has been enabled, a chart can be included on any slide by adding a canvas element with the data-chart attribute set to the desired chart type. The chart can be configured within the canvas body by a JSON string embedded into an HTML comment.\nFor further details, please see the documentation for the reveal.js plugin for Chart.js .\n Note, if your chart is driven by an external csv data file you must specify an absolute URL to that file. If your csv data file lives in your GitHub repo then you will need to use the absolute URL to the raw file. Relative paths are not supported.\n "
},
{
	"uri": "https://gitpitch.com/docs/markdown-features/shortcuts/",
	"title": "Markdown Shortcuts",
	"tags": [],
	"description": "",
	"content": " GitPitch provides a number of unique syntax shortcuts supported by PITCHME.md markdown that can be used to alter the appearance or behavior of content on any slide.\n @size - Set Custom Font Size  @color - Set Custom Font Color  @css - Set Custom CSS Class  @title - Set Custom TOC Label for Slide  @transition - Set Slide-Specific Transition    Note: These Markdown Shortcuts are supported by gitpitch.com , GitPitch Desktop , and GitPitch Enterprise . This feature is not part of the GitPitch open source project .\n Set Custom Font Size To set a custom font size for specific slide content use the following shortcut syntax in your PITCHME.md markdown file:\n--- @size[size-value](your-content) Where the value of size-value can take any valid value permitted by the font-size css property .\nFor example, set a custom size to super-size text on the slide:\n--- # @size[3.5em](OK) This markdown snippet renders as follows:\nThe basic slide content is shown on the left. The same slide content with the size shortcut syntax applied is shown on the right.\nSet Custom Font Color To set a custom font color for specific slide content use the following shortcut syntax in your PITCHME.md markdown file:\n--- @color[color-value](your-content) Where the value of color-value can take any valid value permitted by the css color property .\nFor example, set custom colors for complete lines of text or just snippets within a line:\n--- ### @color[orange](ACME Corp Clearance Sale)  #### Dynamite Deals - @color[#DC143C](Short Fuses) Included!  This markdown snippet renders as follows:\nThe basic slide content is shown on the left. The same slide content with the color shortcut syntax applied is shown on the right.\nSet Custom CSS Class To set a custom CSS class for specific slide content use the following shortcut syntax in your PITCHME.md markdown file:\n--- @css[class-name](your-content) Where the value of class-name is any CSS class name you have activated for your slideshow presentation using the custom theme setting .\nFor example, if you presentation defined the following custom CSS classes:\n.headline { color: gold; text-transform: uppercase; } .byline { color: gray; font-size: 0.9em; letter-spacing: 2px; } These custom classes could then be applied directly to content on your slides as follows:\n--- ### @css[headline](ACME Corp Clearance Sale)  #### @css[byline](Dynamite Deals - Short Fuses Included!)  This markdown snippet renders as follows:\nThe basic slide content is shown on the left. The same slide content with the css shortcut syntax applied is shown on the right.\nSet Custom TOC Label for Slide See the Auto-Generated Table-of-Contents documentation for further details.\nSet Slide-Specific Transition To set a slide-specific transition for an individual slide use the following shortcut syntax immediately following any slide delimiter in your PITCHME.md markdown file:\n--- @transition[transition-type] ### Your Slide Content Goes Here Where the value of transition-type can any one of the supported slide transition types .\nNote, this shortcut syntax can also be used to specify distinct slide-in and slide-out transitions for an individual slide. For example:\n--- @transition[zoom-in fade-out] ### Your Slide Content Goes Here Using this approach, any pair of supported slide transition types can be specified for a slide. Note, when using a pair of slide-in and slide-out transitions the use of the -in postfix and the -out postfix on the transition names is required.\n If you like the power and flexibility of markdown shortcuts then you\u0026rsquo;re going to love Markdown Widgets  .\n "
},
{
	"uri": "https://gitpitch.com/docs/work-offline/documentation/",
	"title": "Offline Documentation",
	"tags": [],
	"description": "",
	"content": " The GitPitch Docs The complete GitPitch Docs found at https://gitpitch.com/docs are also made available for download. Once downloaded, you can browse and reference these docs when working offline.\nTo download the docs bundle, click here . Once downloaded, expand the zip bundle and open index.html under a local Web server.\n"
},
{
	"uri": "https://gitpitch.com/docs/layout-features/snap-layouts-example-3/",
	"title": "Snap Layouts Example 3",
	"tags": [],
	"description": "",
	"content": " Snap Layouts Learn By Example  Step 1. Initial Markdown  Step 2. Horizontal Split Screen  Step 3. Code Injection   This guide demonstrates the use of GitPitch Snap Layouts to create the following sample slide.\nStep 1. Initial Markdown The initial markdown snippet for the north of our sample slide looks as follows:\n@snap[north span-40 h3-black] ### GraphQL @fa[quote-left quote-graphql](A query language for your API) @snapend This markdown snippet renders as follows:\nThe use of the span-40 property ensures that the heading text does not expand beyond the central portion of our sample slide. This snippet also makes use of the h3-black property. This is one of the built-in Heading Color Styles that can be used to customize the color of any markdown heading text on your slides. And of course, as a GitPitch presentation author you can always define your own custom heading colors .\nStep 2. Horizontal Split Screen This step updates our markdown to deliver the split-screen effect for our sample slide:\n---?color=linear-gradient(180deg, white 50%, #E71E60 50%) @snap[north span-40 h3-black] ### GraphQL @fa[quote-left quote-graphql](A query language for your API) @snapend This intermediate markdown snippet renders as follows:\nThis effect is achieved by activating a color gradient on a color delimiter for the sample slide.\nStep 3. Code Injection This final step updates our markdown to inject code from an external file directly into the south of our sample slide:\n---?color=linear-gradient(180deg, white 50%, #E71E60 50%) @snap[north span-40 h3-black] ### GraphQL @fa[quote-left quote-graphql](A query language for your API) @snapend @snap[south span-85] @code[js zoom-13 code-max code-shadow](src/js/graphql.js) @snapend The use of the span-85 property here controls the width and height of the code block rendered on our sample slide. The code within that block is injected using a Code Widget .\nBeyond simple code injection, the zoom-13 and code-max properties on that widget are taking advantage of powerful code features including Code Step-and-Zoom , Code Revealing , and Code Power Properties .\nAs a final note, the code-shadow property is a custom CSS style used to deliver a nice shadow effect for our sample code block. This sample custom CSS style is defined as follows:\n.code-shadow { box-shadow:0 10px 16px 10px rgba(0,0,0,0.2), 0 6px 20px 10px rgba(0,0,0,0.19) !important; } This final markdown snippet renders as follows:\nCheck out the next Snap Layouts Example for more tips and tricks including experiencing snapped content as slide fragments.\n"
},
{
	"uri": "https://gitpitch.com/docs/themes/demos/",
	"title": "Theme Template Demos",
	"tags": [],
	"description": "",
	"content": " The Theme Template is a customizable theme for GitPitch slide decks. The default theme template configuration delivers attractive styling for GitPitch slide decks out-of-the-box. But making even small changes to the default configuration can deliver a brand new look-n-feel for any slide deck.\nTo demonstrate the power and flexibility of the theme template this guide provides a number of sample custom configurations along with a live demonstration of each custom config in a sample slide deck.\n Default Theme Template Demo  Blue Theme Template Demo  Black Theme Template Demo  Fun Fonts Theme Template Demo  Gradient Theme Template Demo  Split Screen Theme Template Demo  Fun Code Theme Template Demo    These theme template demos are provided as inspiration. You are encouraged to experiment with your own custom theme template configurations to find a style that best fits your project or brand.\n Default Theme Template Demo The following theme template configuration was used to style the default theme sample deck:\ntheme : template theme-background : [ \u0026#34;#FFF\u0026#34; ] theme-headline : [ \u0026#34;Raleway\u0026#34;, \u0026#34;#5289F7\u0026#34;, \u0026#34;none\u0026#34; ] theme-byline : [ \u0026#34;Raleway\u0026#34;, \u0026#34;#111111\u0026#34;, \u0026#34;none\u0026#34; ] theme-text : [ \u0026#34;Ubuntu\u0026#34;, \u0026#34;#1C1C1C\u0026#34;, \u0026#34;none\u0026#34; ] theme-links : [ \u0026#34;#5289F7\u0026#34;, \u0026#34;#5254F7\u0026#34; ] theme-code : [ \u0026#34;Source Code Pro\u0026#34; ] theme-controls : [ \u0026#34;#484848\u0026#34; ] theme-margins : [ \u0026#34;0\u0026#34;, \u0026#34;15px\u0026#34; ] highlight : tomorrow  To view the default theme sample deck live in your browser, click here .\n Blue Theme Template Demo The following theme template configuration was used to style the blue theme sample deck:\ntheme : template theme-background : [ \u0026#34;#5289F7\u0026#34; ] theme-headline : [ \u0026#34;Work Sans\u0026#34;, \u0026#34;white\u0026#34;, \u0026#34;none\u0026#34; ] theme-byline : [ \u0026#34;Work Sans\u0026#34;, \u0026#34;black\u0026#34;, \u0026#34;none\u0026#34; ] theme-text : [ \u0026#34;Lato\u0026#34;, \u0026#34;#F5FFFA\u0026#34;, \u0026#34;none\u0026#34; ] theme-links : [ \u0026#34;#FF851B\u0026#34;, \u0026#34;#E27924\u0026#34; ] theme-code : [ \u0026#34;Inconsolata\u0026#34; ] theme-controls : [ \u0026#34;#484848\u0026#34; ] theme-margins : [ \u0026#34;0\u0026#34;, \u0026#34;15px\u0026#34; ] highlight : ir-black  To view the blue theme sample deck live in your browser, click here .\n Black Theme Template Demo The following theme template configuration was used to style the black theme sample deck demonstrating a code font with symbol ligatures:\ntheme : template theme-background : [ \u0026#34;black\u0026#34; ] theme-headline : [ \u0026#34;Raleway\u0026#34;, \u0026#34;white\u0026#34;, \u0026#34;none\u0026#34; ] theme-byline : [ \u0026#34;Raleway\u0026#34;, \u0026#34;#C0C0C0\u0026#34;, \u0026#34;none\u0026#34; ] theme-text : [ \u0026#34;Ubuntu\u0026#34;, \u0026#34;#F5FFFA\u0026#34;, \u0026#34;none\u0026#34; ] theme-links : [ \u0026#34;#E27924\u0026#34;, \u0026#34;#FF851B\u0026#34; ] theme-code : [ \u0026#34;Fira Code\u0026#34; ] theme-controls : [ \u0026#34;#C0C0C0\u0026#34; ] theme-margins : [ \u0026#34;0\u0026#34;, \u0026#34;15px\u0026#34; ] highlight : ir-black  To view the black theme sample deck live in your browser, click here .\n Fun Fonts Theme Template Demo The following theme template configuration was used to style the fun fonts theme sample deck:\ntheme : template theme-background : [ \u0026#34;white\u0026#34; ] theme-headline : [ \u0026#34;Righteous\u0026#34;, \u0026#34;#E27924\u0026#34;, \u0026#34;none\u0026#34; ] theme-byline : [ \u0026#34;Concert One\u0026#34;, black, \u0026#34;none\u0026#34; ] theme-text : [ \u0026#34;Bubblegum\u0026#34;, \u0026#34;#1C1C1C\u0026#34;, \u0026#34;none\u0026#34; ] theme-links : [ \u0026#34;#E27924\u0026#34;, \u0026#34;#FF851B\u0026#34; ] theme-code : [ \u0026#34;Source Code Pro\u0026#34; ] theme-controls : [ \u0026#34;#484848\u0026#34; ] theme-margins : [ \u0026#34;0\u0026#34;, \u0026#34;15px\u0026#34; ] highlight : tomorrow  To view the fun fonts theme sample deck live in your browser, click here .\n Gradient Theme Template Demo The following theme template configuration was used to style the gradient theme sample deck:\ntheme : template theme-background : [ \u0026#34;linear-gradient(to top, #6dd5ed, #2193b0)\u0026#34; ] theme-headline : [ \u0026#34;Ubuntu\u0026#34;, \u0026#34;white\u0026#34;, \u0026#34;none\u0026#34; ] theme-byline : [ \u0026#34;Ubuntu\u0026#34;, \u0026#34;black\u0026#34;, \u0026#34;none\u0026#34; ] theme-text : [ \u0026#34;Raleway\u0026#34;, \u0026#34;#F5FFFA\u0026#34;, \u0026#34;none\u0026#34; ] theme-links : [ \u0026#34;#0295BB\u0026#34;, \u0026#34;#C0C0C0\u0026#34; ] theme-code : [ \u0026#34;Inconsolata\u0026#34; ] theme-controls : [ \u0026#34;#484848\u0026#34; ] theme-margins : [ \u0026#34;0\u0026#34;, \u0026#34;15px\u0026#34; ] highlight : ir-black  To view the gradient theme sample deck live in your browser, click here .\n Split Screen Theme Template Demo The following theme template configuration was used to style the split screen theme sample deck demonstrating a code font with symbol ligatures:\ntheme : template theme-background : [ \u0026#34;linear-gradient(180deg, white 75%, black 25%)\u0026#34; ] theme-headline : [ \u0026#34;Montserrat\u0026#34;, \u0026#34;#93C54B\u0026#34;, \u0026#34;none\u0026#34; ] theme-byline : [ \u0026#34;Montserrat\u0026#34;, \u0026#34;#111111\u0026#34;, \u0026#34;none\u0026#34; ] theme-text : [ \u0026#34;Raleway\u0026#34;, \u0026#34;#1C1C1C\u0026#34;, \u0026#34;none\u0026#34; ] theme-links : [ \u0026#34;#62A503\u0026#34;, \u0026#34;#718C00\u0026#34; ] theme-code : [ \u0026#34;Fira Code\u0026#34; ] theme-controls : [ \u0026#34;#C0C0C0\u0026#34; ] theme-margins : [ \u0026#34;0\u0026#34;, \u0026#34;15px\u0026#34; ] highlight : tomorrow  To view the split theme sample deck live in your browser, click here .\n Fun Code Theme Template Demo The following theme template configuration was used to activate a theme sample deck demonstrating a highly stylized code font with semi-connected cursive italics and symbol ligatures:\ntheme : template theme-background : [ \u0026#34;linear-gradient(100deg, white 90%, #BE5869 10%)\u0026#34; ] theme-headline : [ \u0026#34;Montserrat\u0026#34;, \u0026#34;#BE5869\u0026#34;, \u0026#34;none\u0026#34; ] theme-byline : [ \u0026#34;Montserrat\u0026#34;, \u0026#34;#111111\u0026#34;, \u0026#34;none\u0026#34; ] theme-text : [ \u0026#34;Raleway\u0026#34;, \u0026#34;#333\u0026#34;, \u0026#34;none\u0026#34; ] theme-links : [ \u0026#34;#7FDBFF\u0026#34;, \u0026#34;#0074D9\u0026#34; ] theme-controls : [ \u0026#34;#C0C0C0\u0026#34; ] theme-code : [ \u0026#34;Victor Mono Italic\u0026#34; ] highlight : tomorrow  To view the split theme sample deck live in your browser, click here .\n "
},
{
	"uri": "https://gitpitch.com/docs/the-template/vertical-slide-designs/",
	"title": "Vertical BG Slide Designs",
	"tags": [],
	"description": "",
	"content": " To reproduce any of the slide background designs shown in this guide simply copy-and-paste the corresponding markdown snippet directly into the PITCHME.md for your GitPitch slide deck.\n Click the small icon in the top-right corner of any markdown block below to copy the markdown snippet.\n All of the markdown snippets that follow in this guide make use of GitPitch color slide delimiters . Each snippet displays placeholder colors and content. You can replace these placeholder values with custom values as appropriate to your slide deck.\nTip! Background Slide Design Templates If you find a background slide design here that you would like to set as the base design for every slide in your deck, you can activate the design globally using the Theme Template Background Property .\nVertical Slide Design A ---?color=linear-gradient(90deg, black 25%, white 25%) @snap[west span-15 text-center h1-white] # A @snapend @snap[east span-75 text-center] # @fa[laptop-code fa-3x text-gold] @snapend  Note, the laptop icon that appears on this slide is placeholder content, rendered by the Font Awesome Widget . It is intended that you replace this sample markdown content with your custom slide content.\n Vertical Slide Design B ---?color=linear-gradient(90deg, #1F6ED4 33.33%, white 33.33%) @snap[west span-25 text-center h1-white] # Bb @snapend @snap[east span-66 text-center] # @fa[laptop-code fa-3x text-blue] @snapend  Note, the laptop icon that appears on this slide is placeholder content, rendered by the Font Awesome Widget . It is intended that you replace this sample markdown content with your custom slide content.\n Vertical Slide Design C ---?color=linear-gradient(90deg, #005f6b 50%, white 50%) @snap[west span-40 text-center h1-white] # Cccc @snapend @snap[east span-50 text-center] # @fa[laptop-code fa-2x text-black] @snapend  Note, the laptop icon that appears on this slide is placeholder content, rendered by the Font Awesome Widget . It is intended that you replace this sample markdown content with your custom slide content.\n Vertical Slide Design D ---?color=linear-gradient(90deg, #1F6ED4 66.66%, white 33.33%) @snap[west span-66 text-center h1-white] # Ddddd @snapend @snap[east span-25 text-center] # @fa[laptop-code text-black] @snapend  Note, the laptop icon that appears on this slide is placeholder content, rendered by the Font Awesome Widget . It is intended that you replace this sample markdown content with your custom slide content.\n Vertical Slide Design E ---?color=linear-gradient(90deg, black 75%, white 25%) @snap[west span-75 text-center h1-white] # Eeeeeee @snapend @snap[east span-20 text-right] # @fa[laptop-code fa-xs text-gold] @snapend  Note, the laptop icon that appears on this slide is placeholder content, rendered by the Font Awesome Widget . It is intended that you replace this sample markdown content with your custom slide content.\n "
},
{
	"uri": "https://gitpitch.com/docs/markdown-features/",
	"title": "Work with Markdown",
	"tags": [],
	"description": "",
	"content": "Chapter 6 Work with Markdown Plain Markdown. Plus GitPitch Markdown Widgets.\n"
},
{
	"uri": "https://gitpitch.com/docs/the-template/angled-slide-designs/",
	"title": "Angled BG Slide Designs",
	"tags": [],
	"description": "",
	"content": " To reproduce any of the slide background designs shown in this guide simply copy-and-paste the corresponding markdown snippet directly into the PITCHME.md for your GitPitch slide deck.\n Click the small icon in the top-right corner of any markdown block below to copy the markdown snippet.\n All of the markdown snippets that follow in this guide make use of GitPitch color slide delimiters . Each snippet displays placeholder colors and content. You can replace these placeholder values with custom values as appropriate to your slide deck.\nTip! Background Slide Design Templates If you find a background slide design here that you would like to set as the base design for every slide in your deck, you can activate the design globally using the Theme Template Background Property .\nAngled Slide Design A ---?color=linear-gradient(100deg, white 50%, #1F6ED4 50.2%) @snap[west span-40] # @fa[laptop-code fa-2x text-black] @snapend @snap[east span-40 h2-white] ## Eeeeee @snapend  Note, the laptop icon that appears on this slide is placeholder content, rendered by the Font Awesome Widget . It is intended that you replace this sample markdown content with your custom slide content.\n Angled Slide Design B ---?color=linear-gradient(80deg, white 50%, #005f6b 50.2%) @snap[west span-40] # @fa[laptop-code fa-2x text-black] @snapend @snap[east span-40 h2-white] ## Eeeeee @snapend  Note, the laptop icon that appears on this slide is placeholder content, rendered by the Font Awesome Widget . It is intended that you replace this sample markdown content with your custom slide content.\n Angled Slide Design C ---?color=linear-gradient(to top right, #5BE7C4 50%, white 50.2%) @snap[south-west span-40 h2-black] ## Eeeeee @snapend @snap[north-east span-40] # @fa[laptop-code fa-2x text-black] @snapend  Note, the laptop icon that appears on this slide is placeholder content, rendered by the Font Awesome Widget . It is intended that you replace this sample markdown content with your custom slide content.\n Angled Slide Design D ---?color=linear-gradient(to top left, #00dffc 50%, white 50.2%) @snap[north-west span-40] # @fa[laptop-code fa-2x text-black] @snapend @snap[south-east span-40 h2-black] ## Eeeeee @snapend  Note, the laptop icon that appears on this slide is placeholder content, rendered by the Font Awesome Widget . It is intended that you replace this sample markdown content with your custom slide content.\n "
},
{
	"uri": "https://gitpitch.com/docs/image-features/animations/",
	"title": "Background Animations",
	"tags": [],
	"description": "",
	"content": " Important! Remember to size-optimize your presentation images for the Web.\n Learn By Example   Consecutive image delimiters can be used to create an seamless animation effect using a series of related background images.\nTo achieve a fluid animation, the slide transition setting - for the entire presentation or for the individual slides participating in the animation - must be set to none.\nLearn By Example This PITCHME.md markdown snippet:\n---?image=assets/img/grav-open-course-workflow-1.png\u0026amp;size=contain ---?image=assets/img/grav-open-course-workflow-2.png\u0026amp;size=contain ---?image=assets/img/grav-open-course-workflow-3.png\u0026amp;size=contain ---?image=assets/img/grav-open-course-workflow-4.png\u0026amp;size=contain Results in the rendering of the following series of slides:\nNote, the above example markdown snippet assumes the global slide transition setting for the presentation is none. If the global slide transition setting for your presentation is active - for example slide, zoom, convex, concave etc - then you can disable the transition for the individual slides participating in the animation as follows:\n---?image=assets/img/grav-open-course-workflow-1.png\u0026amp;size=contain\u0026amp;transition=none ---?image=assets/img/grav-open-course-workflow-2.png\u0026amp;size=contain\u0026amp;transition=none ---?image=assets/img/grav-open-course-workflow-3.png\u0026amp;size=contain\u0026amp;transition=none ---?image=assets/img/grav-open-course-workflow-4.png\u0026amp;size=contain\u0026amp;transition=none Important! Remember to size-optimize your presentation images for the Web.\n"
},
{
	"uri": "https://gitpitch.com/docs/rich-media-features/background-videos/",
	"title": "Background Videos",
	"tags": [],
	"description": "",
	"content": "  Video files must be served from a video streaming CDN such as YouTube or Vimeo. Your repository on GitHub, GitLab or Bitbucket can not be used as a video CDN. However, Pro subscribers can do more .\n  Learn By Example   Basic slide delimiter syntax allows markdown content to be split into a series of slides. Special video delimiter syntax allows overriding the basic delimiter semantics in order to display any MP4 or WebM as a background video on specific slides.\nBackground videos scale to fill the entire background of any slide on which they are defined. For some video content, using background rather than inline embedding can provide an optimal viewing experience.\nLearn By Example Your PITCHME.md file can display any MP4 or WebM video found at an external, absolute URL. For example, the following markdown syntax demonstrates how to display an MP4 video as a slide background:\n---?video=http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 Results in the rendering of the following slide:\n Video files must be served from a video streaming CDN such as YouTube or Vimeo. Your repository on GitHub, GitLab, or Bitbucket can not be used as a video CDN. However, Pro subscribers can do more .\n "
},
{
	"uri": "https://gitpitch.com/docs/code-features/line-numbers/",
	"title": "Code Line Numbers",
	"tags": [],
	"description": "",
	"content": " See the Code Line Numbers Setting documentation for details about activating the display of line-numbers alongside code rendered on slides within your presentation.\n"
},
{
	"uri": "https://gitpitch.com/docs/pro-features/code/",
	"title": "GitPitch Pro Code Features",
	"tags": [],
	"description": "",
	"content": " About  Activate a GitPitch Paid Plan to unlock Pro Code Features.\n Click on any of the links below to get started with Pro Code slide decks.\n Code Widget  Code Widget with Step-and-ZOOM  GitHub GIST Widget  GitHub GIST Widget with Step-and-ZOOM  Code Presenting with Code Filters  Code Presenting with Reveal Properties  Code Presenting with Power Properties  Asciinema Live Terminal Sessions   "
},
{
	"uri": "https://gitpitch.com/docs/layout-features/snap-layouts-example-4/",
	"title": "Snap Layouts Example 4",
	"tags": [],
	"description": "",
	"content": " Snap Layouts Learn By Example  Step 1. Initial Markdown  Step 2. Gradient Background  Step 3. Image Vertical Sizing  Step 4. Step-by-Step Content  Step 5. Step-by-Step Fragments   This guide demonstrates the use of GitPitch Snap Layouts to create the following sample slide.\nStep 1. Initial Markdown The initial markdown snippet for the north of our sample slide looks as follows:\n@snap[north span-40] ### GraphQL @fa[quote-left quote-graphql text-white](A query language for your API) @snapend This markdown snippet renders as follows:\nThe use of the span-40 property ensures that the heading text is constrained to the central portion of our sample slide.\nStep 2. Gradient Background This step updates our markdown to deliver the color-gradient background effect for our sample slide:\n---?color=linear-gradient(0deg, rgba(2,0,36,1) 0%, rgba(0,0,0,1) 35%, rgba(0,212,255,1) 100%) @snap[north span-40] ### GraphQL @fa[quote-left quote-graphql text-white](A query language for your API) @snapend This intermediate markdown snippet renders as follows:\nThis effect is achieved by activating a color gradient on a color delimiter for the sample slide.\nStep 3. Image Vertical Sizing This step updates our markdown with the addition of an image centered and sized around the midpoint of our sample slide:\n---?color=linear-gradient(0deg, rgba(2,0,36,1) 0%, rgba(0,0,0,1) 35%, rgba(0,212,255,1) 100%) @snap[north span-40] ### GraphQL @fa[quote-left quote-graphql text-white](A query language for your API) @snapend @snap[midpoint span-60] ![GATEWAY](assets/img/gateway.png) @snapend This intermediate markdown snippet renders as follows:\nThe use of the span-60 property here ensures the architecture diagram fits vertically between the heading text in the north and the soon-to-be-added descriptive details in the south of our sample slide.\nStep 4. Step-by-Step Content This step updates our markdown with a series of descriptive steps across the south regions of our sample slide:\n---?color=linear-gradient(0deg, rgba(2,0,36,1) 0%, rgba(0,0,0,1) 35%, rgba(0,212,255,1) 100%) @snap[north span-40] ### GraphQL @fa[quote-left quote-graphql text-white](A query language for your API) @snapend @snap[midpoint span-60] ![GATEWAY](assets/img/gateway.png) @snapend @snap[south-west span-30 text-06] @box[rounded text-white box-graphql](Step 1.#Describe your data.) @snapend @snap[south span-30 text-06] @box[rounded text-white box-graphql](Step 2.#Ask for what you want.) @snapend @snap[south-east span-30 text-06] @box[rounded text-white box-graphql](Step 3.#Get predictable results.) @snapend The updated markdown in this snippet makes use of the Boxed Text Widget . It also makes use of built-in Text Font Size Styles to customize the size of the text appearing in the Boxed Text Widgets.\nThis snippet also makes use of a sample custom CSS style called box-graphql that allows us to activate a custom background color for our Boxed Text Widgets. This sample custom CSS style is defined as follows:\n.box-graphql { background: rgba(0,212,255,1); } You can define your own custom CSS styles to be used as properties on any Markdown Widget in the same way. This intermediate markdown snippet renders as follows:\nStep 4. Step-by-Step Fragments This final step updates our markdown in order to reveal individual details on the slide one-by-one. As distinct to revealing all details on the sample slide at once:\n---?color=linear-gradient(0deg, rgba(2,0,36,1) 0%, rgba(0,0,0,1) 35%, rgba(0,212,255,1) 100%) @snap[north span-40] ### GraphQL @fa[quote-left quote-graphql text-white](A query language for your API) @snapend @snap[midpoint span-60] ![GATEWAY](assets/img/gateway.png) @snapend @snap[south-west span-30 text-06 fragment] @box[rounded text-white box-graphql](Step 1.#Describe your data.) @snapend @snap[south span-30 text-06 fragment] @box[rounded text-white box-graphql](Step 2.#Ask for what you want.) @snapend @snap[south-east span-30 text-06 fragment] @box[rounded text-white box-graphql](Step 3.#Get predictable results.) @snapend The updated markdown in this snippet makes use of the fragment property on each of the south snap-regions.\nThis final markdown snippet renders our sample slide as follows:\nCheck out the next Snap Layouts Example for more sophisticated snap-layouts tips and tricks.\n"
},
{
	"uri": "https://gitpitch.com/docs/settings/transition/",
	"title": "Transition Setting",
	"tags": [],
	"description": "",
	"content": " Purpose The transition setting lets you select the default slide transition style for your presentation.\nSample Syntax transition : fade Details  Slideshow settings are activated using a PITCHME.yaml properties file.\n Your chosen transition setting is activated by default for all slides within your presentation. To override this default behavior, see slide specific transition override .\nGitPitch currently supports the following slide transition styles:\n none (default) slide fade convex concave zoom   If you do not explicitly set a value for the transition setting your slides will automatically transition using the default transition style - the none transition.\n Important! Snap Layouts v Slide Transitions GitPitch supports snap-Layouts that can be used to control the placement of content on any slide. If you use snap-layouts to build your presentations then any slide rendering snapped-content must disable transitions in order to ensure smooth slide rendering.\nFor further details, including more detailed background and concrete recommendations please see the snap-layout slide transitions guide.\nSlide Specific Transition Override See transition shortcut syntax for details on how you can easily override the transition style for individual slides within your presentation.\n"
},
{
	"uri": "https://gitpitch.com/docs/code-features/",
	"title": "Work with Code",
	"tags": [],
	"description": "",
	"content": "Chapter 7 Work with Code Live Code Presenting. Filter. Step. ZOOM.\n"
},
{
	"uri": "https://gitpitch.com/docs/settings/title/",
	"title": "Title Setting",
	"tags": [],
	"description": "",
	"content": " Purpose The title setting lets you set a custom HTML title for your slideshow presentation.\n Note: The title setting is a Pro Power feature only.\n Sample Syntax title : \u0026#34;Do More With Markdown\u0026#34; Details  Slideshow settings are activated using a PITCHME.yaml properties file.\n When activated, a custom title for your presentation has the following affects:\n Displays a custom title for the presentation in search-engine results Defines a custom title for the presentation in the browser toolbar or tab Provides a custom title for the presentation when it is added to favorites  For example, here is a sample custom title set in a PITCHME.yaml settings file:\ntitle : \u0026#34;Markdown Magic - Web Summit Keynote 2019\u0026#34; "
},
{
	"uri": "https://gitpitch.com/docs/settings/footnote/",
	"title": "Footnote Setting",
	"tags": [],
	"description": "",
	"content": " Purpose The footnote setting lets you display a custom footnote on every slide within your presentation.\nSample Syntax footnote : \u0026#34;© 2018 One Tap Ltd.\u0026#34; Details  Slideshow settings are activated using a PITCHME.yaml properties file.\n Footnotes are visible on-screen whether your slideshow presentation is being viewed in normal mode or fullscreen mode .\nHTML Footnotes The footnote setting also supports the use of arbitrary HTML fragments alongside plain text. This feature supports:\n Interactive Footnotes  Custom Footnote Styling   Interactive Footnotes Links can be embedded inside foonotes to help direct your audience to specific content within your presentation or to some external location for further reading, or product, service, or conference promotion.\nFor example, here is a footnote acting as quick link to a special offer on slide 10 within the presentation itself:\nfootnote : \u0026#34;\u0026lt;a href=\u0026#39;#/10\u0026#39;\u0026gt;ACME Dynamite Free Trial!\u0026lt;/a\u0026gt;\u0026#34; Here is another example, this time linking to an external webpage:\n footnote : \u0026quot;GitPitch Pro - \u0026lt;a href='https://gitpitch.com/pro-features'\u0026gt;Learn More\u0026lt;/a\u0026gt;\u0026quot; Custom Footnote Styling If you inject custom HTML into your footnote you are then responsible for styling it.\nFor example, assuming you are using one of the dark themes , you might want to consider making the link color white within your footnote to help it stand out:\nfootnote : \u0026#34;\u0026lt;a style=\u0026#39;text-decoration: none; color: white;\u0026#39; href=\u0026#39;#/12\u0026#39;\u0026gt;Learn More\u0026lt;/a\u0026gt;\u0026#34;  In this example text-decoration style on the link has been disabled. This is recommended, but optional.\n An alternative to adding styling rules directly within the footnote is to define a CSS class for your footnote using custom CSS . Then simply apply the custom style when defining your footnote.\n"
},
{
	"uri": "https://gitpitch.com/docs/pro-features/image/",
	"title": "GitPitch Pro Image Features",
	"tags": [],
	"description": "",
	"content": " About  Activate a GitPitch Paid Plan to unlock Pro Image Features.\n  Leverage SVG Images for Pixel Perfect Rendering  Slide-Specific Background Image Opacity Controls  Global Background Image Opacity Controls  Inline Image Sizing, Opacity, Filters, Transformations, and More   Leverage SVG Images for Pixel Perfect Rendering GitPitch Pro supports rendering SVG images directly from public and private Git repositories. These images can now be used either as inline images or as background images for presentation slides.\nThe exciting promise of SVG images within slideshow presentations is pixel-perfect image rendering at any resolution.\nAs a GitPitch Pro presentation author you can use SVG images in exactly the same way you currently use jpg, png, and gifimages. No additional steps required.\nSlide-Specific Background Image Opacity Controls GitPitch Pro supports background image opacity controls that can be activated for individual background images used by specific slides.\nTo activate an opacity control for a slide-specific background image, identified by an image slide delimiter , you must specify an opacityquery parameter for the image url on the delimiter.\nFor example, to specify 75%transparency for a slide-specific background image you would use the following syntax in your PITCHME.mdfile:\n---?image=assets/image/architecture.jpg\u0026amp;opacity=75 The opacityquery parameter used on this delimter musttake a value that appears within the following series of permissible values: 10, 15, 20, 25, 30,\u0026hellip;,90, 95, 100. Each value represents a percentage of full image transparency at 100%.\nSee the Image Features Background Opacity documentation for related details.\nGlobal Background Image Opacity Controls GitPitch Pro supports background image opacity controls that can be applied globally across all background images used within a presentation.\nTo activate a global opacity control for the default background image your presentation you can use the background-opacityproperty within your PITCHME.yamlfile:\nbackground : assets/image/bg.jpg background-opacity : 50 In this sample configuration, a 50%transparency layer is activated for the default background image on every slide.\nThe background-opacityproperty musttake a value that appears within the following series of permissible values: 10, 15, 20, 25, 30,\u0026hellip;, 90, 95, 100. Each value represents a percentage of full image transparency at 100%.\nSee the Slideshow Background Settings documentation for related details.\n"
},
{
	"uri": "https://gitpitch.com/docs/rich-media-features/offline-video-streaming/",
	"title": "Offline Video Streaming",
	"tags": [],
	"description": "",
	"content": "  GitPitch Paid Plans activate Offline Video Streaming.\n GitPitch Pro users can stream MP4 and WebM video content directly from the local repository when presenting offline using GitPitch Desktop .\nSimply add your MP4 and WebM video content to the Git repository for your presentation and then use relative paths to the video files on standard video delimiter syntax .\n Pro offline video streaming is automatically disabled for presentations viewed online at gitpitch.com.\n "
},
{
	"uri": "https://gitpitch.com/docs/image-features/opacity/",
	"title": "Pro Background Opacity",
	"tags": [],
	"description": "",
	"content": "  GitPitch Paid Plans activate the Background Image Opacity feature.\n  Learn By Example   Important! Remember to size-optimize your presentation images for the Web.\nImage delimiter syntax supports an opacity parameter that gives you the ability to apply opacity filters to individual background images.\nBy default, background images are 100% opaque. Reducing the opacity level from 100 increases the transparency of a background image. The more transparent a slide background image, the more other content on the slide - such as text content - stands out.\nThe following sequence of images demonstrates improved legibility of text content on a sample slide as background image opacity is reduced:\nThe opacity parameter must take a value defined within the range of 1..100. A value of 1 results in a fully transparent image. A value of 100 results in a fully opaque image.\nLearn By Example This PITCHME.md markdown snippet:\n---?image=assets/images/feedback.jpg\u0026amp;size=cover\u0026amp;opacity=20 ## Gather Audience Feedback  @ul[circles] - Speaker Performance - Product Evaluation - Market Research - User Ratings Poll - Academic Research - Customer Satisfaction - And much more... @ulend Results in the rendering of the slide shown below on the left. The slide shown below on the right is provided as an example of this same slide rendered without any opacity filter.\nImportant! Remember to size-optimize your presentation images for the Web.\n"
},
{
	"uri": "https://gitpitch.com/docs/settings/published/",
	"title": "Published Setting",
	"tags": [],
	"description": "",
	"content": " Purpose The published setting is dual purpose:\n  For public repositories, it lets you flag a presentation as post-development and ready for sharing.\n  For private repositories, it also activates GitPitch Publishing Published Mode .\n  This page describes it\u0026rsquo;s usage within public repositories. See the GitPitch Publishing Guide for usage of the published setting within private repositories.\nSample Syntax published : true Details  Slideshow settings are activated using a PITCHME.yaml properties file.\n When the published setting is activated the GitPitch menus for the presentation are automatically simplified:\nWhen published, the Git Service and Theme Chooser panels - only useful during development - are hidden. The Home panel and the Table-of-Contents navigation panel are still available to the author and to the presentation audience.\nThese simplified menus help to reduce needless distraction for your presentation audience. This can help them to stay focused on your slideshow content.\n GitPitch Pro subscribers enjoy additional controls over the GitPitch Menus.\n "
},
{
	"uri": "https://gitpitch.com/docs/layout-features/snap-layouts-example-5/",
	"title": "Snap Layouts Example 5",
	"tags": [],
	"description": "",
	"content": " Snap Layouts Learn By Example  Step 1. Initial Markdown  Step 2. Tilted Split Screen  Step 3. Heading Text  Step 4. PlantUML Generated Diagram   This guide demonstrates the use of GitPitch Snap Layouts to create the following sample slide.\nStep 1. Initial Markdown The initial markdown snippet for the west of our sample slide looks as follows:\n@snap[west span-40 -center] ### GraphQL @fa[quote-left](A query language for your API) ![GRAPHQL](assets/img/graphql.png) @snapend And identical markdown snippet has been used and described in detail in an earlier Snap Layouts Example . The markdown snippet renders as follows:\nStep 2. Tilted Split Screen This step updates our markdown to deliver the tilted split-screen effect for our sample slide:\n---?color=linear-gradient(100deg, white 50%, #567AD2 50%) @snap[west span-40 text-center] ### GraphQL @fa[quote-left quote-graphql](A query language for your API) ![GRAPHQL](assets/img/graphql.png) @snapend This intermediate markdown snippet renders as follows:\nThis effect is achieved by activating a color gradient on a color delimiter for the sample slide. The degree of tilt is determined by the value passed on the first parameter to the linear-gradient function.\nStep 3. Heading Text This step updates our markdown with the addition of heading text in the north-east of our sample slide:\n---?color=linear-gradient(100deg, white 50%, #567AD2 50%) @snap[west span-40 text-center] ### GraphQL @fa[quote-left quote-graphql](A query language for your API) ![GRAPHQL](assets/img/graphql.png) @snapend @snap[north-east span-40 text-center] #### Deployment as a REST API Gateway @snapend This intermediate markdown snippet renders as follows:\nThe use of the span-40 property constrains the heading text to wrap within the bounds of north-east region of the slide. The use of the text-center property sets a custom alignment for the snapped content creating a nice centered heading. The full set of built-in alignment properties are documented in the CSS Utility Styles Guide .\nStep 4. PlantUML Generated Diagram This final step updates our markdown to inject a PlantUML Diagram generated from a plain-text description into the east of our sample slide:\n---?color=linear-gradient(100deg, white 50%, #567AD2 50%) @snap[west span-40 text-center] ### GraphQL @fa[quote-left quote-graphql](A query language for your API) ![GRAPHQL](assets/img/graphql.png) @snapend @snap[north-east span-40 text-center] #### Deployment as a REST API Gateway @snapend @snap[south-east span-40] @uml[bg-white code-shadow](src/uml/graphql.puml) @snapend The use of the span-40 property here controls the width and height of the PlantUML SVG image rendered on our sample slide. This SVG image is generated using the UML Widget for Diagrams .\nAs a final note, the code-shadow property is a custom CSS style used to deliver a nice shadow effect for our sample UML diagram. This sample custom CSS style is defined as follows:\n.code-shadow { box-shadow:0 10px 16px 10px rgba(0,0,0,0.2), 0 6px 20px 10px rgba(0,0,0,0.19) !important; } This final markdown snippet renders as follows:\n"
},
{
	"uri": "https://gitpitch.com/docs/the-template/unordered-list-slide-designs/",
	"title": "Unordered List Slide Designs",
	"tags": [],
	"description": "",
	"content": " To reproduce any of the unordered list slide designs shown in this guide simply copy-and-paste the corresponding markdown snippet directly into the PITCHME.md for your GitPitch slide deck.\n Click the small icon in the top-right corner of any markdown block below to copy the markdown snippet.\n All of the markdown snippets that follow in this guide make use of GitPitch markdown list widget syntax . This syntax lets you activate built-in Theme Template properties and custom CSS styles on list content. Note, list item fragments are disabled by default in each of the sample markdown snippets in this guide.\nUnordered List Slide Design A This template snippet uses the Theme Template default rendering style for unordered list content:\n--- @ul[](false) - Lorem ipsum dolor sit amet. - Aliquam tincidunt mauris eu risus. - Vestibulum auctor dapibus neque. - Nunc dignissim risus id metus. - Cras ornare tristique elit. - Vivamus vestibulum ntulla nec ante. @ulend Unordered List Slide Design B This template snippets uses the following Theme Template built-in properties:\n The list-spaced-bullets property is used to increase the vertical spacing between list items  ---?color=#005f6b @ul[list-spaced-bullets](false) - Lorem ipsum dolor sit amet. - Aliquam tincidunt mauris eu risus. - Vestibulum auctor dapibus neque. - Nunc dignissim risus id metus. - Cras ornare tristique elit. - Vivamus vestibulum ntulla nec ante. @ulend Unordered List Slide Design C This template snippets uses the Theme Template default rendering style for unordered lists with nested items:\n---?color=#fef4a9 @ul[](false) - Lorem ipsum dolor sit amet. - Aliquam tincidunt mauris eu risus. - Vestibulum auctor dapibus neque. - Cras ornare tristique elit. - Vivamus vestibulum ntulla nec ante. - Praesent placerat risus quis eros. - Integer vitae libero ac risus egestas. @ulend Unordered List Slide Design D This template snippets uses the following Theme Template built-in properties and CSS Utility Styles :\n The list-circle-bullets property is used to activate circle bullet points for each list item The list-spaced-bullets property is used to increase the vertical spacing between list items The text-white utility style is used to set a custom color for the list items  ---?color=linear-gradient(to bottom, #06beb6, #48b1bf) @ul[list-circle-bullets list-spaced-bullets text-white](false) - Lorem ipsum dolor sit amet. - Aliquam tincidunt mauris eu risus. - Vestibulum auctor dapibus neque. - Nunc dignissim risus id metus. - Cras ornare tristique elit. - Vivamus vestibulum ntulla nec ante. @ulend Unordered List Slide Design E This template snippets uses the following Theme Template built-in properties:\n The list-square-bullets property is used to activate square bullet points for each list item  --- @ul[list-square-bullets](false) - Lorem ipsum dolor sit amet. - Aliquam tincidunt mauris eu risus. - Vestibulum auctor dapibus neque. - Nunc dignissim risus id metus. - Cras ornare tristique elit. - Vivamus vestibulum ntulla nec ante. @ulend Unordered List Slide Design F This template snippets uses the following Theme Template built-in properties and CSS Utility Styles to improve the legibility of verbose list items on your slide:\n The list-spaced-bullets property is used to increase the vertical spacing between list items The text-08 utility style is used to set a custom font size for the list items  ---?color=#005f6b @ul[list-spaced-bullets text-08](false) - Morbi in sem quis dui placerat ornare. Pellentesque odio nisi, euismod in, pharetra a, ultricies in, diam. - Praesent dapibus, neque id cursus faucibus, tortor neque egestas augue, eu vulputate magna eros eu erat. - Phasellus ultrices nulla quis nibh. Quisque a lectus. Donec consectetuer ligula vulputate sem tristique cursus. @ulend To help you understand the benefits of this template look at the following side-by-side screenshots:\nThe screenshot shown on the left takes advantage of this template to reduce the weight of content on the slide. In some use cases, this approach can greatly improve the legibility and overall effectiveness of the slide. The screenshot on the right shows the default rendering of this same list content.\n In practice, you will need to activate a text-xx value appropriate to the specific content within your list.\n "
},
{
	"uri": "https://gitpitch.com/docs/image-features/",
	"title": "Work with Images",
	"tags": [],
	"description": "",
	"content": "Chapter 8 Work with Images Image Size. Scale. Position. Filter. Repeat.\n"
},
{
	"uri": "https://gitpitch.com/docs/pro-features/power/",
	"title": "GitPitch Pro Power Features",
	"tags": [],
	"description": "",
	"content": " About  Activate a GitPitch Paid Plan to unlock Pro Power Features.\n  Pro Code Features  Pro Audio Features  Pro Image Features  Google Web Fonts  Emoji Widget  Tweet Widget  Table Data Widget  UML Widget for Diagrams  UML Widget for LaTeX \u0026#43; AsciiMath  Asciinema Terminal Sessions  Offline Video Streaming  Pro Only Twitter Card Settings  Pro Only Slideshow Title Setting  Pro Only Slideshow Menu Control   Remember to check back here periodically as new power features may be added over time.\nGoogle Web Fonts GitPitch delivers beautiful typographic options for GitPitch Pro users by making a large set of Google Web Fonts available directly within the Theme Template .\nCustom fonts can be activated for regular slide content. Plus a set of monospaced fonts are also available to customize the appearance of code rendered on your slides. For detailed Google Web Fonts customization tips see the Theme Template Fonts Guide .\nEmoji Widget The @emoji widget supports the rendering of hundreds of different emojis including emojis for people, places, symbols, objects, activities, and foods. Using this widget ensures that your widgets will render properly whether working online, offline, or exporting your slide decks to Microsoft PowerPoint or PDF .\nFor further details see the Emoji Widget Guide .\nTweet Widget The @tweet widget supports the rendering of Tweets on any slide.\nFor further details see the Tweet Widget Guide .\nTable Data Widget The @table widget renders comma-separated and tab-separated file data as tables.\nFor further details see the Table Data Widget Guide .\nUML Widget for Diagrams The @uml widget supports the creation of pixel-perfect UML diagrams generated as SVG images from simple text-based descriptions. GitPitch UML diagram support is powered by PlantUML .\nFor further details see the UML Diagram Widget Guide .\nUML Widget for LaTeX + AsciiMath The @uml widget supports some excellent extensions for rendering math formulas on any slide.\nFor further details, see the UML LaTeX \u0026#43; Ascii Math Widget Guide .\nAsciinema Terminal Sessions As developers, when we move beyond code editors and IDEs, we typically end up at the command line. Now as a GitPitch Pro user, you can take advantage of support for capturing, and then sharing live terminal sessions within your slide decks. This feature is available whether your are working online or offline .\nFor detailed Pro Terminal Sesssions documentation including sample markdown, see the Terminal Sessions guide .\nOffline Video Streaming GitPitch Pro user can stream MP4 and WebM video content directly from the local repository when presenting offline using GitPitch Desktop .\nSimply add your MP4 and WebM video content to the Git repository for your presentation and then use relative paths to the video files on standard video delimiter syntax.\nThis feature is perfect for live presentations when you need to deliver course or training materials that includes video content and you do not want to fall victim to the demo gods.\nFor further details about offline video streaming, see the Offline Video Streaming Guide .\nPro Only Twitter Card Settings  This feature is cloud only, so not activated for Lite subscriptions.\n As a presentation author you want to maximize the results when you or anyone else shares a link to your slide deck on services like Twitter, Slack, or LinkedIn.\nBy default, links to GitPitch slideshows are rendered as a Twitter Card or Open Graph card using default text and images, as follows:\nAs a Pro user, you can customize the content of these social media cards when displayed on a wide range of services. For details, see the Twitter Card Settings Guide .\nPro Only Slideshow Title Setting  This feature is cloud only. So not activated for Lite subscriptions.\n By default, GitPitch slideshow presentations render using a fixed HTML title, GitPitch Markdown Presentation. However, there are often times when you will want to set a custom title for your presentations to avail of the following benefits:\n Display a custom title for the presentation in search-engine results Define a custom title for the presentation in the browser toolbar or tab Provide a custom title for the presentation when it is added to favorites  You can activate a custom HTML title for any presentation using the titleproperty within your PITCHME.yamlfile:\ntitle : \u0026quot;Markdown Magic - Web Summit Keynote 2019\u0026quot; As a GitPitch Pro user you can take advantage of the title setting to activate a custom title for your presentations.\nPro Only Slideshow Menu Control  This feature is cloud only. So not activated for Lite subscriptions.\n By default, every GitPitch slideshow presentation displays a slideshow menu in the bottom-left corner of each slide. This menu gives both you and your online audience access to basic information and navigation by table-of-contents .\nHowever, there are times when you want your audience to focus exclusively on your online presentation content. Without the potential distraction of the slideshow menu. For these occasions, you can activate the pro-menus-hiddenproperty within your PITCHME.yamlfile:\npro-menus-hidden : true When this property is enabled, the slideshow menuwill not be displayed when your presentation is rendered.\nAs a presentation author you can control the visibility of the slideshow menufor your presentations by enabling or disabling the pro-menus-hiddenproperty at any time.\n"
},
{
	"uri": "https://gitpitch.com/docs/image-features/size-limits/",
	"title": "Image Size Limits",
	"tags": [],
	"description": "",
	"content": "  Offline Image Size Limits  Online Image Size Limits   Offline Image Size Limits By default, GitPitch Desktop enforces the same image sizes limits as those enforced when publishing slide decks online :\nHowever, the Desktop also includes the following features:\n A PITCHME.yaml setting that allows you to disable image size limits for any deck A built-in image compression tool that identifies and compresses oversized images  For details about these Desktop features, see the Desktop Image Tools Guide .\nOnline Image Size Limits GitPitch enforces image sizes limits for slide decks published online at gitpitch.com. These limits exist to ensure GitPitch slide decks viewed online can be loaded and rendered within the browser without undue delays. A 1Mb file size limit is enforced for each individual JPG, PNG, and GIF image.\nThese file size limits affect image content displayed inline or as backgrounds on slides.\nThe gitpitch.com server automatically detects, rejects, and reports images that exceed the size-limit directly within your slide decks. For example, the following screenshots show how inline and background images that exceed the 1Mb size limit are reported directly within their respective slides:\nIf you are working offline with GitPitch Desktop, see the built-in image compression tools . If you are not using the Desktop, the following free online services for image compression are recommended:\n tinypng.com  tinyjpg.com  ezgif.com   "
},
{
	"uri": "https://gitpitch.com/docs/settings/loop/",
	"title": "Loop Setting",
	"tags": [],
	"description": "",
	"content": " Purpose The loop setting lets you activate circular navigation for your slideshow presentation.\nSample Syntax loop : true Details  Slideshow settings are activated using a PITCHME.yaml properties file.\n When activated, the loop setting permits direct navigation from the last slide within your slideshow back to the first slide.\nBy default, this style of looping or circular navigation is disabled.\n"
},
{
	"uri": "https://gitpitch.com/docs/the-template/ordered-list-slide-designs/",
	"title": "Ordered List Slide Designs",
	"tags": [],
	"description": "",
	"content": " To reproduce any of the ordered list slide designs shown in this guide simply copy-and-paste the corresponding markdown snippet directly into the PITCHME.md for your GitPitch slide deck.\n Click the small icon in the top-right corner of any markdown block below to copy the markdown snippet.\n All of the markdown snippets that follow in this guide make use of GitPitch markdown list widget syntax . This syntax lets you activate built-in Theme Template properties and custom CSS styles on list content. Note, list item fragments are disabled by default in each of the sample markdown snippets in this guide.\nOrdered List Slide Design A This template snippet uses the Theme Template default rendering style for ordered list content:\n--- @ol[](false) 1. Lorem ipsum dolor sit amet. 2. Aliquam tincidunt mauris eu risus. 3. Vestibulum auctor dapibus neque. 4. Nunc dignissim risus id metus. 5. Cras ornare tristique elit. 6. Vivamus vestibulum ntulla nec ante. @olend Ordered List Slide Design B This template snippets uses the following Theme Template built-in properties:\n The list-spaced-bullets property is used to increase the vertical spacing between list items  ---?color=#005f6b @ol[list-spaced-bullets](false) 1. Lorem ipsum dolor sit amet. 2. Aliquam tincidunt mauris eu risus. 3. Vestibulum auctor dapibus neque. 4. Nunc dignissim risus id metus. 5. Cras ornare tristique elit. 6. Vivamus vestibulum ntulla nec ante. @olend Ordered List Slide Design C This template snippets uses the following Theme Template built-in properties:\n The list-boxed-bullets property is used to activate boxed bullet points for ordered list items  --- @ol[list-boxed-bullets](false) 1. Lorem ipsum dolor sit amet. 2. Aliquam tincidunt mauris eu risus. 3. Vestibulum auctor dapibus neque. 4. Nunc dignissim risus id metus. 5. Cras ornare tristique elit. 6. Vivamus vestibulum ntulla nec ante. @olend The default color scheme for list-boxed-bullets is determined by the active Theme Template properties used by your slide deck. See the next slide design template for a demonstration of a custom color scheme.\nOrdered List Slide Design D This template snippets uses the following Theme Template built-in properties and Custom CSS Styles :\n The list-spaced-bullets property is used to increase the vertical spacing between list items The list-boxed-bullets property is used to activate boxed bullet points for ordered list items The custom-boxed-orange style is used to set a custom color scheme for boxed bullet points  ---?color=black @ol[list-spaced-bullets list-boxed-bullets custom-boxed-orange](false) 1. Lorem ipsum dolor sit amet. 2. Aliquam tincidunt mauris eu risus. 3. Vestibulum auctor dapibus neque. 4. Nunc dignissim risus id metus. 5. Cras ornare tristique elit. 6. Vivamus vestibulum ntulla nec ante. @olend The Custom CSS Style custom-boxed-orange for this template snippet is defined as follows:\n.custom-boxed-orange li::before { color: #fff; background-color: #E27924; } To activate a custom color scheme for list-boxed-bullets for your own lists, create and register a style rule that specifies any combination of color and background-color property values within the style rule.\nOrdered List Slide Design E This template snippets uses the following Theme Template built-in properties, Custom CSS Styles , and CSS Utility Styles :\n The list-boxed-bullets property is used to activate boxed bullet points for ordered list items The custom-boxed-white style is used to set a custom color scheme for boxed bullet points The text-white utility style is used to set a custom color for the list items  ---?color=linear-gradient(to top left, #BE5869, #403A3E) @ol[list-boxed-bullets custom-boxed-white text-white](false) 1. Lorem ipsum dolor sit amet. 2. Aliquam tincidunt mauris eu risus. 3. Vestibulum auctor dapibus neque. 4. Nunc dignissim risus id metus. 5. Cras ornare tristique elit. 6. Vivamus vestibulum ntulla nec ante. @olend The Custom CSS Style custom-boxed-white for this template snippet is defined as follows:\n.custom-boxed-white li::before { color: #BE5869; background-color: #FFF; } To activate a custom color scheme for list-boxed-bullets for your own lists, create and register a style rule that specifies any combination of color and background-color property values within the style rule.\nOrdered List Slide Design F This template snippets uses the following Theme Template built-in properties:\n The list-alpha-bullets property is used to activate upper-alpha bullet points for each list item The list-spaced-bullets property is used to increase the vertical spacing between list items  ---?color=#fef4a9 @ol[list-alpha-bullets list-spaced-bullets](false) - Lorem ipsum dolor sit amet. - Aliquam tincidunt mauris eu risus. - Vestibulum auctor dapibus neque. - Nunc dignissim risus id metus. - Cras ornare tristique elit. - Vivamus vestibulum ntulla nec ante. @olend Ordered List Slide Design G This template snippets uses the following Theme Template built-in properties:\n The list-roman-bullets property is used to activate lower-roman bullet points for each list item  --- @ol[list-roman-bullets](false) 1. Lorem ipsum dolor sit amet. 2. Aliquam tincidunt mauris eu risus. 3. Vestibulum auctor dapibus neque. 4. Nunc dignissim risus id metus. 5. Cras ornare tristique elit. 6. Vivamus vestibulum ntulla nec ante. @olend Ordered List Slide Design H This template snippets uses the following Theme Template built-in properties and CSS Utility Styles to improve the legibility of verbose list items on your slide:\n The list-spaced-bullets property is used to increase the vertical spacing between list items The list-boxed-bullets property is used to activate boxed bullet points for ordered list items The text-08 utility style is used to set a custom font size for the list items  --- @ol[list-spaced-bullets list-boxed-bullets text-08](false) 1. Morbi in sem quis dui placerat ornare. Pellentesque odio nisi, euismod in, pharetra a, ultricies in, diam. 2. Praesent dapibus, neque id cursus faucibus, tortor neque egestas augue, eu vulputate magna eros eu erat. 3. Phasellus ultrices nulla quis nibh. Quisque a lectus. Donec consectetuer ligula vulputate sem tristique cursus. @olend To help you understand the benefits of this template look at the following side-by-side screenshots:\nThe screenshot shown on the left takes advantage of this template to reduce the weight of content on the slide. In some use cases, this approach can greatly improve the legibility and overall effectiveness of the slide. The screenshot on the right shows the default rendering of this same list content.\n In practice, you will need to activate a text-xx value appropriate to the specific content within your list.\n "
},
{
	"uri": "https://gitpitch.com/docs/code-features/pro-code-widgets/",
	"title": "Pro Code Widgets",
	"tags": [],
	"description": "",
	"content": "  Activate a GitPitch Paid Plan to unlock Pro Code Widgets.\n The Pro Code and Pro GIST widgets support the targeted injection of source code directly on your slides - including directly into any location on the Snap Layouts Grid .\n The Code Widget  The GIST Widget   The Code Widget The Code Widget renders source code from any file directly onto your slide. All paths are relative to the root directory of your local working directory or repository. The widget is created using the following @code syntax in your PITCHME.md markdown file:\n@code[lang-hint ...](path/to/file.ext) The lang-hint must be specified as the first property on this widget. For details, see The Importance of Code Language Hints . The following markdown snippet uses the @code widget to render a sample Go source file:\n@code[golang](src/go/sample.go) This markdown snippet renders as follows:\nThe @code widget works seamlessly with traditional GitPitch live code presenting with annotations . For example:\n @code[golang](src/go/sample.go) @snap[south span-100] @[1](You can step through your code directly within your slide deck.) @[3](Using the GitPitch live code presenting with annotations feature.) @[5-7](Which means no need to switch back and forth between your slide deck and IDE.) @snapend The GIST Widget The GitHub GIST Widget renders source code from any GitHub GIST directly onto your slide. This feature is available to all presentations whether hosted on GitHub, GitLab, or Bitbucket. The widget is created using the following @gist syntax in your PITCHME.md markdown file:\n@gist[lang-hint ...](username/gist) The lang-hint must be specified as the first property on this widget. For details, see The Importance of Code Language Hints . The following markdown snippet uses the @gist widget to render a sample Groovy source file:\n@gist[groovy](onetapbeyond/8da53731fd54bab9d5c6) This markdown snippet renders as follows:\nThe @gist widget works seamlessly with traditional GitPitch live code presenting with annotations . For example:\n @gist[groovy](onetapbeyond/8da53731fd54bab9d5c6) @snap[south span-100] @[1](You can step through your code directly within your slide deck.) @[3](Using the GitPitch live code presenting with annotations feature.) @[5-7](Which means no need to switch back and forth between your slide deck and IDE.) @snapend "
},
{
	"uri": "https://gitpitch.com/docs/diagram-features/",
	"title": "Work with Diagrams",
	"tags": [],
	"description": "",
	"content": "Chapter 9 Work with Diagrams Sketches. Cloud Diagrams. Mermaid. PlantUML. Graphviz. Charts.\n"
},
{
	"uri": "https://gitpitch.com/docs/auxiliary-features/revealjs/",
	"title": "Built on Reveal.js",
	"tags": [],
	"description": "",
	"content": " GitPitch embraces and extends the slideshow capabilities of the hugely popular and powerful Reveal.js library with the distributed and collaborative file management capabilities of Git to deliver a seamless and unique presentation service on gitpitch.com .\nGitPitch is standing on the shoulders of giants. And adding unique value by offering a modern slide deck solution uniquely adapted for developers.\nGitPitch beyond Reveal.js The get a sense of some of the unique features that make GitPitch a unique modern slide deck solution for developers check out some of the following feature guides:\n GitPitch Desktop  Custom Slide Layouts  Custom Slide Themes  Modular Markdown  Pro Markdown Widgets  Pro Code Features  Pro Audio Features  Pro Power Features  Pro Publishing Features   "
},
{
	"uri": "https://gitpitch.com/docs/settings/lang/",
	"title": "Lang Setting",
	"tags": [],
	"description": "",
	"content": " Purpose The lang setting lets you declare the language of your slide deck to assist search engines and browsers.\nSample Syntax lang : \u0026#34;es\u0026#34; Details  Slideshow settings are activated using a PITCHME.yaml properties file.\n When activated, this setting sets the lang property on the top-level \u0026lt;html lang=\u0026quot;es\u0026quot;\u0026gt; element for your slide deck. By default, this property is not set.\n"
},
{
	"uri": "https://gitpitch.com/docs/code-features/pro-code-zoom/",
	"title": "Pro Code ZOOM",
	"tags": [],
	"description": "",
	"content": "  Activate a GitPitch Paid Plan to unlock Pro Code ZOOM.\n The Pro Code ZOOM feature lets you zoom-in and zoom-out on code on any slide.\n Fenced Code Block with ZOOM  Source Code Delimiter with ZOOM  Code Widget with ZOOM  Code ZOOM within Snap Layouts  Live Code Presenting with Step-and-ZOOM  GitHub GIST Widget with ZOOM  GitHub GIST Widget with Step-and-ZOOM  Code ZOOM-In Properties  Code ZOOM-Out Properties    For a live, interactive GitPitch presentation demonstrating Code Step-and-ZOOM click here .\n Fenced Code Block With ZOOM The ZOOM feature lets you zoom-in or zoom-out on an entire code block when rendering code using a fenced code block on your slide. For example, here is a markdown snippet that activates a custom ZOOM on a fenced code block:\n--- @snap[north span-100] #### Fenced Code Block with Pro Code Zoom @snapend ```sql zoom-20 CREATE TABLE \u0026#34;topic\u0026#34; ( \u0026#34;id\u0026#34; serial NOT NULL PRIMARY KEY, \u0026#34;forum_id\u0026#34; integer NOT NULL, \u0026#34;subject\u0026#34; varchar(255) NOT NULL ); ALTER TABLE \u0026#34;topic\u0026#34; ADD CONSTRAINT forum_id FOREIGN KEY (\u0026#34;forum_id\u0026#34;) REFERENCES \u0026#34;forum\u0026#34; (\u0026#34;id\u0026#34;); ``` Results in the rendering of the following slide:\nNote the use of the zoom-20 property set on the opening triple back-ticks on the fenced code block above. ZOOM-In properties make code appear larger on the slide.\nSource Code Delimiter With ZOOM The ZOOM feature lets you zoom-in or zoom-out on an entire code block when rendering code using a source code delimiter on your slide. For example, here is a markdown snippet that activates a custom ZOOM on a source code delimiter:\n---?code=src/ruby/sample.rb\u0026amp;lang=ruby zoom-21 @snap[north span-100] #### Source Code Delimiter with Pro Code Zoom @snapend Results in the rendering of the following slide:\nNote the use of the zoom-21 property set as a value on the lang option on the source code delimiter above. ZOOM-In properties make code appear larger on the slide.\nCode Widget With ZOOM The ZOOM feature lets you zoom-in or zoom-out on an entire code block when rendering code using a Code Widget on your slide. For example, here is a markdown snippet that activates a custom ZOOM on a code widget:\n@code[golang zoom-21](src/go/sample.go) This markdown snippet renders as follows:\nNote the use of the zoom-21 property set on the code widget above. ZOOM-In properties make code appear larger on the slide.\nCode ZOOM within Snap Layouts The ZOOM feature can be used to customize the rendering of code within the Snap Layouts Grid . For example, here is a markdown snippet that activates a custom ZOOM to deliver a code thumbnail on a sample slide:\n--- @snap[west span-40] @code[golang zoom-07](src/go/sample.go) @snapend @snap[east span-50] ### Live Code Presenting @snapend This markdown snippet renders as follows:\nNote the use of the zoom-07 property on the code widget. The ZOOM-Out properties make code appear smaller on the slide.\nLive Code Presenting with Step-and-ZOOM Live code presenting with Step-and-ZOOM lets you activate custom zoom-in or zoom-out on individual code presenting steps. This feature is available regardless of what approach you have used to inject the source code onto your slide.\nFor example, here is a markdown snippet that demonstrates Step-and-ZOOM activated for a number of live code presenting steps:\n @code[golang zoom-21](src/go/sample.go) @snap[south span-100] @[1, zoom-25](You can step-and-zoom into selected sections of code directly on your slides.) @[3, zoom-25](Using GitPitch live code presenting with optional annotations.) @[5,7, zoom-20](Allowing you to drill-down into your code and focus your audience's attention.) @snapend This markdown snippet renders as follows:\nGitHub GIST Widget with ZOOM The ZOOM feature lets you zoom-in or zoom-out on an entire code block when rendering source code on your slide using the @gist widget. The zoom-in feature is activated by specifying one of the built-in Code ZOOM-In Properties as a property on the widget.\nFor example, here is a markdown snippet that activates a custom zoom property for a @gist widget rendering a Groovy code snippet:\n@gist[groovy zoom-15](onetapbeyond/8da53731fd54bab9d5c6) This markdown snippet renders as follows:\nNote the use of the zoom-15 property set on the @gist widget above. ZOOM-In properties make code appear larger on the slide.\nGitHub GIST Widget with Step-and-ZOOM Here is a markdown snippet that demonstrates Step-and-ZOOM activated for a number of live code presenting steps on a GitHub GIST:\n @gist[groovy zoom-12](onetapbeyond/8da53731fd54bab9d5c6) @snap[south span-100] @[1, zoom-15](You can step-and-zoom into selected sections of code directly on your slides.) @[4, zoom-20](Using GitPitch live code presenting with optional annotations.) @[7-9, zoom-13](Allowing you to drill-down into your code and focus your audience's attention.) @snapend This markdown snippet renders as follows:\nCode ZOOM-In Properties The following ZOOM-In style properties can be used to make source code appear larger on your slide:\n.zoom-11 { font-size: 1.1em !important; line-height: 1.2 !important; } .zoom-12 { font-size: 1.2em !important; line-height: 1.2 !important; } .zoom-13 { font-size: 1.3em !important; line-height: 1.2 !important; } .zoom-14 { font-size: 1.4em !important; line-height: 1.2 !important; } . . . .zoom-18 { font-size: 1.8em !important; line-height: 1.1 !important; } .zoom-19 { font-size: 1.9em !important; line-height: 1.1 !important; } .zoom-20 { font-size: 2.0em !important; line-height: 1.1 !important; } .zoom-21 { font-size: 2.1em !important; line-height: 1.1 !important; } . . . .zoom-58 { font-size: 5.8em !important; line-height: 1.1 !important; } .zoom-59 { font-size: 5.9em !important; line-height: 1.1 !important; } .zoom-60 { font-size: 6.0em !important; line-height: 1.1 !important; } The full series of ZOOM-In styles ranging from zoom-11 through zoom-60 are available to you out-of-the-box. As a Pro user, you can define new styles or override existing zoom styles. See the custom css guide for related details.\nCode ZOOM-Out Properties The following ZOOM-Out style properties can be used to make source code appear smaller on your slide:\n.zoom-01 { font-size: 0.1em !important; line-height: 1.5 !important; } .zoom-02 { font-size: 0.2em !important; line-height: 1.5 !important; } .zoom-03 { font-size: 0.3em !important; line-height: 1.5 !important; } .zoom-04 { font-size: 0.4em !important; line-height: 1.5 !important; } .zoom-05 { font-size: 0.5em !important; line-height: 1.5 !important; } .zoom-06 { font-size: 0.6em !important; line-height: 1.5 !important; } .zoom-07 { font-size: 0.7em !important; line-height: 1.5 !important; } .zoom-08 { font-size: 0.8em !important; line-height: 1.5 !important; } .zoom-09 { font-size: 0.9em !important; line-height: 1.5 !important; } .zoom-10 { font-size: 1.0em !important; line-height: 1.2 !important; } As a Pro user, you can define new styles or override existing zoom styles. See the custom css guide for related details.\n"
},
{
	"uri": "https://gitpitch.com/docs/math-features/",
	"title": "Work with Math",
	"tags": [],
	"description": "",
	"content": "Chapter 10 Work with Math MathJax. LaTeX. AsciiMath.\n"
},
{
	"uri": "https://gitpitch.com/docs/settings/rtl/",
	"title": "RTL Setting",
	"tags": [],
	"description": "",
	"content": " Purpose The rtl setting lets you activate Right-To-Left navigation for your slideshow presentation.\nSample Syntax rtl : true Details  Slideshow settings are activated using a PITCHME.yaml properties file.\n When activated, the rtl setting activates Right-To-Left navigation between slides for your slideshow presentation.\nBy default, Left-To-Right navigation is activated for all slideshow presentations.\n"
},
{
	"uri": "https://gitpitch.com/docs/settings/controls-layout/",
	"title": "Controls Layout Setting",
	"tags": [],
	"description": "",
	"content": " Purpose The controls-layout setting lets you control the position of the navigation controls for your presentation.\nSample Syntax controls-layout : edges Details  Slideshow settings are activated using a PITCHME.yaml properties file.\n By default, the navigation controls for a presentation are found in the bottom-right corner of each slide:\nYou can override this default position by setting an edges value for the controls-layout setting. Edges cause the navigation controls to display in a centered position as shown in the following screenshot:\nControls Layout Interaction with Logo Position Setting If the logo position setting is activated using the bottom-right position then navigation controls for your presentation are automatically displayed using the edges layout.\n"
},
{
	"uri": "https://gitpitch.com/docs/code-features/pro-code-revealing/",
	"title": "Pro Code Revealing",
	"tags": [],
	"description": "",
	"content": "  Activate a GitPitch Paid Planto unlock Pro Code Revealing.\n The Pro Code Revealing feature gives you complete control over how and when code is revealed on your slides.\n Code Slide with Default Reveal Mode  Code Slide with Slow Reveal Mode  Code Slide with Fast Reveal Mode  GitHub GIST Slide with Default Reveal Mode  GitHub GIST Slide with Slow Reveal Mode  GitHub GIST Slide with Fast Reveal Mode    For a live, interactive GitPitch presentation demonstrating Code Revealing click here .\n Code Slide with Default Reveal Mode Default reveal mode describes standard code presenting behavior:\n The full-code is first rendered on your slide. After displaying the full-code, you can then step-focus-and-zoom on specific snippets within that code.  For example, the following markdown activates standard code presenting resulting in default reveal mode for the source code found within the sample.js file:\n--- @code[js zoom-12](src/node/sample.js) @snap[south span-100 text-08] @[1, zoom-17](After displaying the full-code, each code presenting step lets you...) @[3,4, zoom-16](The ability to focus-and-zoom on specific code snippets directly...) @[6-10](Giving you a great way to focus the attention of your audience on what matters most...) @snapend This markdown snippet renders as follows:\nCode Slide with Slow Reveal Mode Slow reveal mode describes the following behavior:\n The full-code on your slide is initially hidden. You can then move from this empty slide to step-focus-and-zoom on specific snippets within that code.   The initial slow reveal mode empty slide can be used to provide breathing space during a live presentation, especially when you are transitioning from regular-discussion content to code-specific content.\n For example, the following markdown activates live code presenting using slow reveal mode on the source code found within the sample.js file:\n--- @code[js code-reveal-slow](src/node/sample.js) @snap[south span-100 text-08] @[1, zoom-20](Code revealing *slow-mode* lets you start by hiding the code on your slide.) @[1-4, zoom-20](And then gradually introduce specific code snippets to your audience.) @[1-10, zoom-12](Again using optional annotations to focus the attention of your audience.) @snapend Note the use of the code-reveal-slow property on the code widget . By activating this property on the widget the rendering behavior automatically changes to deliver slow reveal mode semantics.\nThe above markdown snippet renders as follows:\nThe code-reveal-slow property can be activated on fenced code blocks , source code delimiters , and code widgets .\nCode Slide with Fast Reveal Mode Fast reveal mode describes the following behavior:\n Your initial code slide is bypassed entirely. You therefore move directly to step-focus-and-zoom on specific code snippets.  For example, the following markdown activates live code presenting using fast reveal mode on the source code found within the sample.js file:\n--- @code[js code-reveal-fast](src/node/sample.js) @snap[south span-100 text-08] @[3-4, zoom-20](Code revealing *fast-mode* bypasses the intial full code slide.) @[1-4, zoom-20](This lets you jump straight into sharing specific code snippets...) @[1-10, zoom-12](Again using optional annotations to focus the attention of your audience.) @snapend Note the use of the code-reveal-fast property on the code widget . By activating this property on the widget the rendering behavior automatically changes to deliver fast reveal mode semantics.\nThe above markdown snippet renders as follows:\nThe code-reveal-slow property can be activated on fenced code blocks , source code delimiters , and code widgets .\nGitHub GIST Slide with Default Reveal Mode Default reveal mode describes standard code presenting behavior:\n The full-code is first rendered on your slide. After displaying the full-code, you can then step-focus-and-zoom on specific snippets within that code.  For example, the following markdown activates standard code presenting resulting in default reveal mode for the source code found within the sample GitHub GIST:\n @gist[groovy zoom-15](onetapbeyond/8da53731fd54bab9d5c6) @snap[south span-100] @[1, zoom-15](You can step-and-zoom into selected sections of code directly on your slides.) @[4, zoom-20](Using GitPitch live code presenting with optional annotations.) @[7-9, zoom-13](Allowing you to drill-down into your code and focus your audience's attention.) @snapend GitHub GIST Slide with Slow Reveal Mode Slow reveal mode describes the following behavior:\n The full-code on your slide is initially hidden. You can then move from this empty slide to step-focus-and-zoom on specific snippets within that code.   The initial slow reveal mode empty slide can be used to provide breathing space during a live presentation, especially when you are transitioning from regular-discussion content to code-specific content.\n For example, the following markdown activates live code presenting using slow reveal mode on the source code found within the sample GitHub GIST:\n @gist[groovy zoom-15 code-reveal-slow](onetapbeyond/8da53731fd54bab9d5c6) @snap[south span-100] @[1, zoom-15](You can step-and-zoom into selected sections of code directly on your slides.) @[4, zoom-20](Using GitPitch live code presenting with optional annotations.) @[7-9, zoom-13](Allowing you to drill-down into your code and focus your audience's attention.) @snapend The code-reveal-slow property can be activated on GIST delimiters and GIST widgets .\nGitHub GIST Slide with Fast Reveal Mode Fast reveal mode describes the following behavior:\n Your initial code slide is bypassed entirely. You therefore move directly to step-focus-and-zoom on specific code snippets.  For example, the following markdown activates live code presenting using fast reveal mode on the source code found within the sample GitHub GIST:\n @gist[groovy zoom-15 code-reveal-fast](onetapbeyond/8da53731fd54bab9d5c6) @snap[south span-100] @[1, zoom-15](You can step-and-zoom into selected sections of code directly on your slides.) @[4, zoom-20](Using GitPitch live code presenting with optional annotations.) @[7-9, zoom-13](Allowing you to drill-down into your code and focus your audience's attention.) @snapend The code-reveal-fast property can be activated on GIST delimiters and GIST widgets .\n"
},
{
	"uri": "https://gitpitch.com/docs/rich-media-features/",
	"title": "Work with Rich Media",
	"tags": [],
	"description": "",
	"content": "Chapter 11 Work with Rich Media Colors. Charts. Emoji. Fonts. LaTeX. Tables. UML. Video.\n"
},
{
	"uri": "https://gitpitch.com/docs/settings/print/",
	"title": "Print Settings",
	"tags": [],
	"description": "",
	"content": " Purpose The set of print settings let you customize PDF \u0026#43; PPTX output when exporting GitPitch slide decks.\nDefault Setting Values print-fragments : true print-notes : false print-footer : false Details  Slideshow settings are activated using a PITCHME.yaml properties file.\n By default, the following document export controls are activated:\n Each markdown fragment and code fragment is printed on an individual page. Speaker notes are not printed. Slide footers are not printed.  When all print settings are enabled, the following document export controls are activated:\n Each markdown fragment and code fragment is printed on an individual page. Slide-specific speaker notes are printed on an individual page. Slide footers are printed on each page.  Custom Printing Behavior You can override any of the print setting values for custom behavior by enabling or disabling these settings in your PITCHME.yaml file.\n"
},
{
	"uri": "https://gitpitch.com/docs/math-features/latex-math/",
	"title": "LaTeX + AsciiMath Widget",
	"tags": [],
	"description": "",
	"content": "  Activate a GitPitch Paid Plan to unlock LaTeX + AsciiMath Widget support.\n  UML Widget for LaTeX \u0026#43; AsciiMath  Learn By Example - LaTeX Math  Learn By Example - Ascii Math   UML Widget for LaTeX + AsciiMath The UML Widget provides some excellent extensions for rendering math formulas on any slide. The same conventions, caching policies, and @uml widget syntax apply. This support is provided as an lightweight alternative to using MathJax Formulas .\nIf you follow the @uml syntax conventions you can then use the same syntax to render a math formula on any slide:\n@uml[style...](path/to/formula.puml) The CSS style\u0026hellip; list can make use of any custom styles you define. It can also make use of the built-in span styles giving you control over the rendering width and height of your math formulas.\nLearn By Example - LaTeX Math This PlantUML LaTeX diagram syntax :\n@startuml @startlatex \\sum_{i=0}^{n-1} (a_i + b_i^2) @endlatex @enduml Used within the following PITCHME.md markdown snippet:\n---?color=#E58537; @snap[west span-55] @code[uml rawcode zoom-11](src/uml/latexmath.puml) @snapend @snap[east span-50] @uml[span-100 bg-white](src/uml/latexmath.puml) @snapend Results in the rendering of the following slide:\n Click here to view this slide within a live GitPitch presentation.\n For further details about LaTeX Math Diagrams syntax see the following PlantUML .\nLearn By Example - Ascii Math This PlantUML AsciiMath diagram syntax :\n@startuml :\u0026lt;math\u0026gt;int_0^1f(x)dx\u0026lt;/math\u0026gt;; :\u0026lt;math\u0026gt;x^2+y_1+z_12^34\u0026lt;/math\u0026gt;; @enduml Used within the following PITCHME.md markdown snippet:\n---?color=#E58537; @snap[west span-55] @code[uml rawcode zoom-11](src/uml/asciimath.puml) @snapend @snap[east span-50] @uml[span-100 bg-white](src/uml/asciimath.puml) @snapend Results in the rendering of the following slide:\n Click here to view this slide within a live GitPitch presentation.\n For further details about Ascii Math Diagrams syntax see the following PlantUML Guide .\n"
},
{
	"uri": "https://gitpitch.com/docs/settings/mouse-wheel/",
	"title": "Mouse Wheel Setting",
	"tags": [],
	"description": "",
	"content": " Purpose The mousewheel setting lets you activate navigation by mouse-wheel for your slideshow presentation.\nSample Syntax mousewheel : true Details  Slideshow settings are activated using a PITCHME.yaml properties file.\n When activated, the mousewheel setting activates support for navigation between slides by mouse-wheel. Navigation by keyboard is unaffected by this setting.\nBy default, navigation by mousewheel is disabled.\n"
},
{
	"uri": "https://gitpitch.com/docs/code-features/pro-code-filters/",
	"title": "Pro Code Filters",
	"tags": [],
	"description": "",
	"content": "  Activate a GitPitch Paid Plan to unlock Pro Code Filters.\n The Pro Code Filters feature lets you select and inject specific lines or blocks of code onto your slides from any source file or GitHub GIST.\n Introducing Code Filters  Code Slide with Lines Filter  Code Slide with Tags Filter  GitHub GIST Slide with Lines Filter  GitHub GIST Slide with Tags Filter     Introducing Code Filters By default, the following GitPitch code tools render the full source file contents onto your slide:\n Code Delimiter  Code Widget  GIST Delimiter  GIST Widget   Code filters let you select portions of a file for rendering on a slide instead of rendering the entire contents of the file. There are two distinct types of code filter:\n The lines filter is used to render individual lines or a range of lines from source. The tags filter is used to render lines that fall between user-defined tags within source.  The following sections demonstrate the use of code filters with each of these code tools.\nCode Slide with Lines Filter This section demonstrates the use of the lines filter to extract a single function from large Elixir source file and render only that function on a sample slide:\n---?code=src/app/monitor.ex\u0026amp;lang=elixir\u0026amp;lines=22-28 @snap[north-east span-100 text-06] Code Delim with Lines Filter @snapend This markdown snippet renders as follows:\nIn this example, a range of lines from 22-28 was activated on the lines filter. Note, multiple values can be specified on this filter using comma-separated values, for example, lines=1,9-14, 18.\nCode Slide with Tags Filter This section demonstrates the use of the tags filter to extract a single function from large Elixir source file and render only that function on a sample slide:\n--- @snap[north-east span-100 text-06] Code Widget with Tags Filter @snapend @code[elixir zoom-14](src/app/monitor.ex?tags=initpipe) This markdown snippet renders as follows:\nIn this example, all lines of code found within the user-defined initpipe tag were rendered on the slide. Lets look more closely at the monitor.ex file to see how the initpipe tag was defined. Here\u0026rsquo;s the relevant snippet from that file:\n. . def start_link(pipeline) do GenServer.start_link(__MODULE__, pipeline) end # tag::initpipe[] def init(pipeline) do with {:ok, _} \u0026lt;- validate_modules(pipeline), {:ok, _} \u0026lt;- validate_behaviours(pipeline), {:ok, _} \u0026lt;- activate_tracing(pipeline), state \u0026lt;- initialize_monitor(pipeline), do: start_monitor(state) end # end::initpipe[] # # Handlers for intercepting :erlang.trace/3 and :erlang.trace_pattern/2 # callbacks for modules registered on the pipeline. # . . See the opening tag directive and the corresponding closing end directive for the initpipe tag. More generally, using tags within yours ource code is accomplished as follows:\n To indicate the start of a tagged region, insert a comment line in your code. Assign a unique name to the tag directive. In the sample code above, the tag was named initpipe. Insert another comment line where you want the tagged region to end. Assign the name of the region you want to terminate to the end directive. Opening and closing tag directives must be terminated with [] syntax.  Note, multiple values can be specified on this filter using comma-separated values, for example, tags=initpipe,events,shutdown.\nGitHub GIST Slide with Lines Filter This section demonstrates the use of the lines filter to extract a multiple lines from a GitHub GIST and render only those lines on a sample slide:\n---?gist=jlong/2428561\u0026amp;lang=js\u0026amp;lines=1,4-6,10 @snap[north-east span-100 text-06] GIST Delim with Lines Filter @snapend This markdown snippet renders as follows:\nIn this example, multiple ranges of lines 1,4-6,8 were activated on the lines filter. Note, when activating multiple values on this filter use comma-separated values as demonstrated above.\nGitHub GIST Slide with Tags Filter This section demonstrates the use of the tags filter to extract multiple blocks of code from a GitHub GIST and render those blocks on a sample slide:\n--- @snap[north-east span-100 text-06] GIST Widget with Tags Filter @snapend @gist[ruby zoom-18](onetapbeyond/b3bb5ed063b7683ed51592edf4f80056?tags=timings,parse) This markdown snippet renders as follows:\nIn this example, all lines of code found within the user-defined timings and parse tags were rendered on the slide. Lets look more closely at the GIST content to see how the tagged content was defined. Here\u0026rsquo;s the relevant snippet from that file:\n. . # tag::timings[] if timings timings.record :read timings.start :parse end # end::timings[]  # tag::parse[] doc = (options[:parse] == false ? (Document.new lines, options) : (Document.new lines,options).parse) # end::parse[] . . See the opening tag directive and the corresponding closing end directive for the timings and parse tags. More generally, using tags within your source code is accomplished as follows:\n To indicate the start of a tagged region, insert a comment line in your code. Assign a unique name to the tag directive. In the sample code above, the tags were named timings and parse. Insert another comment line where you want the tagged region to end. Assign the name of the region you want to terminate to the end directive. Opening and closing tag directives must be terminated with [] syntax.  Note, when activating multiple values on this filter use comma-separated values as demonstrated above.\n"
},
{
	"uri": "https://gitpitch.com/docs/citations/",
	"title": "Work with Citations",
	"tags": [],
	"description": "",
	"content": "Chapter 12 Work with Citations Auto-generate Bibliographies using your existing BibTEX, EndNote, and RIS databases.\n"
},
{
	"uri": "https://gitpitch.com/docs/code-features/pro-code-power-properties/",
	"title": "Pro Code Power Properties",
	"tags": [],
	"description": "",
	"content": "  Activate a GitPitch Paid Plan to unlock Pro Code Revealing.\n The Pro Code Power Properties feature gives you fine-grained control over how code is rendered on your slides.\n Code-NoBlend Property  Code-Blend Property  Code-Max Property  Code-NoScroll Property  Code-Wrap Property  Code-Power Property   Code-NoBlend Property The Theme Template introduces an automatic convention that is activated for all slides displaying code. When a slide displays code, the slide background color automatically adopts the same background color used by the code block. Here are some sample code slides rendered using this convention:\nThe code-noblend property can be activated on any fenced code block , source code delimiter , code or GIST widget to disable this theme template convention for individual code slides within your deck.\nFor example, the code-noblend property can be activated on the @code widget as follows:\n @code[golang zoom-21 code-noblend](src/go/sample.go) Note, given the code-noblend property is provided to disabled a convention of the theme template only, if the theme template is not activated in the PITCHME.yaml for your slide deck, then the code-noblend property has no effect.\nCode-Blend Property The Theme Template introduces an automatic convention that is activated for all slides displaying code. When a slide displays code, the slide background color automatically adopts the same background color used by the code block.\nBut for slide decks using one of the deprecated themes this automatic convention is not activated. But this convention can be manually activated using the code-blend property on any fenced code block , source code delimiter , code or GIST widget .\nActivating this property can result in more visually attractive code slides. For example, the following screenshots shows what a slide might look like with this property first disabled, then enabled:\nCode-Max Property The size of the padding and margins surrounding any code-block rendered on a GitPitch slide is determined by the default style-rules defined by the fixed theme in use by the presentation.\nThe code-max property can be activated on any fenced code block , source code delimiter , code or GIST widget to minimize padding and margins around any code-block. Activating this property helps your code to enjoy the maximum amount of space on your slides which can result in more visually attractive code slides.\nFor example, the code-max property is activated on the @code widget as follows:\n @code[golang zoom-21 code-blend code-max](src/go/sample.go) The code-max property is activated on the @gist widget as follows:\n @gist[groovy zoom-13 code-blend code-max](onetapbeyond/8da53731fd54bab9d5c6) The code-max property can be used in conjunction with the Code ZOOM properties plus any of the other Power Properties described in this guide.\nCode-NoScroll Property Sometimes the code that you want to present will extend horizontally or vertically beyond the extent of the available space for the code-block on your slide. In such cases, the default behavior is for the code-block to permit horizontal and/or vertical scrolling. And in many cases, this is the desired behavior.\nThe code-noscroll property can be activated on any fenced code block , source code delimiter , code or GIST widget to prevent horizontal and vertical scrolling. This feature is particularly useful when code presenting as it prevents the temporary flash of scrollbars appearing on your slide as you walk step-by-step through your code.\nFor example, the code-noscroll property is activated on the @code widget as follows:\n @code[golang zoom-21 code-blend code-noscroll](src/go/sample.go) The code-noscroll property is activated on the @gist widget as follows:\n @gist[groovy zoom-13 code-blend code-noscroll](onetapbeyond/8da53731fd54bab9d5c6) The code-noscroll property can be used in conjunction with the Code ZOOM properties plus any of the other Power Properties described in this guide.\nCode-Wrap Property By default, lines of code do not wrap on GitPitch slides. As described in the Code-NoScroll section this means that sometimes lines of code can be truncated or require scrolling.\nThe code-wrap property can be activated on any fenced code block , source code delimiter , code or GIST widget to auto-wrap lines of code on your slides. This can be particularly useful when code presenting as it ensures any code you chose to focus on as you step through your code will be fit on the slide.\nFor example, the code-wrap property is activated on the @code widget as follows:\n @code[golang zoom-21 code-blend code-wrap](src/go/sample.go) The code-wrap property is activated on the @gist widget as follows:\n @gist[groovy zoom-13 code-blend code-wrap](onetapbeyond/8da53731fd54bab9d5c6) The code-wrap property can be used in conjunction with the Code ZOOM properties plus any of the other Power Properties described in this guide.\nThe following screenshots show the rendering of this sample slide, first with the default rendering, and then with the code-wrap property enabled:\nCode-Power Property In situations where you might want to activate the full set of Power Properties for a given code slide, you can use the code-power property.\nInstead of activating each individual property like this:\n @code[golang code-blend code-max code-noscroll code-wrap](src/go/sample.go) You can simply activate the code-power property and achieve the exact same result:\n @code[golang code-power](src/go/sample.go) The code-power property can be activated on any fenced code block , source code delimiter , code or GIST widget .\n"
},
{
	"uri": "https://gitpitch.com/docs/settings/remote-control/",
	"title": "Remote Control Setting",
	"tags": [],
	"description": "",
	"content": " Purpose The remote-control setting lets you activate navigation using a remote control device: Logitech, Kensington, etc.\nSample Syntax remote-control : true Details  Slideshow settings are activated using a PITCHME.yaml properties file.\n When activated, the remote-control setting gives presentation authors the ability to present hands-free - far away from the keyboard.\nBy default, navigation by remote-control is disabled.\nActivate Remote Control Custom Key Mappings In order to navigate through the full set of slides in a GitPitch presentation, a remote control device must emit a stream of Previous and Next events.\nThe actual key codes emitted by remote control devices for these events can vary. For example, some basic two-button devices emit events that map to Up and Down rather than Previous and Next key codes.\nTo ensure you can work with any remote control device, GitPitch supports two additional setting properties:\n remote-control-prevkey remote-control-nextkey  These settings can be used to map navigation events from any remote control device to Previous and Next events required by GitPitch for proper navigation.\nSample Remote Control Custom Key Mappings The following PITCHME.yaml settings demonstrate how you can map the Up (keycode: 38) and Down (keycode: 40) events generated by a remote control device to the Previous and Next events required by GitPitch:\nremote-control: true remote-control-prevkey: 38 remote-control-nextkey: 40 "
},
{
	"uri": "https://gitpitch.com/docs/layout-features/snap-layouts-slide-transitions/",
	"title": "Snap Layouts Slide Transitions",
	"tags": [],
	"description": "",
	"content": "  Snap-Layouts Rendering And Slide Transitions  Transition Management When Using Snap-Layouts On Many Slides  Transition Management When Using Snap-Layouts On Few Slides  Disable Transitions Globally For All Slides  Disable Transitions On Individual Slides   Snap-Layouts Rendering And Slide Transitions Slide content rendered by the snap-layout system is processed by an out-of-band snap-renderer that operates independently of the automatic slideshow layout .\nOne consequence of this design is that slide content rendered by the snap-layouts system does not participate in automatic slide transitions . Therefore, if your slide has a mixture of regular and snapped content, some of your content may appear to jump into position on the slide when rendered. And this jumping effect is not a smooth rendering experience for your audience.\nTo ensure smooth rendering for your snapped-content please take appropriate action as outlined in the following sections.\nTransition Management When Using Snap-Layouts On Many Slides If using snap-layouts extensively within your slideshow presentation, please take the following actions:\n Disable slide transitions globally in your PITCHME.yaml slideshow settings. (Optionally) Activate transitions for individual slides that are not using snap-layouts.  Transition Management When Using Snap-Layouts On Few Slides If using snap-layouts on only a small number of slides within your slideshow presentation, please take the following actions:\n Disable transitions on the individual slides  using snap-layouts.  Disable Transitions Globally For All Slides You can disable slide transitions globally for all slides in your presentation using the transition setting in your PITCHME.yaml as follows:\ntransition : none Disable Transitions On Individual Slides You can disable slide transitions on individual slides using the @transition shortcut syntax as follows:\n--- @transition[none] ## Regular Slide Content @snap[north-west] The Fastest Way From Idea To Presentation @snapend "
},
{
	"uri": "https://gitpitch.com/docs/speaker-features/",
	"title": "Speaker Support",
	"tags": [],
	"description": "",
	"content": "Chapter 13 Speaker Support Keep On-Track and On-Point during Live Presentations\n"
},
{
	"uri": "https://gitpitch.com/docs/settings/eager-loading/",
	"title": "Eager Loading Setting",
	"tags": [],
	"description": "",
	"content": " Purpose The eager-loading setting activates an eager-loading policy for slideshow presentation assets.\nSample Syntax eager-loading : true Details  Slideshow settings are activated using a PITCHME.yaml properties file.\n When the eager-loading setting is activated slideshow assets, including images and videos, are loaded over the network when a presentation is first opened in the browser.\nThis setting is provide mainly for conference speakers .\nBy default, this setting is disabled, ensuring a lazy-loading policy is used for slideshow presentation assets.\n"
},
{
	"uri": "https://gitpitch.com/docs/settings/charts-plugin/",
	"title": "Charts Plugin Setting",
	"tags": [],
	"description": "",
	"content": " Purpose The charts setting lets you activate Chart.js rendering for your slideshow presentation.\nSample Syntax charts : true Details  Slideshow settings are activated using a PITCHME.yaml properties file.\n When activated, the charts setting activates the Chart.js plugin for your slideshow presentation. See the Charts Guide documentation for details.\nBy default, the Chart.js plugin is disabled for all slideshow presentations.\n"
},
{
	"uri": "https://gitpitch.com/docs/settings/",
	"title": "PITCHME.yaml Settings",
	"tags": [],
	"description": "",
	"content": "Chapter 14 Slideshow Settings Customize the Look-and-Feel and Behavior of any Presentation\n"
},
{
	"uri": "https://gitpitch.com/docs/code-features/terminal-sessions/",
	"title": "Pro Terminal Sessions",
	"tags": [],
	"description": "",
	"content": "  Activate a GitPitch Paid Plan to unlock Pro Terminal Sessions.\n  About Terminal Sessions  Terminal Delimiter Syntax  Learn By Example with Custom Font Size \u0026#43; Title  Learn By Example with Custom Poster  Learn By Example with Custom Font Size \u0026#43; Theme \u0026#43; Poster   About Terminal Sessions Using terminal delimiter syntax, GitPitch supports the playback of Asciinema recorded terminal sessions. This feature is available to presentation authors when working online or offline.\nTerminal Delimiter Syntax The basic delimiter syntax to embed an Asciinema terminal session recording on a slide is as follows:\n---?terminal=path/to/recording/session.json The terminal delimiter syntax takes the following options:\n A relative path to a Asciinema terminal session file within your repo and A font option - an optional font-size control for the player A theme option - an optional theme control for the player A poster option - an optional preview control for the player An autoplay option - an optional auto-play control for the player A title option - an optional title text for the slide A color option - an optional slide background color override  The font parameter can take a value of small, medium, large, or any CSS font-size value (eg. 15px). If unspecified, the default value is medium. This parameter should be used to ensure the Asciinema Player fits the live terminal session content within the bounds of the slide.\nThe theme parameter can take a value of asciinema, tango, solarized-dark, solarized-light, or monokai. If unspecified, the default value is asciinema.\nThe poster parameter can take any npt time stamp (npt:mm:ss) to preview the recording \u0026ldquo;frame\u0026rdquo; at the time indicated. For example, the npt:2:34 stamp would cause the player to preview the \u0026ldquo;frame\u0026rdquo; at 2 minutes and 34 seconds into the recording.\nThe autoplay parameter can be activated by setting it\u0026rsquo;s value to true. When activated, the Asciinema player will auto-play on the slide. If unspecified, the default value is false.\nThe title parameter can take any string value. If specified, the string value will be rendered as a title above the Asciinema player on the slide.\nThe color parameter can take any value supported by the color background delimiter to activate a custom background color for the slide.\nLearn By Example with Custom Font Size + Title This PITCHME.md markdown snippet:\n---?terminal=sessions/wordpress.json\u0026amp;color=#7FDBFF\u0026amp;font=small\u0026amp;title=WordPress Backup Demo Results in the rendering of the following slide:\n Click here to view this slide within a live GitPitch presentation.\n Learn By Example With Custom Poster This PITCHME.md markdown snippet:\n---?terminal=sessions/wordpress.json\u0026amp;poster=npt:1:33\u0026amp;color=orange Results in the rendering of the following slide:\n Click here to view this slide within a live GitPitch presentation.\n Learn By Example With Custom Font Size + Theme + Poster This PITCHME.md markdown snippet:\n---?terminal=sessions/trino.json\u0026amp;font=16px\u0026amp;theme=monokai\u0026amp;poster=npt:0:37\u0026amp;color=#DDDDDD Results in the rendering of the following slide:\n Click here to view this slide within a live GitPitch presentation.\n "
},
{
	"uri": "https://gitpitch.com/docs/settings/maths-plugin/",
	"title": "Maths Plugin Setting",
	"tags": [],
	"description": "",
	"content": " Purpose The mathjax setting lets you activate MathJax rendering for your slideshow presentation.\nSample Syntax mathjax : TeX-MML-AM_HTMLorMML-full Details  Slideshow settings are activated using a PITCHME.yaml properties file.\n When activated, the mathjax setting activates the MathJax plugin for your slideshow presentation. See the Rich Media Math Formulas documentation for details.\nBy default, the MathJax plugin is disabled for all slideshow presentations.\n"
},
{
	"uri": "https://gitpitch.com/docs/git/",
	"title": "Modular Slideshows",
	"tags": [],
	"description": "",
	"content": "Chapter 15 Modular Markdown Modular Slide Decks powered by Git\n"
},
{
	"uri": "https://gitpitch.com/docs/settings/google-analytics/",
	"title": "Google Analytics Setting",
	"tags": [],
	"description": "",
	"content": " Purpose The gatoken setting lets you activate Google Analytics tracking for your slideshow presentation.\nSample Syntax gatoken : UA-1111111-1 Details  Slideshow settings are activated using a PITCHME.yaml properties file.\n When activated, the gatoken setting will enable Google Analytics tracking for your slideshow presentation.\nCreate GA Property In order to enable the gatoken setting you must first create your own GA Property for gitpitch.com. To create a GA Property do as follows:\n Log into Google Analytics  Create a new GA Property For your new GA Property, specify https://gitpitch.com as the property URL  Once your new GA Property has been created, look under Tracking Info to find your new GA tracking code. Use this tracking code as the value on the gatoken property in your PITCHME.yaml.\n It may take up to 24 hours for GA to start displaying initial viewing statistics.\n "
},
{
	"uri": "https://gitpitch.com/docs/pro-features/",
	"title": "Pro Features Guide",
	"tags": [],
	"description": "",
	"content": "Chapter 16 Pro Features Guide Enjoy enhanced tools and features on your Desktop and in the Cloud.\nStart a GitPitch 7 Day Free Trial Today.\n"
},
{
	"uri": "https://gitpitch.com/docs/enterprise/",
	"title": "Enterprise Guide",
	"tags": [],
	"description": "",
	"content": "Chapter 17 Enterprise Guide Deploy the GitPitch Server and Desktop On-Premises\n"
},
{
	"uri": "https://gitpitch.com/docs/settings/twitter-card/",
	"title": "Twitter Card Settings",
	"tags": [],
	"description": "",
	"content": "  Twitter Card Details  Twitter Card Examples  Twitter Card Testing   Purpose A combination of title, description, and thumbnail settings let you customize the details of a Twitter Card or other Open Graph card for your slideshow presentation.\n Note: These Twitter Cards settings are a Pro Power feature only.\n Sample Syntax title : \u0026#34;Elixir Lang\u0026#34; description : \u0026#34;A functional, concurrent language on the Erlang VM\u0026#34; thumbnail : assets/img/screenshot.png Twitter Card Details  Slideshow settings are activated using a PITCHME.yaml properties file.\n When activated, these setting are used to populate a Twitter Card or other Open Graph card when you share a link to your slideshow presentation on services like Twitter, Slack, LinkedIn, etc.\nIf you do not provide custom values for these settings in your PITCHME.yaml file then default values are automatically assigned by GitPitch.\n Note, the optimal width:height display ratio for a thumbnail image is 1.81:1.\n Twitter Card Examples Here is an example GitPitch slideshow presentation using custom Twitter Card settings being displayed on Twitter:\nHere is the default Twitter Card display for a GitPitch slideshow presentation that has not set custom values for these settings:\nTwitter Card Testing Once you have activated the required settings for the card in your PITCHME.yaml file we recommend testing the card for your slide deck before sharing it on Twitter, Slack, LinkedIn, etc.\nTwitter provides a simple validator service where you can quickly test and preview your card by providing the URL to your GitPitch slide deck.\nhttps://cards-dev.twitter.com/validator Simply open the above URL in your browser and then input the URL for your slide deck. When you click Preview Card this service will render a preview of your card.\nThis is a great way to verify you are publishing the correct title, description, and image for your deck before you sharing publicly on social media.\nOne additional feature of using the simple Twitter validator service is that it causes cached Twitter card data for your deck to be discarded. That means if you update any of the card properties for your deck, you can use this service to flush the Twitter cache, thereby ensuring your audience will start to see your new card properties.\n"
},
{
	"uri": "https://gitpitch.com/docs/ci/",
	"title": "GitPitch CI Guide",
	"tags": [],
	"description": "",
	"content": "Chapter 18 GitPitch CI Guide Generate GitPitch PDF, PPTX, JPGs within your existing CI/CD Pipelines\n"
},
{
	"uri": "https://gitpitch.com/docs/the-template/",
	"title": "Slide Design Templates",
	"tags": [],
	"description": "",
	"content": "Chapter 19 Slide Design Templates Quickstart Templates for Common Slide Designs\n"
},
{
	"uri": "https://gitpitch.com/docs/auxiliary-features/",
	"title": "Auxiliary Features",
	"tags": [],
	"description": "",
	"content": "Chapter 20 Auxiliary Features More Slideshow Presentation Features For The Real World\n"
},
{
	"uri": "https://gitpitch.com/docs/promotions/",
	"title": "GitPitch Promotions",
	"tags": [],
	"description": "",
	"content": "Chapter 21 GitPitch Promotions Find out if you Qualify for a discounted GitPitch Pro Subscription?\n"
},
{
	"uri": "https://gitpitch.com/docs/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://gitpitch.com/docs/",
	"title": "GitPitch Documentation",
	"tags": [],
	"description": "",
	"content": "Slide Decks for Developers  GitPitch Desktop GitPitch Desktop is a markdown presentation tool available on MacOS, Linux, and Windows 10 (Pro + Enterprise). The Desktop lets you develop, preview, present, export, and publish slide decks. Working offline and with built-in speaker-support it is perfect for conferences, meetups, and delivering technical training.\nGitPitch Desktop works seamlessly with GitPitch.com allowing the publishing of public, private, and password-protected slide decks online with a simple git-push to any Git repository in the cloud.\nGitPitch.com GitPitch.com is a modern slide deck service that offers a wide range of free and paid slide (and course) content creation, presenting, and publishing features. The service is available to everyone with an account on GitHub, GitLab, and Bitbucket.\nGitPitch Enterprise GitPitch Enterprise makes the gitpitch.com server plus GitPitch Desktop available for deployment on-premises. It is delivered using Docker container technology. Integrating seamlessly with self-hosted Git servers. The deployment of GitPitch Enterprise on-premises gives you an opportunity to get more out of your existing Git infrastructure and investment. GitPitch Docs The GitPitch Docs found at https://gitpitch.com/docs are also made available for download. Once downloaded, you can browse and reference these docs when working offline. To download the docs bundle, click here . Once downloaded, expand the zip bundle and open index.html under a local Web server.\nGitPitch Open Source GitPitch began as an open-source project developed and maintained on GitHub. The project repo can be found here . You are invited to fork and modify the source for you own particular needs. PRs also very welcome.\n"
},
{
	"uri": "https://gitpitch.com/docs/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]